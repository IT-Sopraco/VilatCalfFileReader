using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using VSM.RUMA.CORE;
using VSM.RUMA.CORE.DB.DataTypes;
using VSM.RUMA.CORE.DB.MYSQL;
using System.Data.Common;
using MySql.Data.MySqlClient;
using System.Globalization;

namespace VSM.RUMA.CORE.DB
{
    public class DBMasterQueries : DBSelectQueries, AFSavetoDB
    {
        public DBMasterQueries(DBConnectionToken pDbconntoken) : base(pDbconntoken, new unMySQL(unMySQL.DBHostType.MASTER))
        {
            if (pDbconntoken.MasterUser == "agroread")
            {
                unLogger.WriteError($@" Wrong MasterUser in  VSM.RUMA.CORE.DB.DBMasterQueries.DBMasterQueries  {pDbconntoken.MasterUser}");
                throw new ArgumentException($@" Wrong MasterUser in  VSM.RUMA.CORE.DB.DBMasterQueries.DBMasterQueries  {pDbconntoken.MasterUser}");
            }
            WriteActions = new DBWriteActions(pDbconntoken, mDatabase);
        }

        private DBWriteActions WriteActions;

        [Obsolete("gebruik DatabaseSession")]
        public void setToken(DBConnectionToken pDbconntoken)
        {
            //throw new NotImplementedException("setToken is deprecated");
            unLogger.WriteError("setToken is deprecated");
        }

        public VSMMysqlConnectionInfo GetConnectionInfo(DBConnectionToken token)
        {
            var mysql = (this.mDatabase as unMySQL);
            if (mysql == null)
            {
                unLogger.WriteError("this.mDatabase is not unMysql!");
                return new VSMMysqlConnectionInfo(null);
            }
            return new VSMMysqlConnectionInfo(new MySqlConnectionStringBuilder(token.MasterConnectionString));
        }

        public List<TRANSMIT> GetTransmitsByFarmId(int pFarmId)
        {
            UBN u = getUBNByFarmId(pFarmId);
            return Responders.GetTransmitsByFarmId(pFarmId, u.UBNid);
        }

        public List<TRANSMIT> GetTransmitsByUbnId(int ubnId)
        {
            return Responders.GetTransmitsByUbnId(ubnId);
        }

        [Obsolete("gebruik DatabaseSession", true)]
        public bool StartTransaction()
        {
            return true;
        }
        [Obsolete("gebruik DatabaseSession", true)]
        public bool Commit()
        {
            return true;

        }
        [Obsolete("gebruik DatabaseSession", true)]
        public bool RollBack()
        {
            return true;
        }

        public int GetHcoId(String pEDINRS)
        {
            StringBuilder QRY_Labels = new StringBuilder();
            QRY_Labels.Append(" SELECT LABELS.* ");
            QRY_Labels.Append(" FROM LABELS");
            QRY_Labels.Append(" WHERE LabKind = 16");
            QRY_Labels.AppendFormat(" AND LabCountry = {0}", utils.getLabelsLabcountrycode());
            QRY_Labels.AppendFormat(" AND LabLabel = '{0}'", pEDINRS);
            System.Data.DataTable dtResult = mDatabase.QueryData(mToken, QRY_Labels);
            if (dtResult.Rows.Count == 0) return 0;
            return Convert.ToInt32(dtResult.Rows[0]["LabId"]);

        }
        //public int GetRacId(String pEDINRS)
        //{
        //    StringBuilder QRY_Labels = new StringBuilder();
        //    QRY_Labels.Append(" SELECT * ");
        //    QRY_Labels.Append(" FROM LABELS");
        //    QRY_Labels.Append(" WHERE LabKind = 19");
        //    QRY_Labels.AppendFormat(" AND LabCountry = {0}", utils.getLabelsLabcountrycode());
        //    QRY_Labels.AppendFormat(" AND LabLabel LIKE '{0} %'", pEDINRS);
        //    System.Data.DataTable dtResult = mDatabase.QueryData(mToken,QRY_Labels);
        //    if (dtResult.Rows.Count == 0) return 0;
        //    return Convert.ToInt32(dtResult.Rows[0]["LabId"]);


        //}
        public int GetRacId(String pEDINRS, string ProgId)
        {
            string Labkind = "19";
            if (ProgId == "3")
            { Labkind = "35"; }
            else if (ProgId == "5")
            { Labkind = "51"; }
            StringBuilder QRY_Labels = new StringBuilder();
            QRY_Labels.Append(" SELECT LABELS.* ");
            QRY_Labels.Append(" FROM LABELS");
            QRY_Labels.Append(" WHERE LabKind = " + Labkind);
            QRY_Labels.AppendFormat(" AND LabCountry = {0}", utils.getLabelsLabcountrycode());
            QRY_Labels.AppendFormat(" AND LabLabel LIKE '{0} %'", pEDINRS);
            System.Data.DataTable dtResult = mDatabase.QueryData(mToken, QRY_Labels);
            if (dtResult.Rows.Count == 0) return 0;
            return Convert.ToInt32(dtResult.Rows[0]["LabId"]);

        }

        /// <summary>
        /// Doel: Beltes opvragen THIRDS uit de LIVE agrofactuur THIRD 
        /// </summary>
        /// <param name="thrid"></param>
        /// <param name="connectionstring"></param>
        /// <param name="query"></param>
        /// <param name="MissingSchemaAction"></param>
        /// <returns></returns>
        public DataTable GetExtraDataTable(int thrid, string connectionstring, string query, MissingSchemaAction MissingSchemaAction)
        {
            if (!string.IsNullOrEmpty(connectionstring) && !string.IsNullOrEmpty(query))
            {
                try
                {

                    using (MySqlConnection con = new MySqlConnection(handelconnectionstring(connectionstring)))
                    {
                        con.Open();

                        MySqlCommand comm = new MySqlCommand(query.ToString(), con);
                   
                        MySqlDataAdapter adp = new MySqlDataAdapter(comm);
                        adp.MissingSchemaAction = MissingSchemaAction;
                        DataSet ds = new DataSet();
                        adp.Fill(ds);
                        if (ds.Tables.Count > 0)
                        {
                            return ds.Tables[0];
                        }
                    }
                }
                catch(Exception exc)
                {
                    SOAPLOG sl = new SOAPLOG { Date = DateTime.Now, Status="E", Code = nameof(GetExtraDataTable),Omschrijving=exc.Message, ThrId=thrid };
                    WriteSoapError(sl);
                    unLogger.WriteError($@"{nameof(DBMasterQueries)}.{nameof(GetExtraDataTable)} thrid:{thrid}  query:{query} {exc.ToString()}");
                }
            }
            return new DataTable();
        }

        private string handelconnectionstring(string connectionstring)
        {
            string ret = connectionstring;
            try
            {
              
                char[] split1 = { ';' };
                char[] split2 = { '=' };
                StringBuilder connstring = new StringBuilder();

                string[] splitconnstring = connectionstring.Split(split1);
                for (int i = 0; i < splitconnstring.Length; i++)
                {
                    if (splitconnstring[i].ToLower().StartsWith("user id=") || splitconnstring[i].ToLower().StartsWith("pwd="))
                    {
                        string[] pwd = splitconnstring[i].Split(split2);
                        if (pwd.Length == 2)
                        {
                            connstring.Append(pwd[0] + "=" +  base64Decode(pwd[1]));
                        }
                    }
                    else
                    {
                        connstring.Append(splitconnstring[i]);
                    }
                    connstring.Append(";");

                }

                var lConnectionString = new MySqlConnectionStringBuilder(connstring.ToString());
                //test
                MySqlConnection conn = new MySqlConnection(lConnectionString.ToString());
                conn.Open();
                conn.Close();
                return lConnectionString.ToString();
            }
            catch
            {
                return ret;

            }
        }
        /// <summary>
        /// Alleen te gebruiken voor  handelconnectionstring
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private string base64Decode(string data)
        {
            try
            {
                byte[] encData_byte = Convert.FromBase64String(data);
                string decodedData = System.Text.Encoding.UTF8.GetString(encData_byte.Reverse().ToArray());
                return decodedData;
            }
            catch (Exception ex)
            {
                throw new Exception("Error in base64Decode" + ex.Message, ex);
            }
        }
        public string BepaalIDRRascode(BEDRIJF lFarm, String AniLifeNumber)
        {
            String Result = "";
            StringBuilder QRY_Ras = new StringBuilder();
            QRY_Ras.Append(" SELECT AniLifeNumber, agrofactuur.LABELS.LabLabel, SECONRAC.SraRate ");
            QRY_Ras.Append(" FROM ANIMAL ");
            QRY_Ras.Append(" JOIN SECONRAC  ");
            QRY_Ras.Append(" ON ANIMAL.AniId = SECONRAC.AniId ");
            QRY_Ras.Append(" JOIN agrofactuur.LABELS ");
            QRY_Ras.Append(" ON SECONRAC.RacId = agrofactuur.LABELS.LabId ");
            QRY_Ras.Append(" AND agrofactuur.LABELS.LabKind = 35 ");
            QRY_Ras.Append(" AND agrofactuur.LABELS.LabCountry = 528 ");
            QRY_Ras.AppendFormat(" WHERE ANIMAL.AniAlternateNumber = '{0}' AND ANIMAL.AniId>0 ", AniLifeNumber);
            if (AniLifeNumber != String.Empty)
            {
                //DataTable dtRas = mDatabase.QueryData(mToken.getLastChildConnection().getChildConnection(lFarm.Programid), QRY_Ras);
                //bovenstaande regel gaf error:System.NullReferenceException: DB voor ProgramId 24 niet geinitialiseerd
                //overlegd en veranderd in hieronder;
                DataTable dtRas = mDatabase.QueryData(mToken.getLastChildConnection(), QRY_Ras);
                foreach (DataRow row in dtRas.Rows)
                {
                    Result += row["LabLabel"].ToString().Substring(0, 2) + row["SraRate"].ToString();
                }
            }
            return Result;
        }

        public string getLastIplogin(int thrid)
        {
            if (thrid > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append($@" SELECT * FROM agrofactuur.FARMLOGIN  
                  WHERE ThrID={thrid}
                  ORDER BY Last_Login DESC
                 ");
                var tbl = mDatabase.QueryData(mToken, lQuery);
                if (tbl.Rows.Count > 0)
                {
                    if (tbl.Rows[0]["Ip_Adress"] != DBNull.Value)
                    {
                        return tbl.Rows[0]["Ip_Adress"].ToString();
                    }
                }
            }
            return "1";
        }

        public bool UBNinDB(String pUBN)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT UBN.* FROM UBN");
            lQuery.AppendFormat(" WHERE Bedrijfsnummer = '{0}'", pUBN);
            return mDatabase.QueryData(mToken, lQuery).Rows.Count > 0;
        }

        public int GetUBNidbyUBN(String pUBN)
        {
            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getUBNidbyUBN";
            //mDatabase.AddParameter(cmd, "UBN", pUBN);
            //System.Data.DataTable dtResult = mDatabase.QueryData(mToken, cmd);
            //if (dtResult.Rows.Count == 0) return 0;
            //return Convert.ToInt32(dtResult.Rows[0]["UBNid"]);

            StringBuilder QRY_UBN = new StringBuilder();
            QRY_UBN.AppendFormat(" SELECT UBNid FROM UBN WHERE Bedrijfsnummer = '{0}' ", pUBN);
            System.Data.DataTable dtResult = mDatabase.QueryData(mToken, QRY_UBN);
            if (dtResult.Rows.Count == 0) return 0;
            return Convert.ToInt32(dtResult.Rows[0]["UBNid"]);
        }

        public long getUbnnummerHondVBK(int thrid)
        {
            if (thrid > 0)
            {
                string qry = getSelection_Query("GetUbnnummerHondVBK");
//                string qry = $@"select  u.Bedrijfsnummer from agrofactuur.ADMINISTRATIE ad 
//JOIN agrofactuur.UBN u ON ad.ThrId = u.ThrID
//JOIN agrofactuur.THIRD t ON t.ThrId = u.ThrID
//WHERE ad.progid = 25
//AND ad.ProgramID IN(2500,2599, 2550,2551,2570)
//AND u.UbnID > 0
//AND u.Bedrijfsnummer REGEXP '^[0-9]+$'
//AND NOT u.Bedrijfsnummer like '999%'
//AND t.thrid = {thrid}
//UNION
//SELECT  u.Bedrijfsnummer FROM agrofactuur.THIRD t
//JOIN agrofactuur.UBN u ON u.ThrId = t.ThrID
//JOIN agrofactuur.BEDRIJF b ON b.UbnID = u.UbnID
//WHERE b.progid = 25
//AND b.ProgramID IN(2500,2599, 2550,2551,2570)
//AND u.UbnID > 0
//AND u.Bedrijfsnummer REGEXP '^[0-9]+$'
//AND NOT u.Bedrijfsnummer like '999%'
//AND t.thrid = {thrid}";
                StringBuilder QRY_Ubnnummer = new StringBuilder();
                QRY_Ubnnummer.Append($@"SET @ThrId:={thrid};");
                QRY_Ubnnummer.Append(qry);
                System.Data.DataTable dtResult = mDatabase.QueryData(mToken, QRY_Ubnnummer);
                if (dtResult.Rows.Count == 0) return 0;
                return Convert.ToInt64(dtResult.Rows[0]["Bedrijfsnummer"]);
            }
            return 0;
        }

        public long getUbnnummerHondVirbac(int thrid)
        {
            if (thrid > 0)
            {
                string qry = getSelection_Query("GetUbnnummerHondVirbac");
                if (!string.IsNullOrWhiteSpace(qry))
                {
//                    qry = $@"
//select  u.Bedrijfsnummer from agrofactuur.ADMINISTRATIE ad 
//JOIN  agrofactuur.UBN u ON ad.ThrId=u.ThrID
//JOIN  agrofactuur.THIRD t ON t.ThrId=u.ThrID
//WHERE ad.progid=25 
//AND ad.ProgramID IN (2501,2571,2598,2521)
//AND u.UbnID>0
//AND u.Bedrijfsnummer REGEXP '^[0-9]+$' 
//AND NOT u.Bedrijfsnummer like '999%'
//AND t.thrid={thrid}
//UNION
//SELECT  u.Bedrijfsnummer  FROM agrofactuur.THIRD t
//JOIN  agrofactuur.UBN u ON u.ThrId=t.ThrID
//JOIN  agrofactuur.BEDRIJF b ON b.UbnID=u.UbnID
//WHERE b.progid=25 
//AND b.ProgramID IN (2501,2571,2598,2521)
//AND u.UbnID>0
//AND u.Bedrijfsnummer REGEXP '^[0-9]+$'
//AND NOT u.Bedrijfsnummer like '999%'
//AND t.thrid={thrid}
//";
                    StringBuilder QRY_Ubnnummer = new StringBuilder();
                    QRY_Ubnnummer.Append($@"SET @ThrId:={thrid};");
                    QRY_Ubnnummer.Append(qry);
                    System.Data.DataTable dtResult = mDatabase.QueryData(mToken, QRY_Ubnnummer);
                    if (dtResult.Rows.Count == 0) return 0;
                    return Convert.ToInt64(dtResult.Rows[0]["Bedrijfsnummer"]);
                }
            }
            return 0;
        }

        public int getUBNidAndProgIdByUBNNr(string UBNNr, out int ProgId)
        {
            //StringBuilder sb = new StringBuilder(
            //    "SELECT u.UBNid, b.ProgId" +
            //    " FROM agrofactuur.UBN u" +
            //    " INNER JOIN agrofactuur.BEDRIJF b ON (u.UBNid = b.UBNid)" +
            //    " WHERE u.Bedrijfsnummer='" + UBNNr + "'");

            //DbCommand dbcmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //dbcmd.CommandType = System.Data.CommandType.Text;
            //dbcmd.CommandText = sb.ToString();

            //DbDataReader rdr = dbcmd.ExecuteReader();


            DataTable dt = QueryData("SELECT u.UBNid, b.ProgId" +
                " FROM agrofactuur.UBN u" +
                " INNER JOIN agrofactuur.BEDRIJF b ON (u.UBNid = b.UBNid)" +
                " WHERE u.Bedrijfsnummer='" + UBNNr + "'", MissingSchemaAction.Add);

            //rdr.Read();
            //int ubnid = rdr["UBNid"] == DBNull.Value || rdr["UBNid"] == null ? 0 : Convert.ToInt32(rdr["UBNid"]);
            //ProgId = rdr["ProgId"] == DBNull.Value || rdr["ProgId"] == null ? 0 : Convert.ToInt32(rdr["ProgId"]);
            //rdr.Close();
            //return ubnid;
            ProgId = dt.Rows[0]["ProgId"] == DBNull.Value || dt.Rows[0]["ProgId"] == null ? 0 : Convert.ToInt32(dt.Rows[0]["ProgId"]);
            return dt.Rows[0]["UBNid"] == DBNull.Value || dt.Rows[0]["UBNid"] == null ? 0 : Convert.ToInt32(dt.Rows[0]["UBNid"]);
        }

        public string getSelection_Query(string naam, int agrolink_program_progid = 0)
        {
            if (string.IsNullOrEmpty(naam))
            {
                return "";
            }
            try
            {
                StringBuilder q = new StringBuilder($@" SELECT sq_Query_String FROM agrosettings.SELECTION_QUERY where sq_Function_Name = '{naam}' ");
                if (agrolink_program_progid > 0)
                {
                    q.Append($@" AND sq_ProgId={agrolink_program_progid} ");
                }
                System.Data.DataTable dtSelection_Query = mDatabase.QueryData(mToken, q);
                if (dtSelection_Query.Rows.Count > 0)
                {
                    if (dtSelection_Query.Rows[0][0] != DBNull.Value)
                    {
                        return dtSelection_Query.Rows[0][0].ToString();
                    }
                }
            }
            catch (Exception exc)
            {
                unLogger.WriteError($@"DBMasterQueries getSelection_Query({naam}) :" + exc.ToString());
            }
            return "";
        }

        public List<ANIMAL> GetAnimalAndParents(int pAniId)
        {

            List<ANIMAL> lResultValue = new List<ANIMAL>();
            StringBuilder QRY_Parents = new StringBuilder();
            QRY_Parents.Append("  SELECT a.* FROM ANIMAL a ");
            QRY_Parents.AppendFormat("WHERE a.AniId = {0} ", pAniId);
            QRY_Parents.Append(" UNION ");
            QRY_Parents.Append(" SELECT m.* FROM ANIMAL m ");
            QRY_Parents.Append(" INNER JOIN ANIMAL a ON a.AniIdMother = m.AniId ");
            QRY_Parents.AppendFormat(" WHERE m.AniId = a.AniIdMother AND a.AniId = {0} ", pAniId);
            QRY_Parents.Append(" UNION ");
            QRY_Parents.Append(" SELECT f.* FROM ANIMAL f ");
            QRY_Parents.Append(" INNER JOIN ANIMAL a ON a.AniIdFather = f.AniId ");
            QRY_Parents.AppendFormat(" WHERE f.AniId = a.AniIdFather AND a.AniId = {0} ", pAniId);
            System.Data.DataTable dtAnimals = mDatabase.QueryData(mToken.getLastChildConnection(), QRY_Parents);
            ANIMAL lAnimal;
            foreach (DataRow drAnimal in dtAnimals.Rows)
            {
                lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultValue.Add(lAnimal);
                }
            }

            return lResultValue;
        }

        public List<ANIMAL> GetAnimalByLifenrMotherAndBirthdate(String pAniLifeNumberMother, DateTime pBirthDate)
        {

            /*
             * GetCalfsbyMotherandBirthdate
                BEGIN
	                SELECT ANIMAL.* 
	                FROM ANIMAL
	                JOIN ANIMAL AS ANIMOTHER
	                ON ANIMAL.AniIdMother = ANIMOTHER.AniId 
	                WHERE ANIMOTHER.AniLifeNumber = lifeNumberMother
	                AND ANIMAL.AniBirthDate = BirthDate;
                END
             */

            List<ANIMAL> lResultValue = new List<ANIMAL>();
            StringBuilder QRY_Mothers = new StringBuilder();
            QRY_Mothers.Append(" SELECT ANIMAL.* ");
            QRY_Mothers.Append(" FROM ANIMAL");
            QRY_Mothers.Append(" JOIN ANIMAL AS ANIMOTHER");
            QRY_Mothers.Append(" ON ANIMAL.AniIdMother = ANIMOTHER.AniId ");
            QRY_Mothers.AppendFormat(" WHERE ANIMOTHER.AniLifeNumber = '{0}'", pAniLifeNumberMother);
            QRY_Mothers.Append(" AND date_format(ANIMAL.AniBirthDate,'%Y-%m-%d %T')= '" + getDatabaseDateFormat(pBirthDate) + "' ");


            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            ////cmd.CommandType = System.Data.CommandType.StoredProcedure;
            ////cmd.CommandText = "GetCalfsbyMotherandBirthdate";
            //cmd.CommandText = "SELECT ANIMAL.* "+ 
            //        " FROM ANIMAL"+ 
            //        " JOIN ANIMAL AS ANIMOTHER"+ 
            //        " ON ANIMAL.AniIdMother = ANIMOTHER.AniId "+ 
            //        " WHERE ANIMOTHER.AniLifeNumber = lifeNumberMother"+ 
            //        " AND ANIMAL.AniBirthDate = BirthDate;";
            //mDatabase.AddParameter(cmd, "lifeNumberMother", pAniLifeNumberMother);
            //mDatabase.AddParameter(cmd, "BirthDate", pBirthDate);
            System.Data.DataTable dtAnimals = mDatabase.QueryData(mToken.getLastChildConnection(), QRY_Mothers);
            ANIMAL lAnimal;
            foreach (DataRow drAnimal in dtAnimals.Rows)
            {
                lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultValue.Add(lAnimal);
                }
            }

            return lResultValue;
        }

        public List<ANIMAL> GetBullsByFarmId(int pFarmid)
        {
            return GetBullsByFarmId(pFarmid, 0);
        }

        /// <summary>
        /// Om lijsten te vullen waar je bijvoorbeeld vader kunt selecteren. Ook zou het op het moment geen geldige vader zijn, omdat
        /// het dier toen is ingevuld moet het dier natuurlijk wel in de dropdownlist staan, anders krijg je een lege dropdownbox
        /// </summary>
        /// <param name="pFarmid"></param>
        /// <param name="pCurrentFather"></param>
        /// <returns></returns>
        public List<ANIMAL> GetBullsByFarmId(int pFarmid, int pCurrentFather)
        {
            StringBuilder lsb = new StringBuilder("");

            if (pCurrentFather > 0)
            {
                lsb.Append(" SELECT ANIMAL.*,BULLUBN.Preferred FROM ANIMAL ");
                lsb.Append(" LEFT JOIN BULLUBN ON BULLUBN.BullId=ANIMAL.AniId ");
                lsb.AppendFormat(" WHERE AniId = {0} ", pCurrentFather);
                lsb.Append(" LIMIT 1 ");

                lsb.Append(" UNION ");
            }
            lsb.Append(" SELECT ANIMAL.*,BULLUBN.Preferred ");
            lsb.Append(" FROM ANIMAL JOIN BULLUBN ON ANIMAL.AniId = BULLUBN.BullId ");
            lsb.AppendFormat(" WHERE FarmId = {0} ", pFarmid);
            lsb.Append(" AND  date_format(ANIMAL.Anibirthdate,'%Y-%m-%d %T')>'1998-01-01 00:00:00' ");
            lsb.Append(" AND ANIMAL.AniId>0 ");
            lsb.Append(" ORDER BY Preferred DESC ,  BullAiNumber ");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    if (lAnimal.AniLifeNumber.Trim() == "")
                    {
                        lAnimal.AniLifeNumber = lAnimal.BullITBNumber;
                    }
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public List<ANIMAL> GetBullsByProgramidByAnimalCategory(int pProgramid)
        {
            //voor nfs om te kunnen vergelijken 
            StringBuilder lsb = new StringBuilder(" SELECT ANIMAL.* FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId = ANIMALCATEGORY.AniId  ");
            lsb.Append(" INNER JOIN agrofactuur.BEDRIJF ON  agrofactuur.BEDRIJF.FarmId = ANIMALCATEGORY.FarmId ");
            lsb.Append(" WHERE  (ANIMALCATEGORY.AniCategory>0 AND ANIMALCATEGORY.AniCategory<4 ) ");
            lsb.Append(" AND agrofactuur.BEDRIJF.ProgramId=" + pProgramid.ToString() + " AND ANIMAL.AniSex=1 AND agrofactuur.BEDRIJF.FarmId>0");
            lsb.Append(" ORDER BY  ANIMAL.AniLifeNumber, ANIMAL.BullAiNumber ");
            //return mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    if (lAnimal.AniLifeNumber.Trim() == "")
                    {
                        lAnimal.AniLifeNumber = lAnimal.BullITBNumber;
                    }
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;

        }

        public DataTable GetAnimalsByEventIds(List<int> pEventids)
        {
            StringBuilder lsb = new StringBuilder("");
            DataTable tbl = new DataTable();
            if (pEventids.Count() > 0)
            {
                lsb.Append(" SELECT DISTINCT(a.AniId),a.AniLifeNumber,a.AniAlternateNumber, ac.AniWorknumber FROM ANIMAL a ");
                lsb.Append(" JOIN ANIMALCATEGORY ac ON ac.AniId=a.AniId ");
                lsb.Append(" JOIN EVENT ON EVENT.AniId=a.AniId ");
                lsb.Append(" WHERE EVENT.EventId IN (" + string.Join(",", pEventids) + ") ");
                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lsb, "animals", MissingSchemaAction.Add);

            }
            return tbl;
        }


        public DataTable GetMilkDataStats(string ubn)
        {
            string qry = $@"SELECT CONCAT('SELECT db.AniId, db.ECM60DIM, db.ECM10DIM, db.ECM305DIM FROM ', CONCAT('dbstats_', il_UBN, '_', ProgramId, '_', il_Id), '.R_CURVE db WHERE db.Calvingdate IN (SELECT MAX(db2.Calvingdate) FROM ', CONCAT('dbstats_', il_UBN, '_', ProgramId, '_', il_Id), '.R_CURVE db2 GROUP BY db2.AniId)') as qry
                                        ,db.ds_Host  FROM flexdata.IMPORTLIST
                                        JOIN flexdata.DATABASESERVERS db ON db.ds_Id=flexdata.IMPORTLIST.ds_Id AND ds_active=1
                                        WHERE il_ubn = '{ubn}' AND il_importstate = 4";
            DataSet ds1 = new DataSet();
            DataTable tblq = mDatabase.QueryData(mToken, ds1, new StringBuilder(qry), "query", MissingSchemaAction.Add);
            if (tblq.Rows.Count > 0)
            {
                if (tblq.Rows[0]["qry"] != DBNull.Value && tblq.Rows[0]["ds_Host"] != DBNull.Value)
                {
                    string dbQry = tblq.Rows[0]["qry"].ToString();
                    string statsdbhost = tblq.Rows[0]["ds_Host"].ToString();
                    // get statsdata
                    var statsMysql = new MySql.Data.MySqlClient.MySqlConnection(mToken.getStatsConnection(statsdbhost));
                    try
                    {
                        statsMysql.Open();
                        MySqlDataAdapter adapter = new MySqlDataAdapter(dbQry, statsMysql);
                        DataSet stats = new DataSet();
                        adapter.Fill(stats, "Stats");
                        return stats.Tables[0];
                    }
                    catch (Exception exc)
                    {
                        unLogger.WriteError(exc.ToString());
                    }
                    finally
                    {
                        if (statsMysql.State == ConnectionState.Open)
                        {
                            statsMysql.Close();
                        }
                    }
                }
            }
            return null;
        }

        public List<int> GetMilkTanknrs(int pUbnId)
        {
            StringBuilder lsb = new StringBuilder();
            lsb.AppendFormat(" SELECT M.SupplierNumber FROM agrofactuur.MILKINVO M WHERE M.UbnID={0} GROUP BY M.SupplierNumber ", pUbnId);
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<int> lResultList = new List<int>();
            foreach (DataRow dr in tbl.Rows)
            {
                lResultList.Add(Convert.ToInt32(dr["SupplierNumber"]));
            }
            return lResultList;
        }
        public bool InsertMilkQual(MILKQUAL pMilkQual)
        {
            try
            {
                if (WriteActions.SaveObject(pMilkQual) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public DataTable GetBullsForRammenring()
        {
            /* Copy paste query
                SELECT a.AniId,a.AniLifeNumber,a.AniAlternateNumber,DATE_FORMAT( a.AniBirthDate, '%d-%m-%Y') AS AniBirthDate ,a.AniName,a.BullAiNumber,a.BullShortName,a.AniSex,
                (
                SELECT COUNT(DISTINCT (BULLUBN.FarmId)) FROM BULLUBN LEFT JOIN agrofactuur.BEDRIJF ON  agrofactuur.BEDRIJF.FarmId = BULLUBN.FarmId
                 WHERE  BULLUBN.BullId=a.AniId
                ) AS Aantal,
                (
                SELECT COUNT(DISTINCT (agrofactuur.BEDRIJF.FarmId)) FROM agrofactuur.BEDRIJF 
                WHERE agrofactuur.BEDRIJF.ProgramId=52 AND agrofactuur.BEDRIJF.ProgId=3 AND agrofactuur.BEDRIJF.FarmId>0 
                ) AS AantalBedrijven,
                (
                 agrofactuur.UBN.Bedrijfsnummer 
                ) AS UBN,
                (
                 agrofactuur.UBN.Bedrijfsnaam 

                ) AS Naam,
                ANIMALCATEGORY.FarmId,
                agrofactuur.BEDRIJF.UbnID
                FROM ANIMAL a
                INNER JOIN ANIMALCATEGORY ON a.AniId = ANIMALCATEGORY.AniId  
                 INNER JOIN agrofactuur.BEDRIJF ON  agrofactuur.BEDRIJF.FarmId = ANIMALCATEGORY.FarmId 
                 INNER JOIN agrofactuur.UBN ON agrofactuur.UBN.UbnId=agrofactuur.BEDRIJF.UbnID
                 WHERE  (ANIMALCATEGORY.AniCategory>0 AND ANIMALCATEGORY.AniCategory<4 ) 
                 AND agrofactuur.BEDRIJF.ProgramId=52 AND a.AniSex=1 AND agrofactuur.BEDRIJF.FarmId>0
                 ORDER BY UBN, a.AniLifeNumber, a.BullAiNumber
             */
            StringBuilder pQuery = new StringBuilder();
            pQuery.Append(" SELECT a.AniId,a.AniLifeNumber,a.AniAlternateNumber,a.AniBirthDate ");
            pQuery.Append(" ,a.AniName,a.BullAiNumber,a.BullShortName,a.AniSex, ");
            pQuery.Append(" ( ");
            pQuery.Append(" SELECT COUNT(DISTINCT (BULLUBN.FarmId)) FROM BULLUBN LEFT JOIN agrofactuur.BEDRIJF ON  agrofactuur.BEDRIJF.FarmId = BULLUBN.FarmId ");
            pQuery.Append("  WHERE  BULLUBN.BullId=a.AniId AND agrofactuur.BEDRIJF.ProgramId=52 AND agrofactuur.BEDRIJF.ProgId=3 ");
            pQuery.Append(" ) AS Aantal, ");
            pQuery.Append(" ( ");
            pQuery.Append(" SELECT COUNT(DISTINCT (agrofactuur.BEDRIJF.FarmId)) FROM agrofactuur.BEDRIJF  ");
            pQuery.Append(" WHERE agrofactuur.BEDRIJF.ProgramId=52 AND agrofactuur.BEDRIJF.ProgId=3 AND agrofactuur.BEDRIJF.FarmId>0  ");
            pQuery.Append(" ) AS AantalBedrijven, ");
            pQuery.Append(" ( ");
            pQuery.Append("  agrofactuur.UBN.Bedrijfsnummer ");
            pQuery.Append(" ) AS UBN, ");
            pQuery.Append(" ( ");
            pQuery.Append("  agrofactuur.UBN.Bedrijfsnaam ");
            pQuery.Append(" ) AS Naam, ");
            pQuery.Append(" ANIMALCATEGORY.FarmId, ");
            pQuery.Append(" agrofactuur.BEDRIJF.UbnID ");
            pQuery.Append(" FROM ANIMAL a ");
            pQuery.Append(" INNER JOIN ANIMALCATEGORY ON a.AniId = ANIMALCATEGORY.AniId   ");
            pQuery.Append("  INNER JOIN agrofactuur.BEDRIJF ON  agrofactuur.BEDRIJF.FarmId = ANIMALCATEGORY.FarmId  ");
            pQuery.Append("  INNER JOIN agrofactuur.UBN ON agrofactuur.UBN.UbnId=agrofactuur.BEDRIJF.UbnID  ");
            pQuery.Append("  WHERE  (ANIMALCATEGORY.AniCategory>0 AND ANIMALCATEGORY.AniCategory<4 )  ");
            pQuery.Append("  AND agrofactuur.BEDRIJF.ProgramId=52 AND a.AniSex=1 AND agrofactuur.BEDRIJF.FarmId>0 ");
            pQuery.Append("  ORDER BY UBN, a.AniLifeNumber, a.BullAiNumber ");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), pQuery);
            return tbl;
        }

        public List<ANIMAL> GetBullsByProgramid(int pProgramid)
        {
            StringBuilder lsb = new StringBuilder("SELECT DISTINCT ANIMAL.AniId,ANIMAL.AniLifeNumber, ANIMAL.AniAlternateNumber,ANIMAL.BullAiNumber,");
            lsb.Append(" ANIMAL.BullShortName FROM ANIMAL INNER JOIN BULLUBN ON ANIMAL.AniId = BULLUBN.BullId ");
            lsb.Append(" INNER JOIN agrofactuur.BEDRIJF ON  agrofactuur.BEDRIJF.FarmId = BULLUBN.FarmId");
            lsb.Append("  WHERE  agrofactuur.BEDRIJF.ProgramId=" + pProgramid.ToString());
            //if (pSearch.Length > 0)
            //{
            //    lsb.Append("  AND  " + pSearch);
            //}
            lsb.Append("  ORDER BY BULLUBN.Preferred DESC ,  ANIMAL.BullAiNumber ");
            unLogger.WriteInfo(lsb.ToString());
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);

            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;

        }
        public List<ANIMAL> GetAnimalsByFarmId(int pFarmid)
        {
            StringBuilder lsb = new StringBuilder("SELECT ANIMAL.* FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId WHERE ANIMALCATEGORY.FarmId=" + pFarmid.ToString());
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }
        public List<SUPPLY1_DETAILS> GetSupply_DetailsByFactID(int pFactID)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM SUPPLY1_DETAILS WHERE FactID='" + pFactID.ToString() + "'");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<SUPPLY1_DETAILS> lResultList = new List<SUPPLY1_DETAILS>();
            foreach (DataRow dr in tbl.Rows)
            {
                SUPPLY1_DETAILS lSup = new SUPPLY1_DETAILS();
                if (mDatabase.FillObject(lSup, dr))
                {
                    lResultList.Add(lSup);
                }
            }
            return lResultList;
        }
        public List<ANIMAL> GetAnimalsByFarmId(int pFarmid, int pMaxAniCategory)
        {
            StringBuilder lsb = new StringBuilder("SELECT ANIMAL.* FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId WHERE ANIMALCATEGORY.FarmId=" + pFarmid.ToString());
            lsb.AppendFormat(" AND ANIMALCATEGORY.AniCategory<={0} AND ANIMALCATEGORY.AniId>0 ", pMaxAniCategory);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public IEnumerable<ANIMAL> GetAnimalsByUbnId(int ubnId, int maxAniCategory)
        {
            string sql =  $@"SELECT DISTINCT
#ANIMALCATEGORY
ac.AniCategory, ac.AniWorknumber,ac.AniMinasCategory,ac.AniComment
#ANIMAL
,a.AniId,a.AniAlternateNumber,a.AniAltNumberCode
,a.AniAltNumberState,a.AniBirthDate,a.AniBlindFactor,a.AniBreed
,a.AniCalcWeight1,a.AniCalcWeight2,a.AniCalcWeight3,a.AniCalcWeight4 
,a.AniCountryCodeBirth,a.AniCountryCodeDepart,a.AniCountryCodeOrigin
,a.AniDatumBlindfactor,a.AniDatumScrapie,a.AniDestination,a.AniDraagtijd,a.AniGenoType
,a.Anihaircolor,a.AniHaircolor_Memo,a.AniHairstyle,a.AniHorned,a.AniId,a.AniIdDam
,a.AniIdFather,a.AniIdMother,a.AniIdRaisedBy ,a.AniISOnumber,a.AniKind
,a.AniLifenrOrigin,a.AniLifeNumber,a.AniMixed,a.AniName
,a.AniNling,a.AniPedigreeCode,a.AniPredikaat,a.AniPredikaatdatum
,a.AniQuality,a.AniRationGroup,a.AniScrapie,a.AniSex,a.AniSketch
,a.AniSpecies,a.AniStatus,a.AniTripleA,a.AniZling
,a.BullAiNumber,a.BullITBNumber,a.BullShortName,a.ThrId,a.RacId,a.RaisedBy
,a.UbnID
                            FROM ANIMAL a
                            JOIN ANIMALCATEGORY ac ON a.AniId = ac.AniId
                            WHERE a.AniId > 0
                            AND ac.UBNid = {ubnId}
                            AND ac.Anicategory <= {maxAniCategory} ";

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(sql));
            return getList<ANIMAL>(tbl);
        }



        public int GetAnimalCount(int pFarmId, int pMaxAniCategory)
        {
            StringBuilder lsb = new StringBuilder("SELECT COUNT(ANIMAL.AniId) AS aantal FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lsb.AppendFormat(" WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lsb.AppendFormat(" AND ANIMALCATEGORY.AniCategory <= {0} AND ANIMALCATEGORY.AniId>0 AND ANIMAL.AniId>0 ", pMaxAniCategory);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            int aantal = 0;
            if (tbl.Rows.Count > 0)
            {
                int.TryParse(tbl.Rows[0][0].ToString(), out aantal);
            }
            return aantal;
        }
        public List<ANIMAL> GetChildren(int pAniId, int pAniSex)
        {
            StringBuilder lsb = new StringBuilder();
            if (pAniSex == 1)
            {
                lsb.AppendFormat("SELECT ANIMAL.* FROM ANIMAL WHERE ANIMAL.AniIdFather={0}  AND ANIMAL.AniId>0 ", pAniId);
            }
            else
            {
                lsb.AppendFormat("SELECT ANIMAL.* FROM ANIMAL WHERE ANIMAL.AniIdMother={0}  AND ANIMAL.AniId>0 ", pAniId);
            }
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }
        public DataTable GetChildren3Generations(int pAniId, int pAniSex)
        {
            if (pAniId > 0)
            {

                StringBuilder QRY_Children = new StringBuilder();
                QRY_Children.Append("  SELECT a.AniId ,a.AniLifeNumber, a.AniName, a.AniSex,a.AniBirthDate ");
                QRY_Children.Append(" ,f.AniId AS FG2AniId,f.AniLifeNumber AS FG2AniLifeNumber, f.AniName AS FG2AniName ,f.AniSex AS FG2AniSex, f.AniBirthDate aS FG2AniBirthDate  ");
                QRY_Children.Append(" ,m.AniId AS MG2AniId,m.AniLifeNumber AS MG2AniLifeNumber, m.AniName AS MG2AniName ,m.AniSex AS MG2AniSex, m.AniBirthDate aS MG2AniBirthDate ");
                QRY_Children.Append(" ,f2.AniId AS FG31AniId,f2.AniLifeNumber AS FG31AniLifeNumber, f2.AniName AS FG31AniName ,f2.AniSex AS FG31AniSex, f2.AniBirthDate aS FG31AniBirthDate  ");
                QRY_Children.Append(" ,m2.AniId AS MG31AniId,m2.AniLifeNumber AS MG31AniLifeNumber, m2.AniName AS MG31AniName ,m2.AniSex AS MG31AniSex, m2.AniBirthDate aS MG31AniBirthDate  ");
                QRY_Children.Append(" ,f3.AniId AS FG32AniId,f3.AniLifeNumber AS FG32AniLifeNumber, f3.AniName AS FG32AniName ,f3.AniSex AS FG32AniSex, f3.AniBirthDate aS FG32AniBirthDate  ");
                QRY_Children.Append(" ,m3.AniId AS MG32AniId,m3.AniLifeNumber AS MG32AniLifeNumber, m3.AniName AS MG32AniName ,m3.AniSex AS MG32AniSex, m3.AniBirthDate aS MG32AniBirthDate  ");

                QRY_Children.Append("   FROM agrobase_sheep.ANIMAL a ");
                QRY_Children.Append("  LEFT JOIN  agrobase_sheep.ANIMAL f ON f.AniIdFather=a.AniId AND f.AniId>0 ");
                QRY_Children.Append("  LEFT JOIN  agrobase_sheep.ANIMAL m ON m.AniIdMother=a.AniId AND m.AniId>0 ");

                QRY_Children.Append("  LEFT JOIN  agrobase_sheep.ANIMAL f2 ON f2.AniIdFather=f.AniId AND f2.AniId>0 ");
                QRY_Children.Append("  LEFT JOIN  agrobase_sheep.ANIMAL m2 ON m2.AniIdMother=f.AniId AND m2.AniId>0 ");

                QRY_Children.Append("  LEFT JOIN  agrobase_sheep.ANIMAL f3 ON f3.AniIdFather=m.AniId AND f3.AniId>0 ");
                QRY_Children.Append("  LEFT JOIN  agrobase_sheep.ANIMAL m3 ON m3.AniIdMother=m.AniId AND m3.AniId>0 ");
                if (pAniSex == 1)
                {
                    QRY_Children.AppendFormat("  WHERE a.AniIdFather={0} AND a.AniId>0 ", pAniId);
                }
                else
                {
                    QRY_Children.AppendFormat(" WHERE  a.AniIdMother={0} AND a.AniId>0 ", pAniId);
                }

                DataSet ds = new DataSet();
                return mDatabase.QueryData(mToken.getLastChildConnection(), ds, QRY_Children, "", MissingSchemaAction.Add);
            }
            return null;
        }
        public int GetChildrenCount(int pAniId)
        {

            StringBuilder lsb = new StringBuilder();
            lsb.AppendFormat("SELECT COUNT(ANIMAL.AniId) AS Aantal FROM ANIMAL WHERE (ANIMAL.AniIdFather={0} OR  ANIMAL.AniIdMother={0} ) AND ANIMAL.AniId>0 ", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            int lResult = 0;
            foreach (DataRow drAnimal in tbl.Rows)
            {
                if (drAnimal["Aantal"] != DBNull.Value && drAnimal["Aantal"].ToString() != "")
                {
                    int.TryParse(drAnimal["Aantal"].ToString(), out lResult);
                }
            }
            return lResult;
        }
        public List<ANIMAL> GetCurrentAnimalsForFarm(int pFarmId)
        {
            StringBuilder lsb = new StringBuilder("SELECT ANIMAL.* FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lsb.AppendFormat("WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lsb.Append("AND ANIMALCATEGORY.AniCategory IN (1,2,3)");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public SUPPLY1_VOER_VERDELING GetSupplyVoerVerdeling(int pSupplyID, int pSVV_ProgID)
        {
            SUPPLY1_VOER_VERDELING obj = new SUPPLY1_VOER_VERDELING();
            StringBuilder query = new StringBuilder();
            query.AppendFormat("SELECT * FROM agrofactuur.SUPPLY1_VOER_VERDELING SVV WHERE SVV.SupplyID={0} AND SVV.SVV_ProgID={1}", pSupplyID, pSVV_ProgID);
            mDatabase.FillObject(mToken, obj, query);
            return obj;
        }
        public bool SaveSupplyVoerVerdeling(SUPPLY1_VOER_VERDELING pSUPPLY1_VOER_VERDELING)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pSUPPLY1_VOER_VERDELING);
            //cmd.CommandText = mDatabase.CreateReplaceCommandText(pSUPPLY1_VOER_VERDELING);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            return mDatabase.ModifyObject(mToken, pSUPPLY1_VOER_VERDELING, mDatabase.CreateReplaceCommandText(pSUPPLY1_VOER_VERDELING)) == 1;
        }

        public bool SaveSupply1Voer(SUPPLY1_VOER pSUPPLY1_VOER)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pSUPPLY1_VOER);
            //cmd.CommandText = mDatabase.CreateReplaceCommandText(pSUPPLY1_VOER);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;


            return mDatabase.ModifyObject(mToken, pSUPPLY1_VOER, mDatabase.CreateReplaceCommandText(pSUPPLY1_VOER)) == 1;
        }

        public int GetAnimalIndexForDierkaart(string pFarmConfiganimals, int pFarmId, int pAniId, out int pPresentAnimals, out int pTotalAnimals, out int pAniIdFirst, out int pAniIdLeft, out int pAniIdRight, out int pAniIdLast)
        {

            string fcDieren = pFarmConfiganimals;// GetFarmConfigValue(pFarmId, "animals", "5");
            pPresentAnimals = 0;
            pTotalAnimals = 0;
            pAniIdFirst = pAniId;
            pAniIdLeft = pAniId;
            pAniIdRight = pAniId;
            pAniIdLast = pAniId;
            StringBuilder sqlwnr = new StringBuilder();
            sqlwnr.Append("SELECT ANIMAL.AniId ,ANIMALCATEGORY.Anicategory FROM ANIMAL "
                        + " INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId "
                        + " WHERE ANIMALCATEGORY.FarmId=" + pFarmId.ToString());
            if (fcDieren == "5")
            {
                sqlwnr.Append(" AND ANIMALCATEGORY.Anicategory > 0 AND ANIMALCATEGORY.Anicategory < 6 ");
            }
            else
            {
                sqlwnr.Append(" AND ANIMALCATEGORY.Anicategory > 0 AND ANIMALCATEGORY.Anicategory < 5");
            }

            sqlwnr.Append(" ORDER BY ANIMALCATEGORY.Anicategory,ANIMALCATEGORY.AniworkNumber ");

            DataTable tbl = new DataTable();
            try
            {

                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sqlwnr);

            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            int currentanimalindex = 1;
            if (tbl.Rows.Count > 0)
            {
                int.TryParse(tbl.Rows[0]["AniId"].ToString(), out pAniIdFirst);


                DataRow[] rwindex = tbl.Select("AniId=" + pAniId.ToString());
                int index = 0;
                int LastIndex = 0;
                if (rwindex.Count() > 0)
                {
                    index = tbl.Rows.IndexOf(rwindex[0]);
                    currentanimalindex = currentanimalindex + index;

                }

                DataRow[] rwPresentAnimals = tbl.Select("Anicategory<4");
                pPresentAnimals = rwPresentAnimals.Count();
                if (fcDieren == "5")
                {
                    pTotalAnimals = tbl.Rows.Count;
                    LastIndex = tbl.Rows.Count - 1;
                    int.TryParse(tbl.Rows[tbl.Rows.Count - 1]["AniId"].ToString(), out pAniIdLast);
                }
                else if (fcDieren == "4")
                {
                    pTotalAnimals = tbl.Rows.Count;
                    int.TryParse(tbl.Rows[pTotalAnimals - 1]["AniId"].ToString(), out pAniIdLast);
                    LastIndex = pTotalAnimals - 1;
                }
                else
                {
                    pTotalAnimals = tbl.Rows.Count;
                    int.TryParse(tbl.Rows[pPresentAnimals - 1]["AniId"].ToString(), out pAniIdLast);
                    LastIndex = pPresentAnimals - 1;
                }
                if (index > 0)
                {
                    int.TryParse(tbl.Rows[index - 1]["AniId"].ToString(), out pAniIdLeft);
                    if ((index + 1) > LastIndex)
                    {
                        int.TryParse(tbl.Rows[LastIndex]["AniId"].ToString(), out pAniIdRight);
                    }
                    else
                    {
                        int.TryParse(tbl.Rows[index + 1]["AniId"].ToString(), out pAniIdRight);
                    }
                }
                else
                {
                    pAniIdLeft = pAniId;
                    if (LastIndex > 0)
                    {
                        int.TryParse(tbl.Rows[1]["AniId"].ToString(), out pAniIdRight);
                    }
                    else
                    {
                        pAniIdRight = pAniId;
                    }
                }
            }

            return currentanimalindex;
        }

        public DataTable GetAnimalsForDierkaart(string pFarmConfigValueanimals, int pFarmId, int pOffset, int pLimit, string pRowFilter, string pOrderBy, int pProgID)
        {
            string fcDieren = pFarmConfigValueanimals;// GetFarmConfigValue(pFarmId, "animals", "5");

            int maxAniCategory = 0;

            if (fcDieren == "5")
                maxAniCategory = 5;
            else if (fcDieren == "4")
                maxAniCategory = 4;
            else
                maxAniCategory = 3;

            StringBuilder sqlwnr = new StringBuilder();
            int anisexprogid = 0;
            if (pProgID == 3)
            { anisexprogid = 3; }
            else if (pProgID >= 20)
            { anisexprogid = pProgID; }
            sqlwnr.Append(
                "SELECT  ANIMAL.AniId, ANIMAL.AniName,ANIMAL.AniLifeNumber, ANIMAL.AniSex, ANIMAL.AniAlternateNumber," +
                      " ANIMAL.AniBirthDate, ANIMALCATEGORY.AniworkNumber, ANIMALCATEGORY.Anicategory" +
                " FROM ANIMALCATEGORY " +
                " INNER JOIN ANIMAL ON ANIMAL.AniId=ANIMALCATEGORY.AniId " +
                //"al.LabLabel as Geslacht, LEFT JOIN agrofactuur.AGRO_LABELS al ON al.LabId= ANIMAL.AniSex AND al.LabKind=4 AND al.LabProgramID=0 AND al.LabProgID=" + anisexprogid.ToString() + " AND al.LabCountry=0 " +
                " WHERE ANIMALCATEGORY.FarmId=" + pFarmId.ToString() +
                " AND ANIMALCATEGORY.AniId > 0 " +
                " AND (ANIMALCATEGORY.Anicategory BETWEEN 0 AND " + maxAniCategory + ")");

            if (pRowFilter != null && pRowFilter.Trim() != "")
            {
                sqlwnr.Append(" AND " + pRowFilter + " ");
            }

            if (pOrderBy != null && pOrderBy.Trim() != "")
            {
                sqlwnr.AppendFormat(" ORDER BY ANIMALCATEGORY.Anicategory, {0} ", pOrderBy);
            }
            else
            {
                sqlwnr.Append(" ORDER BY ANIMALCATEGORY.Anicategory, ANIMALCATEGORY.AniworkNumber ");
            }

            if (pLimit > 0)
            {
                sqlwnr.AppendFormat("  LIMIT {0},{1};  ", pOffset, pLimit);
            }


            DataTable tbl = new DataTable();

            try
            {
                if (pFarmId > 0)
                {
                    tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sqlwnr);

                }
                else
                {
                    string[] kols = { "AniId", "AniName", "AniLifeNumber", "AniSex", "AniAlternateNumber", "AniBirthDate", "AniworkNumber", "Anicategory" };
                    foreach (string k in kols)
                    {
                        DataColumn col = new DataColumn(k);
                        tbl.Columns.Add(col);
                    }

                }
            }
            catch (Exception exc)
            {
                unLogger.WriteDebug(exc.ToString());
            }

            return tbl;
        }

        public DataTable GetAnimalsForGroupWeight(int pFarmId, int pMaxAnimalCategory, bool pOnlyWithWeightDate)
        {
            StringBuilder sqlwnr = new StringBuilder();

            sqlwnr.Append(
                "SELECT ANIMAL.AniId, ANIMAL.AniName,ANIMAL.AniLifeNumber, ANIMAL.AniSex, ANIMAL.AniAlternateNumber," +
                      " ANIMAL.AniBirthDate, ANIMALCATEGORY.AniworkNumber, ANIMALCATEGORY.Anicategory," +
                      "  WEIGHT.WeightDate,WEIGHT.WeightKg " +
                " FROM ANIMALCATEGORY " +
                " INNER JOIN ANIMAL ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            if (pOnlyWithWeightDate)
            {
                sqlwnr.Append(" JOIN WEIGHT ON WEIGHT.AniId=ANIMAL.AniId ");



            }
            else
            {
                sqlwnr.Append(" LEFT JOIN WEIGHT ON WEIGHT.AniId=ANIMAL.AniId ");
            }
            sqlwnr.Append(" WHERE ANIMALCATEGORY.FarmId=" + pFarmId.ToString());
            sqlwnr.Append(" AND ANIMALCATEGORY.AniId > 0 ");
            if (pOnlyWithWeightDate)
            {
                sqlwnr.Append(" AND (NOT ISNULL(WEIGHT.WeightKg)) ");
            }
            if (pMaxAnimalCategory > 3)
            {
                sqlwnr.Append(" AND (ANIMALCATEGORY.Anicategory BETWEEN 0 AND 4) ");
            }
            else
            {
                sqlwnr.Append(" AND (ANIMALCATEGORY.Anicategory BETWEEN 0 AND 3) ");
            }
            if (pFarmId > 0)
            {
                DataSet p = new DataSet();
                return mDatabase.QueryData(mToken.getLastChildConnection(), p, sqlwnr, "groepsweight", MissingSchemaAction.Add);
            }
            else { return new DataTable(); }
        }

        public DataTable GetAnimalsForVerblijfplaatsen(int pFarmId, DateTime pBegindatum, DateTime pEinddatum)
        {
            StringBuilder sqlwnr = new StringBuilder();


            sqlwnr.Append(" SELECT ANIMAL.AniId, ANIMAL.AniName,ANIMAL.AniLifeNumber, ANIMAL.AniSex, ANIMAL.AniAlternateNumber, ");
            sqlwnr.Append(" ANIMAL.AniBirthDate, ANIMALCATEGORY.AniworkNumber, ANIMALCATEGORY.Anicategory,");
            sqlwnr.Append(" MOVEMENT.MovId ,MOVEMENT.MovDate");
            sqlwnr.Append(" FROM ANIMAL ");
            sqlwnr.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId");
            sqlwnr.Append(" LEFT JOIN MOVEMENT ON MOVEMENT.AniId=ANIMAL.AniId");
            sqlwnr.AppendFormat(" WHERE ANIMALCATEGORY.FarmId={0} ", pFarmId);
            sqlwnr.Append(" AND ANIMAL.AniId > 0 ");
            sqlwnr.Append(" AND");
            sqlwnr.Append(" (");
            sqlwnr.Append(" 	(");
            sqlwnr.Append("   		(ANIMALCATEGORY.Anicategory >0 AND ANIMALCATEGORY.Anicategory <5 )");
            sqlwnr.Append("  		AND ( MOVEMENT.MovDate IS NULL OR  ( MOVEMENT.MovDate>=" + MySQL_Datum(pBegindatum, 0) + " AND MOVEMENT.MovDate<=" + MySQL_Datum(pEinddatum, 0) + " ) )");
            sqlwnr.Append("  	)");
            sqlwnr.Append("  	OR");
            sqlwnr.Append("  	(");
            sqlwnr.Append("  		(ANIMALCATEGORY.Anicategory >0 AND ANIMALCATEGORY.Anicategory <4 )");
            sqlwnr.Append("  	)");
            sqlwnr.Append(" )");

            DataTable tbl = new DataTable();
            try
            {
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sqlwnr);
            }
            catch (Exception exc)
            {
                unLogger.WriteDebug(exc.ToString());
            }

            return tbl;

        }
        public void GetAnimalCountForDierkaart(int pFarmId, out int pPresentAnimals, out int pTotalAnimals)
        {
            pPresentAnimals = 0;
            pTotalAnimals = 0;
            if (pFarmId > 0)
            {
                string fcDieren = GetFarmConfigValue(pFarmId, "animals", "5");

                int pCategoryFilter = 4;
                if (fcDieren == "5")
                    pCategoryFilter = 6;
                else if (fcDieren == "4")
                    pCategoryFilter = 5;

                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT ( ");
                sb.Append("SELECT COUNT(ANIMAL.AniId)  ");
                sb.Append("FROM ANIMAL INNER  ");
                sb.Append("JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId  ");
                sb.AppendFormat("WHERE ANIMALCATEGORY.FarmId = {0} AND ANIMALCATEGORY.AniCategory IN (1,2,3) AND ANIMALCATEGORY.AniId>0 AND ANIMAL.AniId>0  ", pFarmId);
                sb.Append("), ");
                sb.Append("( ");
                sb.Append("SELECT COUNT(ANIMAL.AniId)  ");
                sb.Append("FROM ANIMAL INNER  ");
                sb.Append("JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId  ");
                sb.AppendFormat("WHERE ANIMALCATEGORY.FarmId = {0} AND ANIMALCATEGORY.AniCategory < {1} AND ANIMALCATEGORY.AniId>0 AND ANIMAL.AniId>0  ", pFarmId, pCategoryFilter);
                sb.Append(") ");

                DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
                if (tbl.Rows.Count > 0)
                {
                    int.TryParse(tbl.Rows[0][0].ToString(), out pPresentAnimals);
                    int.TryParse(tbl.Rows[0][1].ToString(), out pTotalAnimals);
                }
            }
        }

        public DataTable getGVAttentielijstDataTable(int pFarmId)
        {
            //datatable definitie
            DataTable dt = new DataTable();

            dt.Columns.Add("Nummer");
            dt.Columns.Add("Levensnummer");
            dt.Columns.Add("Van Datum");
            dt.Columns.Add("Soort");
            dt.Columns.Add("Tm Datum");
            dt.Columns.Add("Dagen");
            dt.Columns.Add("Opmerking");
            dt.Columns.Add("EventId");
            dt.Columns.Add("TreFirstApplicationId");
            //query data voor inhoud



            DateTime dtBegin = DateTime.Now.AddDays(-30);
            DateTime dtEnd = DateTime.Today;
            DateTime dtEndQ = DateTime.Today.AddMonths(1);

            string mysql_dateformat = "yyyy-MM-dd";
            string display_dateformat = "dd-MM-yy";

            StringBuilder sql = new StringBuilder(
                $@"SELECT e.EventId,  a.AniId, a.AniLifeNumber, ac.AniWorkNumber,  
                       e.EveDate, t.TreMedDaysTreat, t.TreMedHoursRepeat, t.TreDaysForControl, 
                        m.MedName, m.MedCode, t.MedId ,  t.TreFirstApplicationId, t.TreTime
                 FROM ANIMAL a 
                 RIGHT JOIN ANIMALCATEGORY ac ON (ac.AniId=a.AniId) 
                 RIGHT JOIN EVENT e ON (e.AniId=ac.AniId) 
                 LEFT JOIN TREATMEN t ON (t.EventId=e.EventId) 
                 LEFT JOIN agrofactuur.MEDICINE m ON (t.MedId=m.MedId) 
                 WHERE ((ac.FarmId={pFarmId}) AND (ac.AniCategory <= 3)) 
                 AND ((e.EveKind=6) AND (e.EveDate BETWEEN '{dtBegin.ToString(mysql_dateformat)}' AND '{dtEndQ.ToString(mysql_dateformat)}')) 
                 AND (t.TreGroupTreat = 0) 
                 AND ((t.TreMedDaysTreat >= 1) OR (t.TreDaysForControl > 0)) 
                 AND e.EventId>0  
 
                 ORDER BY e.EveDate, ac.AniWorkNumber");

            /*
                "SELECT COUNT(a.AniId) AS aantalDieren,  "+
               " AND (t.TreGroupTreat = TRUE)"+
            */


            DataTable dtQuery = mDatabase.QueryData(mToken.getLastChildConnection(), sql);
            if (dtQuery.Rows.Count > 0)
            {
                string medicijnQkoorts = GetFarmConfigValue(pFarmId, "medicijnQkoorts", "");
                int MedIdQkoorts = 0;
                int.TryParse(medicijnQkoorts, out MedIdQkoorts);

                foreach (DataRow drQuery in dtQuery.Rows)
                {
                    int tMedId = 0;
                    if (drQuery["MedId"] != DBNull.Value)
                    {
                        int.TryParse(drQuery["MedId"].ToString(), out tMedId);
                    }
                    int TreMedDaysTreat = 1;
                    int TreMedHoursRepeat = 1;//delen door 0
                    int TreDaysForControl = 1;
                    try
                    {
                        TreMedDaysTreat = int.Parse(drQuery["TreMedDaysTreat"].ToString());
                    }
                    catch { }
                    try
                    {
                        TreMedHoursRepeat = int.Parse(drQuery["TreMedHoursRepeat"].ToString());
                    }
                    catch { }
                    try
                    {
                        TreDaysForControl = int.Parse(drQuery["TreDaysForControl"].ToString());
                    }
                    catch { }

                    DateTime eveDate = getDatumFormat(drQuery["EveDate"], "main.aspx EveDate");
                    DateTime nextDate = eveDate;
                    if (eveDate.Date <= DateTime.Now.Date)
                    {

                        string select = "AniId=" + drQuery["AniId"].ToString() + " AND Medid=" + tMedId;
                        int TreFirstApplicationId = 0;
                        if (drQuery["TreFirstApplicationId"] != DBNull.Value)
                        {
                            int.TryParse(drQuery["TreFirstApplicationId"].ToString(), out TreFirstApplicationId);
                        }
                        var aantalbehandeldagen = dtQuery.Select(select);
                        TreMedDaysTreat = aantalbehandeldagen.Count();
                        string soort = "";

                        if (TreMedDaysTreat > 1)
                        {
                            int dagen = (TreMedDaysTreat * TreMedHoursRepeat / 24);

                            soort = "Herhaling";
                            nextDate = eveDate.AddDays(dagen - 1);

                            TimeSpan diff = nextDate.Subtract(dtEnd);
                            int dagenOver = diff.Days;

                            if (dagenOver >= 0)
                            {
                                var rwthere = dt.Select("Soort='Herhaling' AND Nummer='" + drQuery["AniWorkNumber"].ToString() + "' AND Opmerking='" + drQuery["MedName"].ToString() + "' ");
                                if (rwthere.Count() == 0)
                                {
                                    DataRow dr = dt.NewRow();
                                    dr[0] = drQuery["AniWorkNumber"].ToString();
                                    dr[1] = drQuery["AniLifeNumber"].ToString();
                                    dr[2] = eveDate.ToString(display_dateformat);
                                    dr[3] = soort;
                                    dr[4] = nextDate.ToString(display_dateformat);
                                    dr[5] = dagenOver;
                                    dr[6] = drQuery["MedName"].ToString();
                                    dr[7] = drQuery["EventId"];
                                    dr[8] = drQuery["TreFirstApplicationId"];
                                    if (tMedId > 0 && MedIdQkoorts > 0 && (tMedId == MedIdQkoorts))
                                    { }
                                    else
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                            }
                        } //herhaling

                        if (TreDaysForControl > 0)
                        {
                            soort = "Controle";

                            nextDate = eveDate.AddDays(TreDaysForControl + aantalbehandeldagen.Count() - 1);
                            TimeSpan diff = nextDate.Subtract(dtEnd);
                            int dagenOver = diff.Days;

                            if (dagenOver >= 0)
                            {
                                var rwthere = dt.Select("Soort='Controle' AND Nummer='" + drQuery["AniWorkNumber"].ToString() + "' AND Opmerking='" + drQuery["MedName"].ToString() + "' ");
                                if (rwthere.Count() == 0)
                                {
                                    DataRow dr = dt.NewRow();
                                    dr[0] = drQuery["AniWorkNumber"].ToString();
                                    dr[1] = drQuery["AniLifeNumber"].ToString();
                                    dr[2] = nextDate.ToString(display_dateformat); //controledatum
                                    dr[3] = soort;
                                    dr[4] = "";
                                    dr[5] = dagenOver;
                                    dr[6] = drQuery["MedName"].ToString();
                                    dr[7] = drQuery["EventId"];
                                    dr[8] = drQuery["TreFirstApplicationId"];
                                    if (tMedId > 0 && MedIdQkoorts > 0 && (tMedId == MedIdQkoorts))
                                    { }
                                    else
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                            }
                        } //controle
                    }
                    dt.DefaultView.Sort = "Dagen";
                }
            }

            return dt;
        }

        #region ATTINST  ATTCUST

        public List<ATTINST> getAttentielijstinstellingen(int pFarmId)
        {
            StringBuilder lsb = new StringBuilder("SELECT ATTINST.* FROM ATTINST   ");
            lsb.AppendFormat("WHERE ATTINST.farmid = {0} AND ATTINST.Internalnr>0 ", pFarmId);


            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<ATTINST> lResultList = new List<ATTINST>();
            foreach (DataRow drAttinst in tbl.Rows)
            {
                ATTINST lAttinst = new ATTINST();
                if (mDatabase.FillObject(lAttinst, drAttinst))
                {
                    lResultList.Add(lAttinst);
                }
            }
            return lResultList;
        }

        public bool SaveAttinst(ATTINST pAttinst)
        {
            try
            {
                if (pAttinst.Internalnr == 0)
                {
                    pAttinst.Internalnr = getnewAttinstInternalnr();
                }
                if (WriteActions.SaveObject(pAttinst) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        private int getnewAttinstInternalnr()
        {
            StringBuilder lsb = new StringBuilder("SELECT MAX(Internalnr) FROM ATTINST   ");
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            int ret = 0;
            if (tbl.Rows.Count > 0)
            {
                if (tbl.Rows[0][0] != DBNull.Value)
                {
                    int.TryParse(tbl.Rows[0][0].ToString(), out ret);
                }
            }
            return ret + 1;
        }
        public bool DeleteAttinst(ATTINST pAttinst)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAttinst);
            String[] DeleteParams = new String[] { "Farmid", "Internalnr" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAttinst, DeleteParams);

            try
            {
                //if (pAttinst.Farmid > 0 && pAttinst.Internalnr > 0)
                //{
                //    return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                //}
                //return false;
                return mDatabase.ModifyObject(mToken, pAttinst, mDatabase.CreateDeleteCommandText(pAttinst, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<ATTCUST> getAttcustinstellingen(int pFarmid, int pInternalnr)
        {
            StringBuilder lsb = new StringBuilder("SELECT ATTCUST.* FROM ATTCUST   ");
            lsb.AppendFormat("WHERE ATTCUST.farmid = {0} AND ATTCUST.AttInstNr = {1} ", pFarmid, pInternalnr);


            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<ATTCUST> lResultList = new List<ATTCUST>();
            foreach (DataRow drAttinst in tbl.Rows)
            {
                ATTCUST lAttinst = new ATTCUST();
                if (mDatabase.FillObject(lAttinst, drAttinst))
                {
                    lResultList.Add(lAttinst);
                }
            }
            return lResultList;
        }

        public bool SaveAttcust(ATTCUST pAttcust)
        {
            try
            {
                if (pAttcust.farmid > 0 && pAttcust.AttInstNr > 0)
                {
                    if (pAttcust.ACnr == 0)
                    {
                        pAttcust.ACnr = getnewAttcustACnr(pAttcust);
                    }
                }
                if (pAttcust.farmid > 0 && pAttcust.AttInstNr > 0 && pAttcust.ACnr > 0)
                {
                    if (WriteActions.SaveObject(pAttcust) < 0) return false;
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        private int getnewAttcustACnr(ATTCUST pAttcust)
        {
            StringBuilder lsb = new StringBuilder("SELECT MAX(ACnr) FROM ATTCUST   ");
            lsb.AppendFormat("WHERE ATTCUST.farmid = {0} AND ATTCUST.AttInstNr = {1} ", pAttcust.farmid, pAttcust.AttInstNr);
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            int ret = 0;
            if (tbl.Rows.Count > 0)
            {
                if (tbl.Rows[0][0] != DBNull.Value)
                {
                    int.TryParse(tbl.Rows[0][0].ToString(), out ret);
                }
            }
            return ret + 1;
        }
        public bool DeleteAttcust(ATTCUST pAttcust)
        {


            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAttcust);
            String[] DeleteParams = new String[] { "farmid", "AttInstNr", "ACnr" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAttcust, DeleteParams);

            try
            {
                //if (pAttcust.ACnr > 0 && pAttcust.AttInstNr > 0 && pAttcust.farmid > 0)
                //{
                //    return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                //}
                //return false;

                return mDatabase.ModifyObject(mToken, pAttcust, mDatabase.CreateDeleteCommandText(pAttcust, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        #endregion

        public DataTable getAnimalActivities(int pAniId)
        {
            DataTable tbl = new DataTable();
            if (pAniId > 0)
            {
                StringBuilder lquerry = new StringBuilder();
                lquerry.Append(" SELECT a.AniId,a.AniIdFather,a.AniIdMother,a.AniSex ");
                lquerry.Append(" ,ac.* ");
                lquerry.Append(" ,mov.MovId,mov.MovKind,mov.Movdate ");
                lquerry.Append(" ,e.EventId,e.EveKind,e.Evedate ");
                lquerry.Append(" ,m.AniId AS MoederVan,m.AniLifenumber AS mAniLifenumber ");
                lquerry.Append(" ,f.AniID AS VaderVan,f.AniLifenumber AS fAniLifenumber  ");
                lquerry.Append(" ,mlog.Report,mlog.Returnresult ");
                lquerry.Append(" ,mut.CodeMutation ");
                lquerry.Append(" FROM ANIMAL a ");
                lquerry.Append(" LEFT JOIN ANIMALCATEGORY ac ON ac.AniId=a.AniId  AND ac.FarmId>0 ");
                lquerry.Append(" LEFT JOIN MOVEMENT mov ON mov.AniId=a.AniId  AND mov.MovId>0 ");
                lquerry.Append(" LEFT JOIN EVENT e ON e.AniId=a.AniId AND e.EventId>0 ");
                lquerry.Append(" LEFT JOIN ANIMAL m ON m.AniIdMother=a.AniId AND m.AniId>0 ");
                lquerry.Append(" LEFT JOIN ANIMAL f ON f.AniIdFather=a.AniId AND f.AniId>0 ");
                lquerry.Append(" LEFT JOIN MUTALOG mlog ON mlog.Lifenumber = a.anialternatenumber  ");
                lquerry.Append(" LEFT JOIN MUTATION mut ON mut.Lifenumber = a.anialternatenumber  ");
                lquerry.AppendFormat(" WHERE a.AniId={0} ", pAniId);
                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lquerry, "", MissingSchemaAction.Add);
            }
            return tbl;
        }

        public DataTable GetAnimalForDierkaart(int pFarmId, int pAniId)
        {
            StringBuilder sqlwnr = new StringBuilder();
            sqlwnr.Append("SELECT ANIMAL.AniId,ANIMAL.AniName,ANIMAL.AniLifeNumber, ANIMAL.AniSex, ANIMAL.AniAlternateNumber, ANIMAL.AniBirthDate, ANIMALCATEGORY.AniworkNumber, ANIMALCATEGORY.Anicategory FROM ANIMAL "
                        + " INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId "
                        + " WHERE ANIMALCATEGORY.FarmId=" + pFarmId.ToString()
                        + " AND ANIMAL.AniId=" + pAniId.ToString());
            DataTable tbl = new DataTable();
            try
            {
                if (pFarmId > 0 && pAniId > 0)
                {
                    tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sqlwnr);
                }
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }
            return tbl;
        }

        public DataRow getDierKaartWorpGegevens(int pFarmId, int pEventId)
        {

            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT EVENT.*,BIRTH.* ,");
            bld.Append(" ANIMAL.AniBirthDate,ANIMAL.AniName, ANIMAL.AniSex,ANIMAL.AniAlternateNumber,ANIMAL.AniLifeNumber,ANIMALCATEGORY.AniWorknumber ");
            bld.Append(", papa.AniLifeNumber as VaderAniLifeNumber ,agrofactuur.THIRD.ThrCompanyName  FROM EVENT ");
            bld.Append(" LEFT OUTER JOIN BIRTH ON BIRTH.EventId = EVENT.EventId ");
            bld.Append(" LEFT OUTER JOIN ANIMAL ON ANIMAL.AniId = BIRTH.CalfId ");
            bld.Append(" LEFT OUTER JOIN ANIMAL papa ON papa.AniId = BIRTH.AniFatherID ");
            bld.Append(" LEFT OUTER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.AniId = BIRTH.CalfId ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= EVENT.ThirdId ");
            bld.AppendFormat("  WHERE EVENT.EventId={0} ", pEventId);
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "worpgegevens", MissingSchemaAction.Add);
            //DataTable tbl = lMstb.GetDataBase().QueryData(pUr.getLastChildConnection(), bld);
            if (tbl.Rows.Count > 0)
            {
                return tbl.Rows[0];
            }
            return null;
        }

        public DataRow getDierKaartInseminGegevens(int pFarmId, int pEventId)
        {
            //
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT EVENT.*,INSEMIN.* ,  "); //(INSEMIN.AniIdFather)zet  papa.AniId niet als AniId anders is dit ambiguous met EVENT.AniId
            bld.Append(" papa.AniName, papa.AniAlternateNumber,papa.AniLifeNumber,papa.BullAiNumber,papa.BullITBNumber,ANIMALCATEGORY.AniWorknumber ,ANIMALCATEGORY.FarmId ,agrofactuur.THIRD.ThrCompanyName  ");
            bld.Append(" FROM EVENT ");
            bld.Append(" LEFT OUTER JOIN INSEMIN ON INSEMIN.EventId = EVENT.EventId ");
            bld.Append(" LEFT OUTER JOIN ANIMAL papa ON papa.AniId = INSEMIN.AniIdFather ");
            bld.Append(" LEFT OUTER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.AniId = papa.AniId ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= EVENT.ThirdId ");
            bld.AppendFormat("  WHERE EVENT.EventId={0} ", pEventId);
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "insemingegevens", MissingSchemaAction.Add);
            //DataTable tbl = lMstb.GetDataBase().QueryData(pUr.getLastChildConnection(), bld);
            if (tbl.Rows.Count > 0)
            {
                DataRow[] foundrows = tbl.Select("FarmId=" + pFarmId.ToString());
                if (foundrows.Count() > 0)//hoeft vaderdier niet in animalcategory te hebben
                {
                    return foundrows[0];
                }
                else
                {
                    return tbl.Rows[0];
                }
            }
            return null;
        }

        public DataRow getDierKaartGrztogthGegevens(int pFarmId, int pEventId)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT EVENT.*,GRZTOGTH.* ,  "); //(INSEMIN.AniIdFather)zet  papa.AniId niet als AniId anders is dit ambiguous met EVENT.AniId
            bld.Append(" papa.AniName, papa.AniAlternateNumber,papa.AniLifeNumber,papa.BullAiNumber,ANIMALCATEGORY.AniWorknumber ,ANIMALCATEGORY.FarmId ,agrofactuur.THIRD.ThrCompanyName ");
            bld.Append(" FROM EVENT ");
            bld.Append(" LEFT OUTER JOIN GRZTOGTH ON GRZTOGTH.EventId = EVENT.EventId ");
            bld.Append(" LEFT OUTER JOIN ANIMAL papa ON papa.AniId = GRZTOGTH.AniIdFather ");
            bld.Append(" LEFT OUTER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.AniId = papa.AniId ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= EVENT.ThirdId ");
            bld.AppendFormat("  WHERE EVENT.EventId={0} ", pEventId);
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "Grztogthgegevens", MissingSchemaAction.Add);
            //DataTable tbl = lMstb.GetDataBase().QueryData(pUr.getLastChildConnection(), bld);
            if (tbl.Rows.Count > 0)
            {
                DataRow[] foundrows = tbl.Select("FarmId=" + pFarmId.ToString());
                if (foundrows.Count() > 0)//hoeft vaderdier niet in animalcategory te hebben
                {
                    return foundrows[0];
                }
                else
                {
                    return tbl.Rows[0];
                }
            }
            return null;
        }

        public DataRow getDierKaartTreatMenGegevens(int pEventId)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT EVENT.*,TREATMEN.* ,agrofactuur.MEDICINE.*,agrofactuur.ARTIKEL.*,MEDPLANM.*,MEDPLAND.* ,agrofactuur.THIRD.ThrCompanyName  ");
            bld.Append(" FROM EVENT ");
            bld.Append(" LEFT OUTER JOIN TREATMEN ON TREATMEN.EventId=EVENT.EventId ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.MEDICINE ON agrofactuur.MEDICINE.MedId = TREATMEN.MedId ");//TODO deze regel kan weg als er alleen met de artikeltabel wordt gewerkt 
            bld.Append(" LEFT OUTER JOIN agrofactuur.ARTIKEL ON ARTIKEL.ArtId = TREATMEN.MedId ");
            bld.Append(" LEFT OUTER JOIN MEDPLANM ON MEDPLANM.Internalnr = TREATMEN.TreMedPlannr ");
            bld.Append(" LEFT OUTER JOIN MEDPLAND ON MEDPLAND.Internalnr = MEDPLANM.Internalnr ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= EVENT.ThirdId ");
            bld.AppendFormat("  WHERE EVENT.EventId={0} ", pEventId);
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "DierKaartTreatMenGegevens", MissingSchemaAction.Add);
            if (tbl.Rows.Count > 0)
            {
                return tbl.Rows[0];
            }
            return null;
        }

        public DataTable getAnimalTreatMenGegevens(int pAniId)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT EVENT.*,TREATMEN.* ,agrofactuur.MEDICINE.*,agrofactuur.ARTIKEL.*,MEDPLANM.*,MEDPLAND.* ,agrofactuur.THIRD.ThrCompanyName  ");
            bld.Append(" FROM EVENT ");
            bld.Append(" LEFT OUTER JOIN TREATMEN ON TREATMEN.EventId=EVENT.EventId ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.MEDICINE ON agrofactuur.MEDICINE.MedId = TREATMEN.MedId ");//TODO deze regel kan weg als er alleen met de artikeltabel wordt gewerkt 
            bld.Append(" LEFT OUTER JOIN agrofactuur.ARTIKEL ON ARTIKEL.ArtId = TREATMEN.MedId ");
            bld.Append(" LEFT OUTER JOIN MEDPLANM ON MEDPLANM.Internalnr = TREATMEN.TreMedPlannr ");
            bld.Append(" LEFT OUTER JOIN MEDPLAND ON MEDPLAND.Internalnr = MEDPLANM.Internalnr ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= EVENT.ThirdId ");
            bld.AppendFormat("  WHERE EVENT.AniId={0} AND EVENT.EventId>0 AND EVENT.EveKind=6  ORDER BY EveDate DESC ", pAniId);
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "AnimalTreatMenGegevens", MissingSchemaAction.Add);
            if (tbl.Rows.Count > 0)
            {
                return tbl;
            }
            return null;
        }

        public void getQkoortsBehandelplannummers(int pFarmID, out List<int> pQKoortsplannnenEen, out List<int> pQKoortsplannnenTwee, out List<int> pQKoortsmedicijnen)
        {
            pQKoortsplannnenEen = new List<int>();
            pQKoortsplannnenTwee = new List<int>();
            pQKoortsmedicijnen = new List<int>();
            List<int> ltemp = new List<int>();
            StringBuilder bld = new StringBuilder();
            bld.AppendLine(" SELECT  fc.FarmID AS FarmID,b.UBNid,  b.ProgramID, FKey,FValue FROM agrofactuur.FARMCONFIG fc  ");
            bld.AppendLine(" JOIN agrofactuur.BEDRIJF b ON b.FarmId=fc.FarmId ");
            bld.AppendFormat(" WHERE fc.FKey IN ('Qkoortsplan1','Qkoortsplan2','medicijnQkoorts') AND b.ProgId=(SELECT agrofactuur.BEDRIJF.ProgID FROM agrofactuur.BEDRIJF WHERE agrofactuur.BEDRIJF.FarmId={0}) ", pFarmID);
            bld.AppendLine(" UNION ");
            bld.AppendLine(" SELECT 0 AS FarmID,0 AS UBNid, pc.ProgramID AS ProgramID, FKey,FValue  FROM agrofactuur.PROGRAMCONFIG pc ");
            bld.AppendLine(" WHERE pc.FKey IN ('Qkoortsplan1','Qkoortsplan2','medicijnQkoorts') AND pc.programid IN ");
            bld.AppendLine(" ( ");
            bld.AppendFormat(" SELECT DISTINCT ProgramId FROM agrofactuur.BEDRIJF WHERE agrofactuur.BEDRIJF.ProgId=(SELECT agrofactuur.BEDRIJF.ProgID FROM agrofactuur.BEDRIJF WHERE agrofactuur.BEDRIJF.FarmId={0}) ", pFarmID);
            bld.AppendLine(" )");
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "getQkoortsBehandelplannummers", MissingSchemaAction.Add);
            char[] spl = { ';' };
            foreach (DataRow rw in tbl.Rows)
            {
                if (rw["FValue"] != DBNull.Value && !String.IsNullOrEmpty(rw["FValue"].ToString()))
                {
                    string[] plans = rw["FValue"].ToString().Split(spl);
                    if (rw["FKey"].ToString() == "Qkoortsplan1")
                    {

                        foreach (string pl in plans)
                        {
                            int locQkoortsplan = 0;
                            int.TryParse(pl, out locQkoortsplan);
                            if (locQkoortsplan > 0)
                            {
                                if (!pQKoortsplannnenEen.Contains(locQkoortsplan))
                                {
                                    pQKoortsplannnenEen.Add(locQkoortsplan);
                                }
                                if (rw["UBNid"].ToString() == "0")
                                {
                                    if (!ltemp.Contains(locQkoortsplan))
                                    {
                                        ltemp.Add(locQkoortsplan);
                                    }
                                }
                            }
                        }
                    }
                    else if (rw["FKey"].ToString() == "Qkoortsplan2")
                    {
                        foreach (string pl in plans)
                        {
                            int locQkoortsplan = 0;
                            int.TryParse(pl, out locQkoortsplan);
                            if (locQkoortsplan > 0)
                            {
                                if (!pQKoortsplannnenTwee.Contains(locQkoortsplan))
                                {
                                    pQKoortsplannnenTwee.Add(locQkoortsplan);
                                }
                                if (rw["UBNid"].ToString() == "0")
                                {
                                    if (!ltemp.Contains(locQkoortsplan))
                                    {
                                        ltemp.Add(locQkoortsplan);
                                    }
                                }
                            }
                        }

                    }
                    else if (rw["FKey"].ToString() == "medicijnQkoorts")
                    {
                        foreach (string pl in plans)
                        {
                            int locQkoortsmed = 0;
                            int.TryParse(pl, out locQkoortsmed);
                            if (locQkoortsmed > 0)
                            {
                                if (!pQKoortsmedicijnen.Contains(locQkoortsmed))
                                {
                                    pQKoortsmedicijnen.Add(locQkoortsmed);
                                }
                            }
                        }
                    }
                }
            }
            if (ltemp.Count() > 0)
            {
                bld = new StringBuilder();
                bld.AppendLine(" SELECT DISTINCT(d.MedId) FROM MEDPLANM m ");
                bld.AppendLine(" JOIN MEDPLAND d ON d.Internalnr = m.Internalnr ");
                bld.AppendLine(" WHERE m.Internalnr IN (" + EnumerableToCommaSeperatedString(ltemp) + ")  ");

                DataSet ds2 = new DataSet();
                DataTable tbl2 = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "getQkoortsBehandelplannummers2", MissingSchemaAction.Add);
                foreach (DataRow rw in tbl2.Rows)
                {
                    int l = 0;
                    int.TryParse(rw[0].ToString(), out l);
                    if (l > 0)
                    {
                        if (!pQKoortsmedicijnen.Contains(l))
                        {
                            pQKoortsmedicijnen.Add(l);
                        }
                    }
                }
            }
        }

        public DataRow getDierKaartDiseaseGegevens(int pEventId)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT EVENT.*,DISEASE.* , agrofactuur.THIRD.ThrCompanyName  ");
            bld.Append(" FROM EVENT ");
            bld.Append(" LEFT OUTER JOIN DISEASE ON DISEASE.EventId=EVENT.EventId ");
            bld.Append(" LEFT OUTER JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= EVENT.ThirdId ");
            bld.AppendFormat("  WHERE EVENT.EventId={0} ", pEventId);
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "DiseaseGegevens", MissingSchemaAction.Add);
            if (tbl.Rows.Count > 0)
            {
                return tbl.Rows[0];
            }
            return null;
        }

        public List<ANIMAL> GetCurrentAnimalsForFarmNietOmgenummerd(int pFarmId)
        {
            StringBuilder lsb = new StringBuilder("SELECT ANIMAL.* FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lsb.AppendFormat("WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lsb.Append("AND ANIMALCATEGORY.AniCategory IN (1,2,3) ");
            lsb.Append("AND ANIMAL.aniId NOT IN (SELECT LEVNRMUT.AniID FROM LEVNRMUT) ORDER BY SUBSTRING(AniLifeNumber FROM 9 ) ");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public List<ANIMAL> GetAnimalsByAniIds(List<int> pAnimalIds)
        {
            List<ANIMAL> lResultList = new List<ANIMAL>();
            if (pAnimalIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder("SELECT ANIMAL.* FROM ANIMAL ");
                lQuery.AppendFormat(" WHERE AniId IN ({0}) ",EnumerableToCommaSeperatedString(pAnimalIds));

                DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow drAnimal in tbl.Rows)
                {
                    ANIMAL lAnimal = new ANIMAL();
                    if (mDatabase.FillObject(lAnimal, drAnimal))
                    {
                        lResultList.Add(lAnimal);
                    }
                }
            }
            return lResultList;
        }

        public DataTable getAnimalsInGroup(int pFarmId, int pGroupnr)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT   a.* , ac.AniworkNumber AS AniworkNumberCat, ac.Anicategory AS AnicategoryCat    FROM ANIMAL a ");
            bld.Append(" LEFT JOIN ANIMALCATEGORY ac ON ac.AniId = a.AniId ");
            bld.Append(" LEFT JOIN MOVEMENT m ON m.AniId = a.AniId ");
            bld.Append(" LEFT JOIN BUYING bu ON bu.MovId=m.MovId ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF b ON b.FarmId=ac.FarmID ");
            bld.Append(" LEFT JOIN agrofactuur.UBN u ON u.UbnId = b.UbnId  ");
            if (pGroupnr > 0)
            {
                bld.AppendFormat(" WHERE m.Groupnr = {0} ", pGroupnr);
            }
            else
            {
                bld.Append(" WHERE (m.Groupnr = 0 OR ISNULL(m.Groupnr)) ");
            }

            bld.AppendFormat(" AND ac.FarmId={0} ", pFarmId);
            bld.Append(" AND m.MovDate =  ");
            bld.Append(" ( ");
            bld.Append(" 	SELECT MAX(MovDate) FROM MOVEMENT  ");
            bld.Append(" 	WHERE  AniId=a.AniId AND UbnID=u.UbnId AND MovKind=1 ");
            bld.Append(" ) ");
            bld.Append(" AND m.MovKind=1 ");

            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "AnimalsIngroupnr", MissingSchemaAction.Add);
            return tbl;
        }

        public bool AlOmgenummerd(int pAniId)
        {
            StringBuilder lsb = new StringBuilder();
            lsb.AppendFormat("SELECT LEVNRMUT.AniID FROM LEVNRMUT WHERE LEVNRMUT.AniID={0} ", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);

            return tbl.Rows.Count > 0;

        }
        public List<ANIMAL> GetNullmetingAnimalsByFarmId(int pFarmid)
        {
            StringBuilder lsb = new StringBuilder("SELECT ANIMAL.* FROM ANIMAL INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId WHERE ANIMALCATEGORY.FarmId=" + pFarmid.ToString() + " AND ANIMALCATEGORY.Anicategory IN (1,2,3) ");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public List<ANIMAL> GetPosibleMothers(int pFarmId, DateTime pBirthDay, int pProgId)
        {
            return GetPosibleMothers(pFarmId, pBirthDay, 0, pProgId);
        }

        public List<ANIMAL> GetPosibleMothers(int pFarmId, DateTime pBirthDay, int pCurrentMother, int pProgId)
        {
            List<ANIMAL> lResultList = new List<ANIMAL>();
            try
            {
                BEDRIJF be = GetBedrijfById(pFarmId);
                if (pBirthDay.CompareTo(DateTime.MinValue) <= 0)
                {
                    pBirthDay = DateTime.Now;
                }
                //DateTime maxdatum = pBirthDay.AddDays(-270);
                //if (be.ProgId == 3)
                //{
                //    maxdatum = pBirthDay.AddDays(-133);
                //}
                //else if (be.ProgId == 5)
                //{
                //    maxdatum = pBirthDay.AddDays(-140);
                //}
                //DateTime mindate = maxdatum.AddYears(-10);
                StringBuilder pQuery = new StringBuilder();
                List<int> dierenaanwezig = rdAanwezigeDieren(be.FarmId, be.UBNid, pBirthDay, 0, 0, be.ProgId);

                if (pCurrentMother > 0)
                {
                    pQuery.Append(" SELECT ANIMAL.AniId,ANIMAL.AniAlternateNumber, ANIMAL.AniLifeNumber, ANIMAL.AniName, ANIMALCATEGORY.AniWorknumber, ANIMAL.AniBirthDate ");
                    pQuery.Append("FROM ANIMAL ");
                    pQuery.Append("INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId = ANIMALCATEGORY.AniId ");
                    pQuery.AppendFormat("WHERE ANIMAL.AniId = {0} ", pCurrentMother);
                    pQuery.Append("UNION ");
                }
                if (dierenaanwezig.Count() > 0)
                {
                    pQuery.Append(" SELECT ANIMAL.AniId,ANIMAL.AniAlternateNumber, ANIMAL.AniLifeNumber, ANIMAL.AniName, ANIMALCATEGORY.AniWorknumber, ANIMAL.AniBirthDate ");
                    pQuery.Append(" FROM ANIMAL ");
                    pQuery.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId = ANIMALCATEGORY.AniId ");
                    pQuery.Append(" WHERE ANIMALCATEGORY.FarmId = " + be.FarmId.ToString() + " AND ANIMAL.AniSex = 2 ");
                    pQuery.Append(" AND ANIMALCATEGORY.AniId IN (" + intListToString(dierenaanwezig) + ")   ");
                    //pQuery.Append(" AND  date_format(ANIMAL.Anibirthdate,'%Y-%m-%d %T')<'" + this.getDatabaseDateFormat(maxdatum) + "' ");
                    //pQuery.Append(" AND  date_format(ANIMAL.Anibirthdate,'%Y-%m-%d %T')>'" + this.getDatabaseDateFormat(mindate) + "' ");
                    DataSet ds = new DataSet();
                    DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, pQuery, "moedertjes", MissingSchemaAction.Add);
                    foreach (DataRow drAnimal in tbl.Rows)
                    {
                        ANIMAL lAnimal = new ANIMAL();
                        if (mDatabase.FillObject(lAnimal, drAnimal))
                        {
                            lResultList.Add(lAnimal);
                        }
                    }
                    /*
                        DgnEersteInsemSchaap = 180;
                        DgnEersteInsemRund = 450;
                        DgnEersteInsemGeit = 120;
                        Draagtijdrund = 280;// +- 9 maanden                   460  minus correctie van 50 zullen we maar doen
                        DraagtijdSchaap = 143;// +- 4 maanden 2 weken + 180 = 320
                        DraagtijdGeit = 150;// +- 5 maanden   +120 =          270 
                     */
                    int adddays = 0;
                    if (pBirthDay > DateTime.MinValue.AddYears(100))
                    {
                        if (pProgId == 3)
                        {
                            adddays = -270;
                        }
                        else if (pProgId == 5)
                        {
                            adddays = -220;
                        }
                        else if (pProgId < 25)
                        {
                            adddays = -410;
                        }

                        var leeftijdsfilter = from n in lResultList
                                              where n.AniBirthDate <= pBirthDay.AddDays(adddays)
                                              select n;
                        if (pCurrentMother > 0)
                        {
                            leeftijdsfilter = from n in lResultList
                                              where n.AniBirthDate <= pBirthDay.AddDays(adddays)
                                              && n.AniId == pCurrentMother
                                              select n;
                        }
                        lResultList = leeftijdsfilter.ToList();
                    }

                }
            }
            catch (Exception exc)
            {
                unLogger.WriteDebug("GetPosibleMothers MysqlsavetoDB : " + exc.Message);
            }

            return lResultList;
        }


        public List<ANIMAL> GetCurrentAnimalsByFarmIdAndSex(int pFarmId, int pSex)
        {
            StringBuilder lsb = new StringBuilder("SELECT a.* FROM ANIMAL a INNER JOIN ANIMALCATEGORY ac ON a.AniId=ac.AniId ");
            lsb.AppendFormat("WHERE ac.FarmId = {0} ", pFarmId);
            lsb.Append("AND  ((ac.AniCategory IN (1,2,3))  OR (ac.Ani_Mede_Eigenaar=1) ) ");
            lsb.AppendFormat("AND a.AniSex = {0}", pSex);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public List<ANIMAL> getAnimalsByFokker(int pFokkerThrId)
        {
            StringBuilder lsb = new StringBuilder("SELECT a.* FROM ANIMAL a  ");
            lsb.AppendFormat("WHERE a.ThrId = {0} ", pFokkerThrId);

            lsb.Append("AND a.AniId > 0 ");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<ANIMAL> lResultList = new List<ANIMAL>();
            foreach (DataRow drAnimal in tbl.Rows)
            {
                ANIMAL lAnimal = new ANIMAL();
                if (mDatabase.FillObject(lAnimal, drAnimal))
                {
                    lResultList.Add(lAnimal);
                }
            }
            return lResultList;
        }

        public ANIMAL GetAnimalById(int pAnimalId)
        {
            var a = Animal.GetAnimalById(pAnimalId);
            if (a == null) { a = new ANIMAL(); }
            return a;
        }

        public ANIMAL GetAnimalById(int pAnimalId, int pProgID)
        {
            ANIMAL lAnimal = new ANIMAL();
            StringBuilder lQuery = new StringBuilder();
            if (pProgID > 0)
            {
                string db = "";
                if (pProgID == 3)
                { db = "agrobase_sheep."; }
                else if (pProgID == 5)
                { db = "agrobase_goat."; }
                lQuery.Append(" SELECT " + db + "ANIMAL.* FROM " + db + "ANIMAL");
                lQuery.AppendFormat(" WHERE AniId = {0}", pAnimalId);
            }
            else
            {
                lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL");
                lQuery.AppendFormat(" WHERE AniId = {0}", pAnimalId);
            }
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnimal, lQuery);
            return lAnimal;
        }
        public ANIMAL_SHARE_INFO GetAnimalShareInfo(int pAniId)
        {
            ANIMAL_SHARE_INFO lAnimalSI = new ANIMAL_SHARE_INFO();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMAL_SHARE_INFO.* FROM ANIMAL_SHARE_INFO ");
            lQuery.AppendFormat(" WHERE AniID = {0} ", pAniId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnimalSI, lQuery);
            return lAnimalSI;
        }
        public void getAnimalAndCategory(int pAniId, int pFarmId, out ANIMAL pAnimal, out ANIMALCATEGORY pAniCategory)
        {
            pAnimal = new ANIMAL();
            pAniCategory = new ANIMALCATEGORY();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.*, ");
            lQuery.Append(" ac.Ani_Mede_Eigenaar AS acAni_Mede_Eigenaar,");
            lQuery.Append(" ac.Anicategory AS acAnicategory,");
            lQuery.Append(" ac.AniComment AS acAniComment,");
            lQuery.Append(" ac.AniId AS acAniId,");
            lQuery.Append(" ac.AniMinasCategory AS acAniMinasCategory,");
            lQuery.Append(" ac.AniWorknumber AS acAniWorknumber,");
            lQuery.Append(" ac.FarmId AS acFarmId ");
            lQuery.Append(" FROM ANIMALCATEGORY ac ");
            lQuery.Append(" LEFT OUTER JOIN  ANIMAL a ON a.AniId = ac.AniId ");
            lQuery.AppendFormat(" WHERE ac.AniId={0} AND ac.FarmId={1} ", pAniId, pFarmId);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (tbl.Rows.Count > 0)
            {
                mDatabase.FillObject(pAnimal, tbl.Rows[0]);
                if (tbl.Rows[0]["acAniId"] != DBNull.Value && tbl.Rows[0]["acFarmId"] != DBNull.Value)
                {
                    mDatabase.FillObject(pAniCategory, tbl.Rows[0]);//alleen maar voor isfilledBy =db
                    pAniCategory.AniId = int.Parse(tbl.Rows[0]["acAniId"].ToString());
                    pAniCategory.FarmId = int.Parse(tbl.Rows[0]["acFarmId"].ToString());
                    if (tbl.Rows[0]["acAniWorknumber"] != DBNull.Value)
                    {
                        pAniCategory.AniWorknumber = tbl.Rows[0]["acAniWorknumber"].ToString();
                    }
                    if (tbl.Rows[0]["acAniMinasCategory"] != DBNull.Value)
                    {
                        pAniCategory.AniMinasCategory = int.Parse(tbl.Rows[0]["acAniMinasCategory"].ToString());
                    }
                    if (tbl.Rows[0]["acAniComment"] != DBNull.Value)
                    {
                        pAniCategory.AniComment = tbl.Rows[0]["acAniComment"].ToString();
                    }
                    if (tbl.Rows[0]["acAnicategory"] != DBNull.Value)
                    {
                        pAniCategory.Anicategory = int.Parse(tbl.Rows[0]["acAnicategory"].ToString());
                    }
                    if (tbl.Rows[0]["acAni_Mede_Eigenaar"] != DBNull.Value)
                    {
                        pAniCategory.Ani_Mede_Eigenaar = Convert.ToSByte(tbl.Rows[0]["acAni_Mede_Eigenaar"].ToString());
                    }
                }
            }


        }
        public ANIMAL getAnimalByBullAiNumber(String pBullAiNumber)
        {
            ANIMAL lAnimal = new ANIMAL();
            if (pBullAiNumber != String.Empty)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL");
                lQuery.AppendFormat(" WHERE BullAiNumber = '{0}' AND AniId > 0", pBullAiNumber);
                mDatabase.FillObject(mToken.getLastChildConnection(), lAnimal, lQuery);
            }
            return lAnimal;
        }
        public ANIMALCATEGORY GetAnimalCategoryByIdandFarmid(int pAnimalId, int pFarmId)
        {
            ANIMALCATEGORY lAnimalcat = new ANIMALCATEGORY();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMALCATEGORY.* FROM ANIMALCATEGORY");
            lQuery.AppendFormat(" WHERE AniId = {0} and FarmId = {1}", pAnimalId, pFarmId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnimalcat, lQuery);
            return lAnimalcat;

        }

        public ANIMALCATEGORY GetAnimalCategoryByIdandUbnid(int pAnimalId, int pUbnId)
        {
            ANIMALCATEGORY lAnimalcat = new ANIMALCATEGORY();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMALCATEGORY.* ");
            lQuery.Append(" FROM ANIMALCATEGORY ");
 
            lQuery.AppendFormat(" WHERE ANIMALCATEGORY.AniId = {0} and ANIMALCATEGORY.UBNid = {1}", pAnimalId, pUbnId);
            lQuery.Append(" ORDER BY ts DESC");
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnimalcat, lQuery);
            return lAnimalcat;

        }

        public List<ANIMALCATEGORY> GetAnimalCategorysByUbnid(int pUbnId)
        {
            List<ANIMALCATEGORY> lAnimalcats = new List<ANIMALCATEGORY>();

            StringBuilder lQuery = new StringBuilder($@"
                SELECT ac.*

                FROM ANIMALCATEGORY ac
                JOIN agrofactuur.BEDRIJF b ON ac.FarmId = b.FarmId
                WHERE ac.UbnId = {pUbnId} 
                AND b.UbnId > 0
                #AND ac.FarmId > 0 
                AND ac.AniId > 0
                AND ac.AniCategory < 5");
            DataTable tblCats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drAnimalCat in tblCats.Rows)
            {
                ANIMALCATEGORY lAnimalCat = new ANIMALCATEGORY();
                if (mDatabase.FillObject(lAnimalCat, drAnimalCat))
                {
                    lAnimalcats.Add(lAnimalCat);
                }
            }
            return lAnimalcats;
        }

        public List<ANIMALCATEGORY> GetAllAnimalCategorysByUbnid(int pUbnId)
        {
            List<ANIMALCATEGORY> lAnimalcats = new List<ANIMALCATEGORY>();

            StringBuilder lQuery = new StringBuilder($@"
                SELECT ac.*

                FROM ANIMALCATEGORY ac

                JOIN agrofactuur.UBN u ON ac.UBNid = u.UbnId

                WHERE u.UbnId = {pUbnId} 
                #AND ac.FarmId > 0 
                AND ac.AniId > 0");
            DataTable tblCats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drAnimalCat in tblCats.Rows)
            {
                ANIMALCATEGORY lAnimalCat = new ANIMALCATEGORY();
                if (mDatabase.FillObject(lAnimalCat, drAnimalCat))
                {
                    lAnimalcats.Add(lAnimalCat);
                }
            }
            return lAnimalcats;
        }

        public IEnumerable<ANIMALCATEGORY> GetAnimalCategoriesByIdandUbnid(int animalId, int ubnId)
        {

            string sql = string.Format(
                    @"SELECT ac.*
                        FROM ANIMALCATEGORY ac
                        
                        WHERE ac.AniId = {0} 
                        AND   ac.UBNid = {1}", animalId, ubnId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(sql));
            return getList<ANIMALCATEGORY>(tbl);
        }


        public List<ANIMALCATEGORY> GetAnimalCategoryById(int pAnimalId)
        {
            List<ANIMALCATEGORY> lAnimalcats = new List<ANIMALCATEGORY>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMALCATEGORY.* FROM ANIMALCATEGORY");
            lQuery.AppendFormat(" WHERE AniId = {0}", pAnimalId);

            DataTable tblCats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drAnimalCat in tblCats.Rows)
            {
                ANIMALCATEGORY lAnimalCat = new ANIMALCATEGORY();
                if (mDatabase.FillObject(lAnimalCat, drAnimalCat))
                {
                    lAnimalcats.Add(lAnimalCat);
                }
            }
            return lAnimalcats;
        }

        //Voor gebruik van overkoepelende inlogs over diersoorten heen
        public List<ANIMALCATEGORY> GetAnimalCategoryByIdProgId(int pAnimalId, int pProgId)
        {
            List<ANIMALCATEGORY> lAnimalcats = new List<ANIMALCATEGORY>();
            string db = getDbPrefix(pProgId);
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMALCATEGORY.* FROM " + db + "ANIMALCATEGORY");
            lQuery.AppendFormat(" WHERE AniId = {0}", pAnimalId);

            DataTable tblCats = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drAnimalCat in tblCats.Rows)
            {
                ANIMALCATEGORY lAnimalCat = new ANIMALCATEGORY();
                if (mDatabase.FillObject(lAnimalCat, drAnimalCat))
                {
                    lAnimalcats.Add(lAnimalCat);
                }
            }
            return lAnimalcats;
        }

        public List<ANIMALCATEGORY> GetAnimalCategoryByFarmId(int pFarmId)
        {
            List<ANIMALCATEGORY> lAnimalcats = new List<ANIMALCATEGORY>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMALCATEGORY.* FROM ANIMALCATEGORY");
            lQuery.AppendFormat(" WHERE FarmId = {0} LIMIT 15000  ", pFarmId);

            DataTable tblCats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drAnimalCat in tblCats.Rows)
            {
                ANIMALCATEGORY lAnimalCat = new ANIMALCATEGORY();
                if (mDatabase.FillObject(lAnimalCat, drAnimalCat))
                {
                    lAnimalcats.Add(lAnimalCat);
                }
            }
            return lAnimalcats;


        }
        public List<ANIMALCATEGORY> GetBullsCategoryByFarmId(int pFarmId)
        {
            List<ANIMALCATEGORY> lAnimalcats = new List<ANIMALCATEGORY>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ac.* FROM ANIMALCATEGORY ac");
            lQuery.Append("  JOIN ANIMAL a ON a.AniId=ac.AniId ");
            lQuery.AppendFormat(" WHERE ac.FarmId = {0}  AND a.AniSex=1 AND ac.AniCategory IN (1,2,3,4) LIMIT 5000 ", pFarmId);

            DataTable tblCats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drAnimalCat in tblCats.Rows)
            {
                ANIMALCATEGORY lAnimalCat = new ANIMALCATEGORY();
                if (mDatabase.FillObject(lAnimalCat, drAnimalCat))
                {
                    lAnimalcats.Add(lAnimalCat);
                }
            }
            return lAnimalcats;


        }
        public ANIMAL GetAnimalByLifenr(String pAniLifeNumber)
        {
            //todo move naar dbsq animal, hier dan een doorwijzing doen via return Animal.GetAnimalByLifenr
            //is deze logging nog nodig?

            ANIMAL lAnimal = new ANIMAL();
            //geen query doen bij lege parameter
            //ZOEKen met voorloopnullen en zonder voorloopnullen: vraag NICO
            //Opslaan Zonder Voorloopnullen zie Alleen SaveAnimal(insert) !! Niet bij UpdateAnimal
            //27-9-2012 uitgebreid met LEVNRMUT ivm met vinden van omgenummerde dieren
            if (!String.IsNullOrEmpty(pAniLifeNumber))
            {
                pAniLifeNumber = pAniLifeNumber.Trim();
                string sSearchnr = GetSearchNumbers(pAniLifeNumber);
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL ");
                lQuery.AppendFormat(" WHERE  ANIMAL.AniLifeNumber IN ({0}) ", sSearchnr);
                lQuery.Append(" AND ANIMAL.AniId>0 ");
                lQuery.Append(" UNION ");
                lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL ");
                lQuery.Append(" JOIN LEVNRMUT ON ANIMAL.AniId = LEVNRMUT.Aniid  ");
                lQuery.AppendFormat(" WHERE LEVNRMUT.LevnrOud IN ({0}) AND LEVNRMUT.Aniid >0 ", sSearchnr);
                DataSet ds = new DataSet();
                DataTable tblanimal = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "animal", MissingSchemaAction.Add);
                if (tblanimal.Rows.Count > 0)
                {
                    mDatabase.FillObject(lAnimal, tblanimal.Rows[0]);
                }
                //mDatabase.FillObject(mToken.getLastChildConnection(), lAnimal, lQuery);
            }
            else
            {
                unLogger.WriteError("GetAnimalByLifenr zonder levensnummer aangeroepen!");
            }
            return lAnimal;
        }

        /// <summary>
        /// Ophalen dier op levensnummer
        /// </summary>
        /// <param name="pAniAlternateNumber"></param>
        /// <returns>Een ANIMAL object met het dier, indien het dier niet gevonden kan worden is het ANIMAL object leeg.</returns>
        public ANIMAL GetAnimalByAniAlternateNumber(String pAniAlternateNumber)
        {
            ANIMAL lAnimal = new ANIMAL();
            //geen query doen bij lege parameter
            //ZOEKen met voorloopnullen en zonder voorloopnullen: vraag NICO



            //27-9-2012 uitgebreid met LEVNRMUT ivm met vinden van omgenummerde dieren



            //ML 12-1-2017 zorgen dat als hij meerdere dieren vind hij het laagste AniId pakt

            //ML 28-7-2017 Indien het zoeknummer begint met XD, mag de LEVNRMUT tabel NIET gebruikt worden.
            bool isXDAnimal = pAniAlternateNumber.ToUpperInvariant().StartsWith("XD");

            if (!String.IsNullOrEmpty(pAniAlternateNumber))
            {
                pAniAlternateNumber = pAniAlternateNumber.Trim();
                string sSearchnr = GetSearchNumbers(pAniAlternateNumber);

                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL ");
                lQuery.AppendFormat(" WHERE  ANIMAL.AniAlternateNumber IN ({0})", sSearchnr);
                lQuery.Append(" AND ANIMAL.AniId>0 ");

                if (!isXDAnimal)
                {
                    lQuery.Append(" UNION ");
                    lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL ");
                    lQuery.Append(" JOIN LEVNRMUT ON LEVNRMUT.Aniid=ANIMAL.AniId ");
                    lQuery.AppendFormat(" WHERE LEVNRMUT.LevnrOud IN ({0}) AND LEVNRMUT.Aniid >0 ", sSearchnr);
                }

                lQuery.Append(" ORDER BY AniId ASC");

                DataSet ds = new DataSet();
                DataTable tblanimal = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "animal", MissingSchemaAction.Add);
                if (tblanimal.Rows.Count > 0)
                {
                    if (tblanimal.Rows.Count > 1)
                    {
                        DataRow[] rws = tblanimal.Select("AniAlternateNumber IN  (" + sSearchnr + ") ");
                        if (rws.Count() > 0)
                        {
                            mDatabase.FillObject(lAnimal, rws[0]);
                        }
                        else
                        {
                            mDatabase.FillObject(lAnimal, tblanimal.Rows[0]);
                        }
                    }
                    else
                    {
                        mDatabase.FillObject(lAnimal, tblanimal.Rows[0]);
                    }
                }
                else if (!isXDAnimal)
                {
                    lQuery = new StringBuilder();
                    lQuery.Append(" SELECT LEVNRMUT.* FROM LEVNRMUT ");
                    lQuery.AppendFormat(" WHERE LEVNRMUT.LevnrOud IN ({0}) AND LEVNRMUT.Aniid >0  ", sSearchnr);//AND LEVNRMUT.Aniid >0 hadden we al hierboven
                    ds = new DataSet();
                    tblanimal = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "animal", MissingSchemaAction.Add);
                    if (tblanimal.Rows.Count > 0)
                    {
                        if (tblanimal.Rows[0]["LevnrNieuw"] != DBNull.Value && tblanimal.Rows[0]["LevnrNieuw"].ToString().Trim() != "")
                        {
                            lQuery = new StringBuilder();
                            lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL ");
                            lQuery.AppendFormat(" WHERE ANIMAL.AniAlternateNumber='{0}' AND ANIMAL.AniId>0  ", tblanimal.Rows[0]["LevnrNieuw"].ToString());
                            ds = new DataSet();
                            tblanimal = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "animal", MissingSchemaAction.Add);
                            if (tblanimal.Rows.Count > 0)
                            {
                                mDatabase.FillObject(lAnimal, tblanimal.Rows[0]);
                            }
                        }
                    }
                }
                //mDatabase.FillObject(mToken.getLastChildConnection(), lAnimal, lQuery);

            }
            else
            {
                unLogger.WriteError("GetAnimalByAniAlternateNumber zonder levensnummer aangeroepen!");
            }
            return lAnimal;
        }

        private string getControlegetal(string pAniAlternateNumber)
        {
            if (string.IsNullOrEmpty(pAniAlternateNumber))
            {
                return "";
            }
            int som = 0;
            string getal = "";
            if (pAniAlternateNumber.StartsWith("BE"))
            {
                getal = pAniAlternateNumber.Replace("BE", "").Trim();
                if (getal.Length == 8)
                {
                    long controle = 0;
                    if (long.TryParse(getal, out controle))
                    {

                        som = 3 * int.Parse(getal[0].ToString()) +
                         2 * int.Parse(getal[1].ToString()) +
                        7 * int.Parse(getal[2].ToString()) +
                        6 * int.Parse(getal[3].ToString()) +
                        5 * int.Parse(getal[4].ToString()) +
                        4 * int.Parse(getal[5].ToString()) +
                        3 * int.Parse(getal[6].ToString()) +
                        2 * int.Parse(getal[7].ToString());
                        var result = Math.Abs((som % 11) - 9).ToString();
                        return result;
                    }
                }
            }
            else if (pAniAlternateNumber.StartsWith("LU"))
            {
                getal = pAniAlternateNumber.Replace("LU", "").Trim();
                if (getal.Length == 8)
                {
                    long controle = 0;
                    if (long.TryParse(getal, out controle))
                    {
                        som = 3 * int.Parse(getal[0].ToString()) +
                         2 * int.Parse(getal[1].ToString()) +
                        7 * int.Parse(getal[2].ToString()) +
                        6 * int.Parse(getal[3].ToString()) +
                        5 * int.Parse(getal[4].ToString()) +
                        4 * int.Parse(getal[5].ToString()) +
                        3 * int.Parse(getal[6].ToString()) +
                        2 * int.Parse(getal[7].ToString());
                        var result = Math.Abs((som % 11) - 9).ToString();
                        return result;
                    }
                }
            }
            else if (pAniAlternateNumber.StartsWith("NL"))
            {
                getal = pAniAlternateNumber.Replace("NL", "").Trim();
                if (getal.Length == 8)
                {
                    long controle = 0;
                    if (long.TryParse(getal, out controle))
                    {
                        unLogger.WriteInfo($@"9*{getal[0].ToString()}  + 3*{getal[1].ToString()}+ 1*{getal[2].ToString()}+ 7*{getal[3].ToString()}+ 9*{getal[4].ToString()}+ 3*{getal[5].ToString()}+ 1*{getal[6].ToString()}+ 7*{getal[7].ToString()}");

                        som = (9 * int.Parse(getal[0].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (3 * int.Parse(getal[1].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (1 * int.Parse(getal[2].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (7 * int.Parse(getal[3].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (9 * int.Parse(getal[4].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (3 * int.Parse(getal[5].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (1 * int.Parse(getal[6].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        som = som + (7 * int.Parse(getal[7].ToString()));
                        unLogger.WriteInfo($@"som:{som} ");
                        var result = (som % 10).ToString();
                        unLogger.WriteInfo($@"result:{result} ");
                        return result;
                    }
                }
            }
            return "";
        }

        public ANIMAL GetAnimalByBullITBNumber(String pBullITBNumber)
        {
            ANIMAL lAnimal = new ANIMAL();

            if (!String.IsNullOrEmpty(pBullITBNumber))
            {

                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT ANIMAL.* FROM ANIMAL ");
                lQuery.AppendFormat(" WHERE  ANIMAL.BullITBNumber = '{0}' ", pBullITBNumber);
                lQuery.Append(" AND ANIMAL.AniId>0 ");

                DataSet ds = new DataSet();
                DataTable tblanimal = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "animal", MissingSchemaAction.Add);
                if (tblanimal.Rows.Count > 0)
                {
                    mDatabase.FillObject(lAnimal, tblanimal.Rows[0]);
                }


            }
            else
            {
                unLogger.WriteError("GetAnimalByBullITBNumber zonder  nummer aangeroepen!");
            }
            return lAnimal;
        }
        public ANIMAL GetAnimalByAniAlternateNumber(String pAniAlternateNumber, int pProgID)
        {
            ANIMAL lAnimal = new ANIMAL();
            //geen query doen bij lege parameter
            //ZOEKen met voorloopnullen en zonder voorloopnullen: vraag NICO
            //27-9-2012 uitgebreid met LEVNRMUT ivm met vinden van omgenummerde dieren
            if (pAniAlternateNumber != String.Empty)
            {
                string db = "";
                if (pProgID == 5)
                {
                    db = "agrobase_goat.";
                }
                else if (pProgID == 3)
                {
                    db = "agrobase_sheep.";
                }
                else if (pProgID == 25)
                {
                    db = "agrobase_dog.";
                }
                string sSearchnr = GetSearchNumbers(pAniAlternateNumber);
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT an.* FROM " + db + "ANIMAL an ");
                lQuery.AppendFormat(" WHERE  an.AniAlternateNumber IN ({0})", sSearchnr);
                lQuery.Append(" AND an.AniId>0 ");
                lQuery.Append(" UNION ");
                lQuery.Append(" SELECT ann.* FROM " + db + "ANIMAL ann ");
                lQuery.Append(" JOIN " + db + "LEVNRMUT mut ON mut.Aniid=ann.AniId ");
                lQuery.AppendFormat(" WHERE mut.LevnrOud IN ({0}) AND mut.Aniid >0 ", sSearchnr);
                DataSet ds = new DataSet();

                //DataTable tblanimal = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "animal", MissingSchemaAction.Add);
                //Mark 30-06-2014: Hoeft geen dier specieke DB te zijn, anders zou je geen progId meegeven, daarna bestaat de child connection niet altijd (bv VWA inlog)
                DataTable tblanimal = mDatabase.QueryData(mToken, ds, lQuery, "animal", MissingSchemaAction.Add);
                if (tblanimal.Rows.Count > 0)
                {
                    mDatabase.FillObject(lAnimal, tblanimal.Rows[0]);
                }
                //mDatabase.FillObject(mToken.getLastChildConnection(), lAnimal, lQuery);

            }
            else
            {
                unLogger.WriteError("GetAnimalByAniAlternateNumber zonder levensnummer aangeroepen!");
            }
            return lAnimal;
        }
        public void InsertAnimalError(int pAE_AniID, int pAE_AniID_2)
        {
            try
            {
                StringBuilder bld = new StringBuilder(" INSERT INTO agrologs.ANIMAL_ERROR (AE_AniID, AE_AniID_2 ) ");
                bld.AppendFormat("  VALUES ({0}, {1}) ", pAE_AniID, pAE_AniID_2);
                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = bld.ToString();
                //mDatabase.ExecuteNonQueryCommand(cmd);
                mDatabase.ExecuteNonQuery(mToken, bld.ToString());
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }
        }
        private string GetSearchNumbers(string pAniUniqueLifeNumber)
        {
            StringBuilder searcharry = new StringBuilder();
            searcharry.Append("'" + pAniUniqueLifeNumber + "',");
            char[] spl = { ' ' };
            string[] lNumber = pAniUniqueLifeNumber.Split(spl);
            if (lNumber.Length == 2)
            {
                while (lNumber[1].StartsWith("0"))
                {
                    if (lNumber[1].Length > 2)
                    {
                        lNumber[1] = lNumber[1].Remove(0, 1);
                        searcharry.Append("'" + lNumber[0] + " " + lNumber[1] + "',");
                    }
                    else { break; }
                }
                while (lNumber[1].Length < 15)
                {
                    lNumber[1] = "0" + lNumber[1];
                    searcharry.Append("'" + lNumber[0] + " " + lNumber[1] + "',");
                }

            }
            string sSearchnr = searcharry.ToString().Remove(searcharry.ToString().Length - 1, 1);

            string controlegetal = getControlegetal(pAniUniqueLifeNumber);
            if (!string.IsNullOrEmpty(controlegetal))
            {
                if (pAniUniqueLifeNumber.StartsWith("BE"))
                {
                    string appennumber = "BE " + pAniUniqueLifeNumber.Replace("BE ", controlegetal);
                    sSearchnr = sSearchnr + ",'" + appennumber + "'";
                }
                else if (pAniUniqueLifeNumber.StartsWith("LU"))
                {
                    string appennumber = "LU " + pAniUniqueLifeNumber.Replace("LU ", controlegetal);
                    sSearchnr = sSearchnr + ",'" + appennumber + "'";
                }
                else if (pAniUniqueLifeNumber.StartsWith("NL"))
                {
                    string appennumber = pAniUniqueLifeNumber + controlegetal;
                    sSearchnr = sSearchnr + ",'" + appennumber + "'";
                }
            }
            return sSearchnr;
        }
        public ANIMALPREDIKAAT GetAnimalPredikatenByAniIdAndBegindatum(int pPreAniId, DateTime pPreBegindatum)
        {
            ANIMALPREDIKAAT lAnimalPredikaat = new ANIMALPREDIKAAT();
            StringBuilder lQuery = new StringBuilder("select * from ANIMALPREDIKAAT ");
            lQuery.Append("  where PreAniId = " + pPreAniId.ToString() + " AND  date_format(PreBegindatum,'%Y-%m-%d')='" + pPreBegindatum.ToString("yyyy-MM-dd") + "' ");
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnimalPredikaat, lQuery);
            return lAnimalPredikaat;
        }
        public List<ANIMALPREDIKAAT> GetAnimalPredikatenByAniIdsAndBeginDates(List<int> pPreAniIds, DateTime pPreBegindatum)
        {
            List<ANIMALPREDIKAAT> lAnimalPredikaten = new List<ANIMALPREDIKAAT>();
            if (pPreAniIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder("select * from ANIMALPREDIKAAT ");
                lQuery.Append("  where PreAniId IN (" + intListToString(pPreAniIds) + ") AND  date_format(PreBegindatum,'%Y-%m-%d')='" + pPreBegindatum.ToString("yyyy-MM-dd") + "' ");
                DataTable tblPredikate = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                foreach (DataRow drAnimalPredikate in tblPredikate.Rows)
                {
                    ANIMALPREDIKAAT lAnimalPredikate = new ANIMALPREDIKAAT();
                    if (mDatabase.FillObject(lAnimalPredikate, drAnimalPredikate))
                    {
                        lAnimalPredikaten.Add(lAnimalPredikate);
                    }
                }
            }
            return lAnimalPredikaten;
        }
        public List<ANIMALPREDIKAAT> GetAnimalPredikatenByAniId(int pPreAniId)
        {
            List<ANIMALPREDIKAAT> lResultList = new List<ANIMALPREDIKAAT>();

            StringBuilder pQuery = new StringBuilder("select * from ANIMALPREDIKAAT ");
            pQuery.AppendFormat("  where PreAniId = {0} ORDER BY PreBegindatum DESC ", pPreAniId);
            DataTable tblPredikate = mDatabase.QueryData(mToken.getLastChildConnection(), pQuery);
            foreach (DataRow drAnimalPredikate in tblPredikate.Rows)
            {
                ANIMALPREDIKAAT lAnimalPredikate = new ANIMALPREDIKAAT();
                if (mDatabase.FillObject(lAnimalPredikate, drAnimalPredikate))
                {
                    lResultList.Add(lAnimalPredikate);
                }
            }
            return lResultList;
        }

        public ANIMAL_AFWIJKING GetAnimalAfwijking(int pAniId, DateTime pDatum, int pAfwijkingID, int pAA_Type = 0)
        {
            ANIMAL_AFWIJKING lAnimalAfwijking = new ANIMAL_AFWIJKING();
            StringBuilder lQuery = new StringBuilder("select * from ANIMAL_AFWIJKING ");
            lQuery.Append("  where AniId = " + pAniId.ToString() + " AND AfwijkingID=" + pAfwijkingID.ToString() + " AND AA_Type=" + pAA_Type.ToString() + "  AND  date_format(Datum,'%Y-%m-%d')='" + pDatum.ToString("yyyy-MM-dd") + "' ");
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnimalAfwijking, lQuery);
            return lAnimalAfwijking;
        }
        public List<ANIMAL_AFWIJKING> GetAnimalAfwijkingen(int pAniId, int pAA_Type)
        {
            List<ANIMAL_AFWIJKING> lResultList = new List<ANIMAL_AFWIJKING>();

            StringBuilder pQuery = new StringBuilder("select * from ANIMAL_AFWIJKING ");
            pQuery.AppendFormat("  where AniId = {0} AND AA_Type={1}", pAniId, pAA_Type);
            DataTable tblAfwijkingen = mDatabase.QueryData(mToken.getLastChildConnection(), pQuery);
            foreach (DataRow drAnimalAfwijking in tblAfwijkingen.Rows)
            {
                ANIMAL_AFWIJKING lAnimalAfwijking = new ANIMAL_AFWIJKING();
                if (mDatabase.FillObject(lAnimalAfwijking, drAnimalAfwijking))
                {
                    lResultList.Add(lAnimalAfwijking);
                }
            }
            return lResultList;
        }

        public List<ANIMAL_PRODUCTION> GetAnimalProductions(int pAniId)
        {
            List<ANIMAL_PRODUCTION> lResultList = new List<ANIMAL_PRODUCTION>();

            StringBuilder pQuery = new StringBuilder("select * from ANIMAL_PRODUCTION ");
            pQuery.AppendFormat("  where AniId = {0}", pAniId);
            DataTable tblAfwijkingen = mDatabase.QueryData(mToken.getLastChildConnection(), pQuery);
            foreach (DataRow drAnimalAfwijking in tblAfwijkingen.Rows)
            {
                ANIMAL_PRODUCTION lAnimalProduction = new ANIMAL_PRODUCTION();
                if (mDatabase.FillObject(lAnimalProduction, drAnimalAfwijking))
                {
                    lResultList.Add(lAnimalProduction);
                }
            }
            return lResultList;
        }

        public AUTH_GROUPS_FARM getAuthGroupsFarm(int pFarmId, int pGroupId)
        {
            AUTH_GROUPS_FARM lAuthGroupsFarm = new AUTH_GROUPS_FARM();
            StringBuilder lQuery = new StringBuilder("select * from AUTH_GROUPS_FARM ");
            lQuery.Append("  where FarmID = " + pFarmId.ToString() + " AND  GroupID=" + pGroupId.ToString());

            mDatabase.FillObject(mToken, lAuthGroupsFarm, lQuery);
            return lAuthGroupsFarm;
        }
        public List<AUTH_GROUPS_FARM> getAuthGroupsFarms(int pGroupId)
        {
            List<AUTH_GROUPS_FARM> lAuthGroupsFarms = new List<AUTH_GROUPS_FARM>();
            StringBuilder lQuery = new StringBuilder("select * from AUTH_GROUPS_FARM ");
            lQuery.Append("  WHERE   GroupID=" + pGroupId.ToString());
            DataTable tblAuthGroupsFarms = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drAuthGroupsFarm in tblAuthGroupsFarms.Rows)
            {
                AUTH_GROUPS_FARM lAuthGroupsFarm = new AUTH_GROUPS_FARM();
                if (mDatabase.FillObject(lAuthGroupsFarm, drAuthGroupsFarm))
                {
                    lAuthGroupsFarms.Add(lAuthGroupsFarm);
                }
            }
            return lAuthGroupsFarms;
        }
        public List<AUTH_GROUPS_RIGHTS> getAuthGroupRights(int pModuleID, int pGroupId)
        {
            List<AUTH_GROUPS_RIGHTS> lAuthGroupRights = new List<AUTH_GROUPS_RIGHTS>();
            StringBuilder lQuery = new StringBuilder("select * from AUTH_GROUPS_RIGHTS ");
            lQuery.AppendFormat("  WHERE   GroupID={0} AND ModuleID={1} ", pGroupId, pModuleID);
            DataTable tblAuthGroupsRights = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drAuthGroupsRight in tblAuthGroupsRights.Rows)
            {
                AUTH_GROUPS_RIGHTS lAuthGroupsRight = new AUTH_GROUPS_RIGHTS();
                if (mDatabase.FillObject(lAuthGroupsRight, drAuthGroupsRight))
                {
                    lAuthGroupRights.Add(lAuthGroupsRight);
                }
            }
            return lAuthGroupRights;
        }

        public bool Afkalven(DateTime pDatum, int pAantalKalveren, int pLactatie, ANIMAL pAniMother, int UBNid, int pFarmId)
        {
            List<ANIMAL> Calfs = GetAnimalByLifenrMotherAndBirthdate(pAniMother.AniLifeNumber, pDatum);
            for (int i = 1; i <= Calfs.Count; i++)
            {
                Afkalf(pDatum, pLactatie, pAniMother, UBNid, i, Calfs[(i - 1)].AniId, 0, pFarmId);
            }
            if (Calfs.Count == 0)
            {
                Afkalf(pDatum, pLactatie, pAniMother, UBNid, 1, 0, 1, pFarmId);
            }
            return true;
        }
        private void Afkalf(DateTime pDatum, int pLactatie, ANIMAL pAniMother, int UBNid, int pOrder, int CalfId, sbyte pBornDead, int pFarmId)
        {
            EVENT lEveItem = new EVENT();
            //lEveItem = GetEventByDateAniIdKind(pDatum, pAniMother.AniId, 5, UBNid);
            List<EVENT> evnts = GetEventsByDateAniIdKindInteval(pDatum, pAniMother.AniId, 5, 90);
            if (evnts.Count() > 0)
            {
                lEveItem = evnts.ElementAt(0);// GetEventByDateAniIdKindInteval(pDatum, pAniMother.AniId, 5, 90);
            }
            if (lEveItem.EventId == 0)
            {
                lEveItem.UBNId = UBNid;
            }
            lEveItem.EveDate = pDatum;
            lEveItem.AniId = pAniMother.AniId;
            lEveItem.EveKind = 5;
            lEveItem.EveMutationBy = 3;
            lEveItem.EveMutationDate = DateTime.Now;
            lEveItem.EveMutationTime = DateTime.Now;
            BIRTH lBirItem;
            if (lEveItem.EventId == 0)
            {
                lBirItem = new BIRTH();
                lEveItem.EveOrder = pOrder;
                lEveItem.happened_at_FarmID = pFarmId;
            }
            else
            {
                lBirItem = GetBirth(lEveItem.EventId);
            }
            SaveEvent(lEveItem);
            lBirItem.EventId = lEveItem.EventId;
            lBirItem.BirNumber = pLactatie;
            lBirItem.Reportdate = pDatum;
            lBirItem.CalfId = CalfId;
            lBirItem.BornDead = pBornDead;
            SaveBirth(lBirItem);
        }

        public COMPLAINTS getComplaint(int pComlpaintID)
        {
            COMPLAINTS lComplaint = new COMPLAINTS();
            //geen query doen bij lege parameter
            if (pComlpaintID > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT COMPLAINTS.* FROM COMPLAINTS ");
                lQuery.AppendFormat(" WHERE CM_ID = '{0}'  ", pComlpaintID);
                mDatabase.FillObject(mToken, lComplaint, lQuery);
            }
            else
            {
                unLogger.WriteError("ComlpaintID = " + pComlpaintID.ToString());
            }
            return lComplaint;
        }

        public COMPLAINTS_CONFIG getComplaintsConfig(int pProgramID)
        {
            COMPLAINTS_CONFIG lComplaintConfig = new COMPLAINTS_CONFIG();
            //geen query doen bij lege parameter
            if (pProgramID > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT COMPLAINTS_CONFIG.* FROM COMPLAINTS_CONFIG ");
                lQuery.AppendFormat(" WHERE cmc_ProgramID = '{0}'  ", pProgramID);
                mDatabase.FillObject(mToken, lComplaintConfig, lQuery);
            }
            else
            {
                unLogger.WriteError("getComplaintsConfig pProgramID = " + pProgramID.ToString());
            }
            return lComplaintConfig;
        }

        public void getCompanyByFarmId(int pFarmId, out BEDRIJF pBedrijf, out UBN pUbn, out THIRD pThird, out COUNTRY pCountry)
        {
            pBedrijf = new BEDRIJF();
            pUbn = new UBN();
            pThird = new THIRD();
            pCountry = new COUNTRY();
            StringBuilder b = new StringBuilder();
            b.Append(" SELECT BEDRIJF.*,UBN.*,THIRD.*,COUNTRY.*  FROM BEDRIJF ");
            b.Append(" LEFT JOIN UBN ON UBN.UbnId = BEDRIJF.UbnId ");
            b.Append(" LEFT JOIN THIRD ON THIRD.ThrId=UBN.ThrId ");
            b.Append(" LEFT JOIN COUNTRY ON COUNTRY.LandId = THIRD.ThrCountry ");
            b.AppendFormat(" WHERE BEDRIJF.FarmId={0} ", pFarmId);

            DataTable tblResult = mDatabase.QueryData(mToken, b);
            if (tblResult.Rows.Count == 1)
            {
                mDatabase.FillObject(pBedrijf, tblResult.Rows[0]);
                mDatabase.FillObject(pUbn, tblResult.Rows[0]);
                mDatabase.FillObject(pThird, tblResult.Rows[0]);
                if (pThird.ThrCountry.Trim() == "" || pThird.ThrCountry.Trim() == "0")
                {
                    pThird.ThrCountry = "151";
                }
                int intTemp = 0;
                if (tblResult.Rows[0]["ThrCountry"] != DBNull.Value && int.TryParse(tblResult.Rows[0]["ThrCountry"].ToString(), out intTemp))
                {
                    mDatabase.FillObject(pCountry, tblResult.Rows[0]);
                }
                else
                {
                    pCountry = GetCountryByLandid(151);
                }
            }
        }

        #region Honden

        public DataTable getDogOwners(int pAniId)
        {
            DataTable tbl = new DataTable();
            if (pAniId > 0)
            {
                StringBuilder bld = new StringBuilder(" SELECT  agrofactuur.THIRD.* ,agrofactuur.COUNTRY.LandNaam  FROM agrofactuur.THIRD ");
                bld.Append(" INNER JOIN ANIMALPASSWORD ON ANIMALPASSWORD.AP_ThrID=agrofactuur.THIRD.ThrId ");
                bld.Append(" LEFT JOIN agrofactuur.COUNTRY ON agrofactuur.COUNTRY.LandId=agrofactuur.THIRD.ThrCountry  ");
                bld.AppendFormat(" WHERE ANIMALPASSWORD.AP_AniID={0} AND ANIMALPASSWORD.AP_ThrID>0  ", pAniId);

                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "DogOwners", MissingSchemaAction.Add);
            }
            return tbl;
        }

        public DataTable getHondenByloggedInKennelhouderThrId(int pKennelhouderThrId)
        {
            /* for copypaste
                 SELECT a.AniId, a.AniName,a.AniLifeNumber, a.AniSex, a.ThrId, 
                 (   
                    SELECT  agrofactuur.AGRO_LABELS.LabLabel FROM agrofactuur.AGRO_LABELS  
                    WHERE agrofactuur.AGRO_LABELS.LabKind=205 AND  agrofactuur.AGRO_LABELS.LabProgramId=0 AND agrofactuur.AGRO_LABELS.LabProgId=25  
                    AND agrofactuur.AGRO_LABELS.LAbID = a.RacId  
                     )  
                     AS Ras,  
                 (   
                    SELECT  agrofactuur.AGRO_LABELS.LabLabel FROM agrofactuur.AGRO_LABELS  
                    WHERE agrofactuur.AGRO_LABELS.LabKind=4 AND  agrofactuur.AGRO_LABELS.LabProgramId=0 AND agrofactuur.AGRO_LABELS.LabProgId=25  
                    AND agrofactuur.AGRO_LABELS.LAbID = a.AniSex  
                    )  
                     AS Geslacht,  
                     a.AniBirthDate,  
                     ap.* ,cs.cs_chipnr ,cs.cs_breeder_thrid 
                     FROM ANIMAL a  
                     INNER JOIN ANIMALPASSWORD ap ON ap.AP_AniId=a.AniId   
                     LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId = ap.AP_ThrID  
                     LEFT JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_chipnr=a.AniLifeNumber 
                     WHERE ap.AP_ThrID IN 

                (

                 SELECT DISTINCT(th.ThrId) 
                 FROM agrofactuur.THIRD th 
                 JOIN agrobase_dog.ANIMALPASSWORD ON agrobase_dog.ANIMALPASSWORD.AP_ThrId = th.ThrId 
                 JOIN agrobase_dog.ANIMAL an ON an.AniID = agrobase_dog.ANIMALPASSWORD.AP_AniID 
                 JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_chipnr = an.AniAlterNateNumber 
                 WHERE cs.cs_breeder_thrid=142545

                 UNION 

                 SELECT DISTINCT(th.ThrId)    
                 FROM agrofactuur.THIRD th  


                 JOIN agrobase_dog.MUTALOG ON agrobase_dog.MUTALOG.tbv_ThrID =th.ThrId 
                 JOIN agrobase_dog.ANIMALPASSWORD ON agrobase_dog.ANIMALPASSWORD.AP_ThrId = agrobase_dog.MUTALOG.tbv_ThrID 
                 WHERE agrobase_dog.MUTALOG.ThrID=142545

                    UNION 

                   SELECT DISTINCT(th.ThrId)    
                   FROM agrofactuur.THIRD th  


                    JOIN agrobase_dog.MUTATION ON agrobase_dog.MUTATION.tbv_ThrID =th.ThrId 
                    JOIN agrobase_dog.ANIMALPASSWORD ON agrobase_dog.ANIMALPASSWORD.AP_ThrId = agrobase_dog.MUTATION.tbv_ThrID 
                   WHERE agrobase_dog.MUTATION.ThrID=142545
                  ORDER BY ThrCompanyName
                  )
                     AND a.AniId > 0  
                     AND ap.AP_AniID>0
             */
            //Combinatie van de Querys getHondenByloggedInThrId ( hieronder ) en utils.getDatatableForRelatieScherm
            DataTable tbl = new DataTable();
            if (pKennelhouderThrId > 0)
            {
                StringBuilder sqlwnr = new StringBuilder();
                sqlwnr.Append("  SELECT a.AniId, a.AniName,a.AniLifeNumber, a.AniSex, a.AniSpecies, a.ThrId, ");
                sqlwnr.Append(" (    ");
                sqlwnr.Append(" SELECT  agrofactuur.AGRO_LABELS.LabLabel FROM agrofactuur.AGRO_LABELS   ");
                sqlwnr.Append(" WHERE agrofactuur.AGRO_LABELS.LabKind=205 AND  agrofactuur.AGRO_LABELS.LabProgramId=0 AND agrofactuur.AGRO_LABELS.LabProgId=25   ");
                sqlwnr.Append(" AND agrofactuur.AGRO_LABELS.LAbID = a.RacId   ");
                sqlwnr.Append("  )   ");
                sqlwnr.Append(" AS Ras,   ");
                sqlwnr.Append(" (    ");
                sqlwnr.Append(" SELECT  agrofactuur.AGRO_LABELS.LabLabel FROM agrofactuur.AGRO_LABELS   ");
                sqlwnr.Append(" WHERE agrofactuur.AGRO_LABELS.LabKind=4 AND  agrofactuur.AGRO_LABELS.LabProgramId=0 AND agrofactuur.AGRO_LABELS.LabProgId=25   ");
                sqlwnr.Append(" AND agrofactuur.AGRO_LABELS.LAbID = a.AniSex   ");
                sqlwnr.Append(" )   ");
                sqlwnr.Append(" AS Geslacht,   ");
                sqlwnr.Append(" a.AniBirthDate,   ");
                sqlwnr.Append(" ap.* ,cs.cs_chipnr ,cs.cs_breeder_thrid  ");
                sqlwnr.Append(" FROM ANIMAL a   ");
                sqlwnr.Append(" INNER JOIN ANIMALPASSWORD ap ON ap.AP_AniId=a.AniId    ");
                sqlwnr.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId = ap.AP_ThrID   ");
                sqlwnr.Append(" LEFT JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_chipnr=a.AniLifeNumber  ");
                sqlwnr.Append(" WHERE ap.AP_ThrID IN  ");

                sqlwnr.Append(" ( ");

                sqlwnr.Append(" SELECT DISTINCT(th.ThrId)  ");
                sqlwnr.Append(" FROM agrofactuur.THIRD th  ");
                sqlwnr.Append(" JOIN agrobase_dog.ANIMALPASSWORD ON agrobase_dog.ANIMALPASSWORD.AP_ThrId = th.ThrId  ");
                sqlwnr.Append(" JOIN agrobase_dog.ANIMAL an ON an.AniID = agrobase_dog.ANIMALPASSWORD.AP_AniID  ");
                sqlwnr.Append(" JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_chipnr = an.AniAlterNateNumber  ");
                sqlwnr.AppendFormat(" WHERE cs.cs_breeder_thrid={0} ", pKennelhouderThrId);

                sqlwnr.Append(" UNION  ");

                sqlwnr.Append(" SELECT DISTINCT(th.ThrId)     ");
                sqlwnr.Append(" FROM agrofactuur.THIRD th   ");


                sqlwnr.Append(" JOIN agrobase_dog.MUTALOG ON agrobase_dog.MUTALOG.tbv_ThrID =th.ThrId  ");
                sqlwnr.Append(" JOIN agrobase_dog.ANIMALPASSWORD ON agrobase_dog.ANIMALPASSWORD.AP_ThrId = agrobase_dog.MUTALOG.tbv_ThrID  ");
                sqlwnr.AppendFormat(" WHERE agrobase_dog.MUTALOG.ThrID={0} ", pKennelhouderThrId);

                sqlwnr.Append(" UNION  ");

                sqlwnr.Append(" SELECT DISTINCT(th.ThrId)     ");
                sqlwnr.Append(" FROM agrofactuur.THIRD th   ");


                sqlwnr.Append(" JOIN agrobase_dog.MUTATION ON agrobase_dog.MUTATION.tbv_ThrID =th.ThrId  ");
                sqlwnr.Append(" JOIN agrobase_dog.ANIMALPASSWORD ON agrobase_dog.ANIMALPASSWORD.AP_ThrId = agrobase_dog.MUTATION.tbv_ThrID  ");
                sqlwnr.AppendFormat(" WHERE agrobase_dog.MUTATION.ThrID={0} ", pKennelhouderThrId);
                sqlwnr.Append(" ORDER BY ThrCompanyName ");
                sqlwnr.Append(" ) ");
                sqlwnr.Append(" AND a.AniId > 0   ");
                sqlwnr.Append(" AND ap.AP_AniID>0  ");
                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwnr, "DogsofDogOwners", MissingSchemaAction.Add);
            }
            return tbl;
        }

        public DataTable getHondenByloggedInThrId(int pThrId, int pProgramID)
        {
            StringBuilder sqlwnr = new StringBuilder();


            sqlwnr.Append(" SELECT a.AniId, a.AniName,a.AniLifeNumber, a.AniSex, a.AniSpecies, a.ThrId, ");
            sqlwnr.Append(" (   ");
            sqlwnr.Append("    SELECT  agrofactuur.AGRO_LABELS.LabLabel FROM agrofactuur.AGRO_LABELS  ");
            sqlwnr.Append("    WHERE agrofactuur.AGRO_LABELS.LabKind=205 AND  agrofactuur.AGRO_LABELS.LabProgramId=0 AND agrofactuur.AGRO_LABELS.LabProgId=25  ");
            sqlwnr.Append("    AND agrofactuur.AGRO_LABELS.LAbID = a.RacId  ");
            sqlwnr.Append("    )  ");
            sqlwnr.Append("     AS Ras,  ");
            sqlwnr.Append(" (   ");
            sqlwnr.Append("    SELECT  agrofactuur.AGRO_LABELS.LabLabel FROM agrofactuur.AGRO_LABELS  ");
            sqlwnr.Append("    WHERE agrofactuur.AGRO_LABELS.LabKind=4 AND  agrofactuur.AGRO_LABELS.LabProgramId=0 AND agrofactuur.AGRO_LABELS.LabProgId=25  ");
            sqlwnr.Append("    AND agrofactuur.AGRO_LABELS.LAbID = a.AniSex  ");
            sqlwnr.Append("    )  ");
            sqlwnr.Append("     AS Geslacht,  ");
            sqlwnr.Append("     a.AniBirthDate,  ");
            sqlwnr.Append("     ap.* ,cs.cs_chipnr ,cs.cs_breeder_thrid ");
            sqlwnr.Append("     FROM ANIMAL a  ");
            sqlwnr.Append("     INNER JOIN ANIMALPASSWORD ap ON ap.AP_AniId=a.AniId   ");
            sqlwnr.Append("     LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId = ap.AP_ThrID  ");
            sqlwnr.Append("     LEFT JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_chipnr=a.AniLifeNumber ");
            sqlwnr.AppendFormat("     WHERE ap.AP_ThrID={0}  ", pThrId);
            sqlwnr.AppendFormat("     AND AP_ProgramID={0} ", pProgramID);
            sqlwnr.Append("     AND a.AniId > 0  ");
            sqlwnr.Append("     AND ap.AP_AniID>0 ");
            if (pThrId > 0)
            {
                DataSet p = new DataSet();
                return mDatabase.QueryData(mToken.getLastChildConnection(), p, sqlwnr, "hondenlijst", MissingSchemaAction.Add);
            }
            else { return new DataTable(); }
        }
        public List<CHIP_BOX> getChipBoxesBySupplier(int pSupplierThrId, int pBreederThrId, out List<CHIP_STOCK> pChipStoks)
        {
            //if pBreederThrId < 0 : you get all the Chipnumbers by Supplier
            //if pBreederThrId == 0: you get all the NOT Sold Chipnumbers by Supplier
            //if pBreederThrId > 0: you get all the Sold Chipnumbers by Supplier To this Breeder

            List<CHIP_BOX> lResultValue = new List<CHIP_BOX>();
            pChipStoks = new List<CHIP_STOCK>();
            if (pSupplierThrId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT chip_supplier.CHIP_BOX.* ,chip_supplier.CHIP_STOCK.* FROM chip_supplier.CHIP_STOCK ");
                lQuery.Append(" JOIN  chip_supplier.CHIP_BOX ON chip_supplier.CHIP_BOX.cb_Box_ID  = chip_supplier.CHIP_STOCK.cb_box_id  ");
                lQuery.AppendFormat(" WHERE  chip_supplier.CHIP_STOCK.cs_supplier_thrid = {0} ", pSupplierThrId);
                lQuery.Append(" AND chip_supplier.CHIP_STOCK.cb_box_id>0   ");
                if (pBreederThrId > -1)
                {
                    lQuery.AppendFormat(" AND chip_supplier.CHIP_STOCK.cs_breeder_thrid = {0}   ", pBreederThrId);
                }
                else
                {

                }

                System.Data.DataTable dtChipboxes = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow drChipbox in dtChipboxes.Rows)
                {
                    CHIP_BOX cb = new CHIP_BOX();
                    CHIP_STOCK ct = new CHIP_STOCK();
                    if (mDatabase.FillObject(ct, drChipbox))
                    {
                        pChipStoks.Add(ct);
                        var check = from n in lResultValue
                                    where n.cb_Box_ID.ToString() == drChipbox["cb_Box_ID"].ToString()
                                    select n;
                        if (check.Count() == 0)
                        {
                            if (mDatabase.FillObject(cb, drChipbox))
                            {
                                lResultValue.Add(cb);
                            }

                        }
                    }
                }
            }
            return lResultValue;
        }
        public List<CHIP_BOX> getChipStocksByBoxIds(List<int> pBoxIds, int pBreederThrId, out List<CHIP_STOCK> pChipStoks)
        {
            //if pBreederThrId < 0 : you get all the Chipnumbers by Supplier
            //if pBreederThrId == 0: you get all the NOT Sold Chipnumbers by Supplier
            //if pBreederThrId > 0: you get all the Sold Chipnumbers by Supplier To this Breeder

            List<CHIP_BOX> lResultValue = new List<CHIP_BOX>();
            pChipStoks = new List<CHIP_STOCK>();
            if (pBoxIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT chip_supplier.CHIP_BOX.* ,chip_supplier.CHIP_STOCK.* FROM chip_supplier.CHIP_STOCK ");
                lQuery.Append(" JOIN  chip_supplier.CHIP_BOX ON chip_supplier.CHIP_BOX.cb_Box_ID  = chip_supplier.CHIP_STOCK.cb_box_id  ");
                lQuery.Append(" WHERE  chip_supplier.CHIP_STOCK.cb_box_id IN (" + intListToString(pBoxIds) + ") ");
                lQuery.AppendFormat(" AND chip_supplier.CHIP_STOCK.cs_breeder_thrid ={0} ", pBreederThrId);


                System.Data.DataTable dtChipboxes = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow drChipbox in dtChipboxes.Rows)
                {
                    CHIP_BOX cb = new CHIP_BOX();
                    CHIP_STOCK ct = new CHIP_STOCK();
                    if (mDatabase.FillObject(ct, drChipbox))
                    {
                        pChipStoks.Add(ct);
                        var check = from n in lResultValue
                                    where n.cb_Box_ID.ToString() == drChipbox["cb_Box_ID"].ToString()
                                    select n;
                        if (check.Count() == 0)
                        {
                            if (mDatabase.FillObject(cb, drChipbox))
                            {
                                lResultValue.Add(cb);
                            }

                        }
                    }
                }
            }
            return lResultValue;
        }

        public void getChipboxChipstockByChipnumber(string pChipnummer, out CHIP_BOX pChipbox, out CHIP_STOCK pChipstock)
        {
            pChipbox = new CHIP_BOX();
            pChipstock = new CHIP_STOCK();
            if (pChipnummer != "")
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT chip_supplier.CHIP_BOX.* ,chip_supplier.CHIP_STOCK.* FROM chip_supplier.CHIP_BOX ");
                lQuery.Append(" RIGHT JOIN  chip_supplier.CHIP_STOCK ON chip_supplier.CHIP_STOCK.cb_Box_ID  = chip_supplier.CHIP_BOX.cb_box_id  ");

                lQuery.AppendFormat(" WHERE chip_supplier.CHIP_STOCK.cs_chipnr = '{0}' ", pChipnummer);
                System.Data.DataTable dtChipboxes = mDatabase.QueryData(mToken, lQuery);
                if (dtChipboxes.Rows.Count > 0)
                {
                    if (mDatabase.FillObject(pChipbox, dtChipboxes.Rows[0]))
                    {

                        mDatabase.FillObject(pChipstock, dtChipboxes.Rows[0]);



                    }
                }
            }
        }

        public bool SaveChipbox(CHIP_BOX pChipbox)
        {
            try
            {
                //TODO testen of dit werkt:


                if (WriteActions.SaveObject(pChipbox) < 0) return false;
                return true;


                //if (pChipbox.cb_Box_ID == 0)
                //{
                //    String qry = String.Format("INSERT INTO chip_supplier.CHIP_BOX (cb_Upload_Date, cb_Barcode ) " +
                //        "  VALUES ({0}, '{1}')",
                //        MySQL_Datum(pChipbox.cb_Upload_Date, 0), pChipbox.cb_Barcode);
                //    DbCommand cmd = mDatabase.CreateCommand(mToken);
                //    cmd.CommandType = System.Data.CommandType.Text;
                //    cmd.CommandText = qry;

                //    if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                //    {

                //        return false;
                //    }
                //    pChipbox.cb_Box_ID = GetLastRowId(cmd.Connection);
                //}
                //else
                //{
                //    String qry = String.Format("UPDATE chip_supplier.CHIP_BOX  " +
                //            " SET cb_Upload_Date={0} , cb_Barcode='{1}') WHERE cb_Box_ID={2} ",
                //            MySQL_Datum(pChipbox.cb_Upload_Date, 0), pChipbox.cb_Barcode, pChipbox.cb_Box_ID);
                //    DbCommand cmd = mDatabase.CreateCommand(mToken);
                //    cmd.CommandType = System.Data.CommandType.Text;
                //    cmd.CommandText = qry;

                //    if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                //    {

                //        return false;
                //    }
                //}
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveChipbox:" + pChipbox.cb_Barcode + "," + pChipbox.cb_Box_ID.ToString() + ";" + ex.ToString());
                return false;
            }
        }
        public bool SaveChipStock(CHIP_STOCK pChipStock)
        {
            try
            {
                if (!isFilledByDb(pChipStock))
                {
                    String qry = String.Format(" INSERT INTO chip_supplier.CHIP_STOCK " +
                        "(cs_sale_date, cb_box_id, cs_breeder_thrid,cs_chipnr,cs_supplier_thrid,cs_type) " +
                        "  VALUES ({0}, {1},{2},'{3}',{4},{5})",
                        MySQL_Datum(pChipStock.cs_sale_date, 0), pChipStock.cb_box_id,
                        pChipStock.cs_breeder_thrid, pChipStock.cs_chipnr,
                        pChipStock.cs_supplier_thrid, pChipStock.cs_type);
                    //DbCommand cmd = mDatabase.CreateCommand(mToken);
                    //cmd.CommandType = System.Data.CommandType.Text;
                    //cmd.CommandText = qry;

                    if (mDatabase.ExecuteNonQuery(mToken, qry) != 1)
                    {
                        return false;
                    }

                }
                else
                {
                    String qry = String.Format(" UPDATE chip_supplier.CHIP_STOCK  " +
                            " SET cs_sale_date={0} , cb_box_id={1} , " +
                            " cs_breeder_thrid={2} , cs_supplier_thrid={3}, " +
                            " cs_type={4}  " +
                            " WHERE cs_chipnr='{5}' ",
                            MySQL_Datum(pChipStock.cs_sale_date, 0), pChipStock.cb_box_id
                            , pChipStock.cs_breeder_thrid, pChipStock.cs_supplier_thrid
                            , pChipStock.cs_type, pChipStock.cs_chipnr);
                    //DbCommand cmd = mDatabase.CreateCommand(mToken);
                    //cmd.CommandType = System.Data.CommandType.Text;
                    //cmd.CommandText = qry;

                    if (mDatabase.ExecuteNonQuery(mToken, qry) != 1)
                    {

                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveChipStock:" + pChipStock.cs_chipnr + ";" + ex.ToString());
                return false;
            }
            return true;

        }
        public bool sellChipsByBoxIds(List<int> pBoxIds, DateTime pSelDate, int pBreederThrId)
        {
            if (pBoxIds.Count() > 0)
            {
                if (pBreederThrId > 0)
                {

                    //DbCommand cmd = mDatabase.CreateCommand(mToken);

                    StringBuilder bld = new StringBuilder();
                    bld.Append(" UPDATE chip_supplier.CHIP_STOCK ");
                    bld.AppendFormat(" SET chip_supplier.CHIP_STOCK.cs_breeder_thrid={0} ", pBreederThrId);
                    bld.Append(" , chip_supplier.CHIP_STOCK.cs_sale_date= " + MySQL_Datum(pSelDate, 0) + " ");
                    bld.Append(" WHERE chip_supplier.CHIP_STOCK.cb_box_id IN (" + EnumerableToCommaSeperatedString(pBoxIds) + ") ");
                    //cmd.CommandText = bld.ToString();
                    int ret = mDatabase.ExecuteNonQuery(mToken, bld.ToString());
                    if (ret > 0)
                    {


                        return true;
                    }

                }

            }
            return false;
        }
        public List<THIRD> GetThirdsByProgramIds2(List<int> pProgramIds)
        {
            List<THIRD> lResultList = new List<THIRD>();
            if (pProgramIds.Count() > 0)
            {
                StringBuilder lsb = new StringBuilder(" SELECT DISTINCT(THIRD.ThrID), THIRD.* FROM THIRD ");

                lsb.Append(" INNER JOIN UBN ON UBN.ThrID=THIRD.ThrId ");
                lsb.Append(" INNER JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid ");
                lsb.Append(" WHERE BEDRIJF.ProgramId IN (" + intListToString(pProgramIds) + ") ORDER BY ThrCompanyName ");

                DataTable ltbl = mDatabase.QueryData(mToken, lsb);

                foreach (DataRow dr in ltbl.Rows)
                {
                    THIRD lThr = new THIRD();
                    if (mDatabase.FillObject(lThr, dr))
                    {
                        lResultList.Add(lThr);
                    }
                }
            }
            return lResultList;
        }
        public List<THIRD> getChipAdminLedenvanWill(List<int> pProgramIds)
        {
            List<THIRD> lResultList = new List<THIRD>();
            if (pProgramIds.Count() > 0)
            {
                StringBuilder lsb = new StringBuilder(" SELECT DISTINCT(THIRD.ThrID), THIRD.* FROM THIRD ");

                lsb.Append(" JOIN UBN ON UBN.ThrID=THIRD.ThrId ");
                lsb.Append(" JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid ");
                lsb.Append(" WHERE BEDRIJF.ProgramId IN (" + intListToString(pProgramIds) + ") AND BEDRIJF.FarmId>0  AND UBN.UBNid>0 ");

                lsb.Append(" UNION ");

                lsb.Append(" SELECT DISTINCT(THIRD.ThrID), THIRD.* FROM THIRD ");
                lsb.Append(" JOIN ADMINISTRATIE ON ADMINISTRATIE.ThrID = THIRD.ThrId ");
                lsb.Append(" WHERE ADMINISTRATIE.ProgramID IN (2550) AND ADMINISTRATIE.AdmisID>0 ");
                lsb.Append(" ORDER BY ThrCompanyName ");

                DataTable ltbl = mDatabase.QueryData(mToken, lsb);

                foreach (DataRow dr in ltbl.Rows)
                {
                    THIRD lThr = new THIRD();
                    if (mDatabase.FillObject(lThr, dr))
                    {
                        lResultList.Add(lThr);
                    }
                }
            }
            return lResultList;
        }
        public List<THIRD> getFilteredDogsByCompany(List<int> pProgramIds, string pHouseNr, string pZipCode)
        {

            pHouseNr = pHouseNr.ToUpper().Replace(" ", "");
            pZipCode = pZipCode.ToUpper().Replace(" ", "");
            List<THIRD> lThirds = new List<THIRD>();
            if (pHouseNr.Length > 0 && pZipCode.Length > 0 && pProgramIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT aft.* FROM agrofactuur.THIRD aft  ");
                lQuery.Append(" JOIN ANIMALPASSWORD ON ANIMALPASSWORD.AP_ThrID = aft.ThrID  ");
                lQuery.Append(" WHERE ANIMALPASSWORD.AP_ProgramID IN (" + intListToString(pProgramIds) + ")  ");
                lQuery.AppendFormat(" AND aft.ThrExt= '{0}'  ", pHouseNr);
                lQuery.AppendFormat(" AND aft.ThrZipcode = '{0}' AND aft.ThrId>0   ", pZipCode);

                lQuery.Append("   UNION  ");

                lQuery.Append(" SELECT aft.* FROM agrofactuur.THIRD aft  ");
                lQuery.Append(" JOIN agrofactuur.ADMINISTRATIE afa ON afa.ThrID = aft.ThrID  ");
                lQuery.Append(" WHERE afa.ProgramId IN (" + intListToString(pProgramIds) + ")  ");
                lQuery.AppendFormat(" AND aft.ThrExt= '{0}'  ", pHouseNr);
                lQuery.AppendFormat(" AND aft.ThrZipcode = '{0}' AND aft.ThrId>0   ", pZipCode);

                lQuery.Append("   UNION  ");

                lQuery.Append(" SELECT aft.* FROM agrofactuur.THIRD aft  ");
                lQuery.Append(" JOIN agrofactuur.UBN afu ON afu.ThrID = aft.ThrID  ");
                lQuery.Append(" JOIN agrofactuur.BEDRIJF afb ON afb.UbnID = afu.UbnID  ");
                lQuery.Append(" WHERE afb.ProgramId IN (" + intListToString(pProgramIds) + ")  ");
                lQuery.AppendFormat(" AND aft.ThrExt= '{0}'  ", pHouseNr);
                lQuery.AppendFormat(" AND aft.ThrZipcode = '{0}' AND aft.ThrId>0   ", pZipCode);
                DataSet lsDummy = new DataSet();
                System.Data.DataTable dtThirds = mDatabase.QueryData(mToken.getLastChildConnection(), lsDummy, lQuery, "DogOwners", MissingSchemaAction.Add);
                foreach (DataRow drwThr in dtThirds.Rows)
                {
                    THIRD lThird = new THIRD();
                    if (mDatabase.FillObject(lThird, drwThr))
                    {
                        if (lThird.ThrCountry.Trim() == "")
                        {
                            lThird.ThrCountry = "151";
                        }
                        lThirds.Add(lThird);
                    }
                }
            }
            return lThirds;
        }
        public bool DeleteChipBoxAndChipStocks(CHIP_BOX pChipBox)
        {
            try
            {
                if (pChipBox.cb_Box_ID > 0)
                {
                    if (DeleteChipStocksByBoxId(pChipBox.cb_Box_ID))
                    {
                        String qry = String.Format(" DELETE FROM chip_supplier.CHIP_BOX " +
                            "  WHERE chip_supplier.CHIP_BOX.cb_Box_ID={0} ",
                            pChipBox.cb_Box_ID);
                        //DbCommand cmd = mDatabase.CreateCommand(mToken);
                        //cmd.CommandType = System.Data.CommandType.Text;
                        //cmd.CommandText = qry;

                        if (mDatabase.ExecuteNonQuery(mToken, qry) > 0)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError("DeleteChipStocksByBoxId:" + pChipBox.cb_Box_ID.ToString() + ";" + ex.ToString());
                return false;
            }
            return true;

        }
        private bool DeleteChipStocksByBoxId(int pCb_BoxId)
        {
            try
            {
                if (pCb_BoxId > 0)
                {
                    String qry = String.Format(" DELETE FROM chip_supplier.CHIP_STOCK " +
                        "  WHERE chip_supplier.CHIP_STOCK.cb_box_id={0} ",
                        pCb_BoxId);
                    //DbCommand cmd = mDatabase.CreateCommand(mToken);
                    //cmd.CommandType = System.Data.CommandType.Text;
                    //cmd.CommandText = qry;

                    if (mDatabase.ExecuteNonQuery(mToken, qry) > 0)
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError("DeleteChipStocksByBoxId:" + pCb_BoxId.ToString() + ";" + ex.ToString());
                return false;
            }
            return true;

        }

        public DataTable getAnimalDiscussionsOverview(int pThrId, int pProgramid)
        {

            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT COUNT(INS) AS Aantal,1 AS Soort, 'Algemeen' AS Naam  ,0 AS LabId ");

            bld.Append(" FROM ANIMAL_DISCUSSION ad ");
            bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = ad.AD_Unique_Id ");

            bld.Append(" WHERE ad.AD_TypeId=1 ");
            bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
            if (pProgramid != 2599)
            {
                bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
            }
            bld.Append(" GROUP BY Naam HAVING Aantal>0 ");

            bld.Append(" UNION ");

            bld.Append(" SELECT COUNT(INS) AS Aantal,2 AS Soort, al.LabLabel AS Naam  ,al.LabId AS LabId ");

            bld.Append(" FROM ANIMAL_DISCUSSION ad ");
            bld.Append(" JOIN STATUS ON STATUS.EventId = ad.AD_Unique_Id ");
            bld.Append(" JOIN EVENT ON EVENT.EventId=STATUS.EventId ");
            bld.Append(" JOIN ANIMAL ON ANIMAL.AniId=EVENT.AniId ");
            bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=STATUS.Status  ");
            bld.Append(" WHERE ad.AD_TypeId=2 ");
            bld.Append(" AND al.LabKind=81 AND al.LabProgId=25 ");
            bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
            if (pProgramid != 2599)
            {
                bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
            }
            bld.Append(" GROUP BY Naam HAVING Aantal>0 ");

            bld.Append(" UNION ");

            bld.Append(" SELECT COUNT(INS) AS Aantal,3 AS Soort, al.LabLabel AS Naam  ,al.LabId AS LabId ");

            bld.Append(" FROM ANIMAL_DISCUSSION ad ");
            bld.Append(" JOIN MOVEMENT ON MOVEMENT.MovId = ad.AD_Unique_Id ");
            bld.Append(" JOIN ANIMAL ON ANIMAL.AniId=MOVEMENT.AniId ");
            bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=MOVEMENT.MovKind ");
            bld.Append(" WHERE ad.AD_TypeId=3 ");
            bld.Append(" AND al.LabKind=1 ");
            bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
            if (pProgramid != 2599)
            {
                bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
            }
            bld.Append(" GROUP BY Naam HAVING Aantal>0 ");

            bld.Append(" UNION ");

            bld.Append(" SELECT COUNT(INS) AS Aantal,4 AS Soort, al.LabLabel AS Naam  ,al.LabId AS LabId ");
            //bld.Append(" , '../images/notesklein.png' AS Plaatje ");
            bld.Append(" FROM ANIMAL_DISCUSSION ad ");
            bld.Append(" JOIN ANIMAL_AFWIJKING ON ANIMAL_AFWIJKING.AA_ID = ad.AD_Unique_Id ");
            bld.Append(" JOIN ANIMAL ON ANIMAL.AniId=ANIMAL_AFWIJKING.AniId ");
            bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=ANIMAL_AFWIJKING.AfwijkingID  ");
            bld.Append(" WHERE ad.AD_TypeId=4 ");
            bld.Append(" AND al.LabKind=150 AND al.LabProgId=25 ");
            bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
            if (pProgramid != 2599)
            {
                bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
            }
            bld.Append(" GROUP BY Naam HAVING Aantal>0 ");
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "Kort overzicht", MissingSchemaAction.Add);
            return tbl;

        }
        public DataTable getAnimalDiscussionsByTypeIdAndKind(int pThrId, int pAD_TypeId, int pLabID, int pProgramid)
        {

            DataTable tbl = new DataTable();
            if (pAD_TypeId > 0 && pAD_TypeId < 5)
            {
                //AD_TypeId =  Vast ID voor aan te geven tot welke tabel. 
                //de AD_Unique_Id  behoort
                //Moet Eigenlijk in AGRO_LABELS.labkind = .. --> 1 = ANIMALID, 
                //                                          2 = EVENTID, 
                //                                          3 = MOVEMENTID, 
                //                                          4 = AFWIJKING_ID

                StringBuilder bld = new StringBuilder();
                bld.Append(" SELECT ad.*,ANIMAL.AniId,ANIMAL.AniLifeNumber ,ANIMAL.AniName,th.ThrSecondName  FROM ANIMAL_DISCUSSION ad ");

                switch (pAD_TypeId)
                {
                    case 1:
                        bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = ad.AD_Unique_Id ");
                        bld.Append(" LEFT JOIN agrofactuur.THIRD th ON th.ThrId = ad.ThrID ");
                        bld.AppendFormat(" WHERE ad.AD_TypeId={0}  ", pAD_TypeId);
                        bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
                        if (pProgramid != 2599)
                        {
                            bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
                        }
                        break;
                    case 2:
                        bld.Append(" JOIN EVENT ON EVENT.EventId = ad.AD_Unique_Id  ");
                        bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = EVENT.AniId ");
                        bld.Append(" LEFT JOIN agrofactuur.THIRD th ON th.ThrId = ad.ThrID ");
                        bld.Append(" JOIN STATUS ON STATUS.EventId = ad.AD_Unique_Id ");

                        bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=STATUS.Status  ");
                        bld.AppendFormat(" WHERE ad.AD_TypeId={0} ", pAD_TypeId);
                        bld.AppendFormat(" AND al.LabKind=81 AND al.LabProgId=25 AND al.LabID={0} ", pLabID);
                        bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
                        if (pProgramid != 2599)
                        {
                            bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
                        }
                        break;
                    case 3:
                        bld.Append(" JOIN MOVEMENT ON MOVEMENT.MovId = ad.AD_Unique_Id ");
                        bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = MOVEMENT.AniId ");

                        bld.Append(" LEFT JOIN agrofactuur.THIRD th ON th.ThrId = ad.ThrID ");
                        bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=MOVEMENT.MovKind ");
                        bld.AppendFormat(" WHERE ad.AD_TypeId={0} ", pAD_TypeId);
                        bld.AppendFormat(" AND al.LabKind=1  AND al.LabID={0} ", pLabID);//#AND al.LabProgId=25 
                        bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
                        if (pProgramid != 2599)
                        {
                            bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
                        }
                        break;
                    case 4:
                        bld.Append(" JOIN ANIMAL_AFWIJKING ON ANIMAL_AFWIJKING.AA_ID = ad.AD_Unique_Id ");
                        bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = ANIMAL_AFWIJKING.AniId ");
                        bld.Append(" LEFT JOIN agrofactuur.THIRD th ON th.ThrId = ad.ThrID ");
                        bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=ANIMAL_AFWIJKING.AfwijkingID  ");
                        bld.AppendFormat(" WHERE ad.AD_TypeId={0} ", pAD_TypeId);
                        bld.AppendFormat(" AND al.LabKind=150 AND al.LabProgId=25  AND al.LabID={0} ", pLabID);
                        bld.AppendFormat(" AND (ad.ThrID={0} OR ad.AD_Public=1) ", pThrId);
                        if (pProgramid != 2599)
                        {
                            bld.AppendFormat("  AND ANIMAL.ThrId={0} ", pThrId);
                        }
                        break;
                }

                bld.Append(" ORDER BY INS DESC ");

                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "discussion", MissingSchemaAction.Add);

            }
            return tbl;


        }

        public DataTable getAnimalDiscussionsByAnimalAndThrId(int pThrId, int pAniId)
        {

            DataTable lResult = new DataTable();
            if (pThrId > 0 && pAniId > 0)
            {
                //AD_Unique_Id Vast ID voor aan te geven welke tabel. 
                //Eigenlijk in AGRO_LABELS.labkind = .. --> 1 = ANIMALID, 
                //                                          2 = EVENTID, 
                //                                          3 = MOVEMENTID, 
                //                                          4 = AFWIJKING_ID

                StringBuilder bld = new StringBuilder();
                bld.Append(" SELECT ad.*,ANIMAL.ThrId AS Fokker, 1 AS Soort, 'Algemeen' AS Naam   FROM ANIMAL_DISCUSSION ad ");
                bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = ad.AD_Unique_Id ");
                bld.Append(" WHERE ad.AD_TypeId=1 ");
                bld.AppendFormat(" AND ad.AD_Unique_Id={0} ", pAniId);
                bld.AppendFormat(" AND ( ad.ThrID={0}  OR  ad.AD_Public=1 ) ", pThrId);
                bld.Append(" UNION ");
                bld.Append(" SELECT ad.*,ANIMAL.ThrId AS Fokker, 2 AS Soort, al.LabLabel AS Naam  FROM ANIMAL_DISCUSSION ad ");
                bld.Append(" JOIN EVENT ON EVENT.EventId = ad.AD_Unique_Id ");
                bld.Append(" JOIN STATUS ON STATUS.EventId = EVENT.EventId ");
                bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = EVENT.AniId ");
                bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=STATUS.Status  ");
                bld.Append(" WHERE ad.AD_TypeId=2 ");
                bld.AppendFormat(" AND EVENT.AniId={0} ", pAniId);
                bld.Append(" AND al.LabKind=81 AND al.LabProgId=25 ");
                bld.AppendFormat(" AND ( ad.ThrID={0}  OR  ad.AD_Public=1 ) ", pThrId);
                bld.Append(" UNION ");
                bld.Append(" SELECT ad.*,ANIMAL.ThrId AS Fokker, 3 AS Soort, al.LabLabel AS Naam  FROM ANIMAL_DISCUSSION ad ");
                bld.Append(" JOIN MOVEMENT ON MOVEMENT.MovId = ad.AD_Unique_Id ");
                bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = MOVEMENT.AniId ");
                bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=MOVEMENT.MovKind ");
                bld.Append(" WHERE ad.AD_TypeId=3 ");
                bld.AppendFormat(" AND MOVEMENT.AniId={0} ", pAniId);
                bld.Append(" AND al.LabKind=1 ");
                bld.AppendFormat(" AND ( ad.ThrID={0}  OR  ad.AD_Public=1 ) ", pThrId);
                bld.Append(" UNION ");
                bld.Append(" SELECT ad.*,ANIMAL.ThrId AS Fokker, 4 AS Soort, al.LabLabel AS Naam  FROM ANIMAL_DISCUSSION ad ");
                bld.Append(" JOIN ANIMAL_AFWIJKING ON ANIMAL_AFWIJKING.AA_ID = ad.AD_Unique_Id ");
                bld.Append(" JOIN ANIMAL ON ANIMAL.AniId = ANIMAL_AFWIJKING.AniId ");
                bld.Append(" JOIN agrofactuur.AGRO_LABELS al  ON al.LabId=ANIMAL_AFWIJKING.AfwijkingID  ");
                bld.Append(" WHERE ad.AD_TypeId=4 ");
                bld.AppendFormat(" AND ANIMAL_AFWIJKING.AniId={0} ", pAniId);
                bld.Append(" AND al.LabKind=150 AND al.LabProgId=25 ");
                bld.AppendFormat(" AND ( ad.ThrID={0}  OR  ad.AD_Public=1 ) ", pThrId);
                DataSet ds = new DataSet();
                lResult = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "discussion", MissingSchemaAction.Add);

            }
            return lResult;


        }

        public bool saveAnimalDiscussion(ANIMAL_DISCUSSION pAnimalDiscussion)
        {
            try
            {
                if (WriteActions.SaveObject(pAnimalDiscussion) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool deleteAnimalDiscussion(ANIMAL_DISCUSSION pAnimalDiscussion)
        {

            // DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalDiscussion);
            String[] DeleteParams = new String[]
             {
                "AD_ThreadID",
                "AD_TypeID",
                "AD_Unique_ID",
                "ThrID",
                "INS"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAnimalDiscussion, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalDiscussion, mDatabase.CreateDeleteCommandText(pAnimalDiscussion, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public DataTable searchVBKChipnummers(string pChipnummer, int pLike, int pProgramid)
        {
            DataTable dierentable = new DataTable();
            if (pChipnummer != "")
            {
                StringBuilder sqlwhere = new StringBuilder();

                sqlwhere.Append(" SELECT cs.cs_Chipnr, 1 AS Vbk  , cb.cb_Barcode AS Dooscode ,");
                sqlwhere.Append(" cs.cs_sale_date  ,");
                sqlwhere.Append(" t.ThrSecondname AS Fokker ");
                sqlwhere.Append(" FROM chip_supplier.CHIP_STOCK cs ");
                sqlwhere.Append(" JOIN chip_supplier.CHIP_BOX cb ON cb.cb_Box_ID = cs.cb_Box_ID ");
                sqlwhere.Append(" JOIN agrofactuur.THIRD t ON t.ThrId=cs.cs_breeder_Thrid ");

                if (pLike == 1)
                {
                    sqlwhere.Append(" WHERE ( cs.cs_Chipnr LIKE '%" + pChipnummer + "%' ) ");
                }
                else if (pLike == 2)
                {
                    sqlwhere.Append(" WHERE ( cs.cs_Chipnr LIKE '%" + pChipnummer + "' ) ");
                }
                else
                {
                    sqlwhere.Append(" WHERE ( cs.cs_Chipnr LIKE '" + pChipnummer + "%' ) ");

                }
                sqlwhere.Append(" UNION ");

                sqlwhere.Append(" SELECT a.AniLifeNumber AS cs_Chipnr,0 AS Vbk ,'' AS Dooscode  , ");
                sqlwhere.Append(" MAKEDATE(0,0)  AS cs_sale_date, ");
                sqlwhere.Append(" t.ThrSecondname AS Fokker ");
                sqlwhere.Append(" FROM ANIMAL  a  ");
                sqlwhere.Append(" LEFT JOIN chip_supplier.CHIP_STOCK ON chip_supplier.CHIP_STOCK.cs_Chipnr=a.AniLifeNumber ");
                sqlwhere.Append(" LEFT JOIN agrofactuur.THIRD t ON t.ThrId=a.Thrid  ");
                sqlwhere.Append(" JOIN ANIMALPASSWORD ON ANIMALPASSWORD.AP_AniID =a.AniId ");
                sqlwhere.Append("    WHERE NOT a.AniLifeNumber IN  (SELECT DISTINCT(chip_supplier.CHIP_STOCK.cs_Chipnr) FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_breeder_Thrid>0 ) ");
                sqlwhere.AppendFormat("  AND (ANIMALPASSWORD.AP_ProgramID={0} OR ISNULL(ANIMALPASSWORD.AP_ProgramID))", pProgramid);
                if (pLike == 1)
                {
                    sqlwhere.Append(" AND ( a.AniLifeNumber LIKE '%" + pChipnummer + "%' ) ");
                }
                else if (pLike == 2)
                {
                    sqlwhere.Append(" AND ( a.AniLifeNumber LIKE '%" + pChipnummer + "' ) ");
                }
                else
                {
                    sqlwhere.Append(" AND ( a.AniLifeNumber LIKE '" + pChipnummer + "%' ) ");

                }

                //////////////////////////////////
                sqlwhere.Append(" UNION ");
                sqlwhere.Append(" SELECT CONCAT(LIFENR.LifCountrycode,LIFENR.LifLifenr) AS cs_Chipnr,0 AS Vbk ,'' AS Dooscode  , ");
                sqlwhere.Append(" MAKEDATE(0,0)  AS cs_sale_date, ");
                sqlwhere.Append(" t.ThrSecondname AS Fokker ");
                sqlwhere.Append(" FROM LIFENR  ");
                sqlwhere.Append(" LEFT JOIN agrofactuur.THIRD t ON t.ThrId=LIFENR.owner_ThrID  ");
                sqlwhere.Append("    WHERE NOT CONCAT(LIFENR.LifCountrycode,LIFENR.LifLifenr) IN  (SELECT DISTINCT(chip_supplier.CHIP_STOCK.cs_Chipnr) FROM chip_supplier.CHIP_STOCK) ");
                sqlwhere.Append("  AND LIFENR.Program IN (2550,2551,2570,2599) ");
                if (pLike == 1)
                {
                    sqlwhere.Append(" AND ( CONCAT(LIFENR.LifCountrycode,LIFENR.LifLifenr) LIKE '%" + pChipnummer + "%' ) ");
                }
                else if (pLike == 2)
                {
                    sqlwhere.Append(" AND ( CONCAT(LIFENR.LifCountrycode,LIFENR.LifLifenr) LIKE '%" + pChipnummer + "' ) ");
                }
                else
                {
                    sqlwhere.Append(" AND ( CONCAT(LIFENR.LifCountrycode,LIFENR.LifLifenr) LIKE '" + pChipnummer + "%' ) ");

                }

                DataSet ds = new DataSet();
                dierentable = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwhere, "dieren", MissingSchemaAction.Add);
                //
            }
            return dierentable;
        }

        public int getMaxMutaLogInternalNumber()
        {
            int ret = 0;
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("  SELECT MAX(Internalnr) AS Internalnr FROM MUTALOG ");
            DataSet ds = new DataSet();
            DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "Internalnr", MissingSchemaAction.Add);
            if (ltbl.Rows.Count > 0)
            {
                if (ltbl.Rows[0][0] != DBNull.Value)
                {
                    int.TryParse(ltbl.Rows[0][0].ToString(), out ret);
                }
            }
            return ret;
        }

        public THIRD getChipper(string pChipnummer, out EVENT pChipEvent)
        {
            pChipEvent = new EVENT();
            THIRD lChipper = new THIRD();
            if (pChipnummer != null)
            {
                pChipnummer = pChipnummer.Trim();
                if (pChipnummer.Length > 5)
                {
                    StringBuilder lQuery = new StringBuilder();
                    //lQuery.Append(" SELECT agrofactuur.THIRD.*,EVENT.* FROM agrofactuur.THIRD ");
                    //lQuery.Append(" JOIN EVENT ON EVENT.ThirdId=agrofactuur.THIRD.ThrId ");
                    //lQuery.Append(" JOIN ANIMAL ON ANIMAL.AniId=EVENT.AniId ");
                    //lQuery.AppendFormat(" WHERE ANIMAL.AniAlternateNumber='{0}' AND ANIMAL.AniId>0 ", pChipnummer);
                    //lQuery.Append(" AND EVENT.EveKind=15 AND EVENT.EventId>0 ");
                    //lQuery.Append(" ORDER BY EVENT.EveDate DESC ");
                    //Ik heb het EVENT ook nodig als de chipperThrId 0 is
                    lQuery.Append(" SELECT EVENT.*, agrofactuur.THIRD.* FROM EVENT  ");
                    lQuery.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=EVENT.ThirdId  ");
                    lQuery.Append("  JOIN ANIMAL ON ANIMAL.AniId=EVENT.AniId  ");
                    lQuery.AppendFormat("  WHERE ANIMAL.AniLifeNumber='{0}' AND ANIMAL.AniId>0  ", pChipnummer);
                    lQuery.Append("  AND EVENT.EveKind=15 AND EVENT.EventId>0  ");
                    lQuery.Append("  ORDER BY EVENT.EveDate DESC ");

                    DataSet ds = new DataSet();
                    DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "Chippen", MissingSchemaAction.Add);
                    if (ltbl.Rows.Count > 0)
                    {
                        mDatabase.FillObject(pChipEvent, ltbl.Rows[0]);
                        if (pChipEvent.ThirdId > 0)
                        {
                            mDatabase.FillObject(lChipper, ltbl.Rows[0]);
                        }

                    }
                    if (lChipper.ThrCountry.Trim() == "")
                    {
                        lChipper.ThrCountry = "151";
                    }

                }
            }
            return lChipper;
        }

        public DataTable getChipnumberInfo(string pChipnummer, int pProgramId)
        {
            List<int> vbk = new List<int>() { 2500, 2550, 2551, 2570, 2599 };
            List<int> virbac = new List<int>() { 2501, 2521, 2571, 2598 };
            int programid;
            if (vbk.Contains(pProgramId))
            {
                programid = 2500;
            }
            else
            {
                programid = 2501;
            }

            System.Text.RegularExpressions.Regex r = new System.Text.RegularExpressions.Regex(@"^\d{15}$");
            System.Text.RegularExpressions.Match mn = r.Match(pChipnummer);
            if (!mn.Success)
            {
                unLogger.WriteError(" DBMAsterQueries getChipnumberInfo(string pChipnummer, int pProgramId) verkeerd chipnummer " + pChipnummer);
                return new DataTable();
            }


            string sqlwherestr = @"                             SELECT 'Fokker' AS t,a.ThrId AS derde, a.*,tr.*                 
                             ,(
                             SELECT MAX(MOVEMENT.MovDate) FROM MOVEMENT
                             WHERE MOVEMENT.AniId = a.AniId AND MOVEMENT.MovKind = 3 AND MOVEMENT.MovId > 0
                             )AS AniDead
                             FROM ANIMAL a
                             LEFT JOIN agrofactuur.THIRD tr ON tr.ThrId = a.ThrId

                             WHERE a.AniLifeNumber = '" + pChipnummer + @"'

                             UNION

                             SELECT   'Chipkoper' AS t, cs.cs_breeder_thrid AS derde, a.*,tr.*
                             ,(
                             SELECT MAX(MOVEMENT.MovDate) FROM MOVEMENT
                             WHERE MOVEMENT.AniId = a.AniId AND MOVEMENT.MovKind = 3 AND MOVEMENT.MovId > 0
                             )AS AniDead
                             FROM ANIMAL a
                              RIGHT JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_Chipnr = a.AniLifeNumber
                             LEFT JOIN agrofactuur.THIRD tr ON tr.ThrId = cs.cs_breeder_thrid
                             WHERE cs.cs_Chipnr = '" + pChipnummer + @"'

                             UNION

                             SELECT   'Eigenaar' AS t, ap.AP_ThrID AS derde, a.*,tr.*
                             ,(
                             SELECT MAX(MOVEMENT.MovDate) FROM MOVEMENT
                             WHERE MOVEMENT.AniId = a.AniId AND MOVEMENT.MovKind = 3 AND MOVEMENT.MovId > 0
                             )AS AniDead
                             FROM ANIMAL a
                             JOIN ANIMALPASSWORD ap ON ap.AP_AniID = a.AniId AND ap.AP_ProgramID = " + programid.ToString() + @"
                             LEFT JOIN agrofactuur.THIRD tr ON tr.ThrId = ap.AP_ThrID

                             WHERE a.AniLifeNumber = '" + pChipnummer + @"'

                             UNION

                             SELECT 'Chipverkoper' AS t, cs.cs_supplier_thrid AS derde, a.*,tr.*
                              , NOW() AS AniDead
                             FROM ANIMAL a
                              RIGHT JOIN chip_supplier.CHIP_STOCK cs ON cs.cs_Chipnr = a.AniLifeNumber
                             LEFT JOIN agrofactuur.THIRD tr ON tr.ThrId = cs.cs_supplier_thrid

                              WHERE cs.cs_Chipnr = '" + pChipnummer + @"'";
            StringBuilder sqlwhere = new StringBuilder(sqlwherestr);
            DataSet ds = new DataSet();
            DataTable diertable = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwhere, "dieren", MissingSchemaAction.Add);
            return diertable;
        }

        public List<ANIMAL> getKennelhouderAnimals(int pKennelHouderThrId)
        {
            /*
                SELECT DISTINCT(a.AniId), a.*,
                (
                SELECT MAX(MOVEMENT.MovTime) FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId=270677

                ) AS MaxDate,
                (
                SELECT MOVEMENT.MovKind FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId=270677
                AND MOVEMENT.MovTime=MaxDate

                ) AS MovKind,
                'Fokker' AS Soort,
                (SELECT cs_supplier_thrid FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_chipnr=a.AniLifeNumber ) AS cs_supplier_thrid
                 FROM ANIMAL a 
           
                WHERE a.ThrId=270677

                UNION 

                SELECT DISTINCT(a.AniId), a.* ,

                (
                SELECT MAX(MOVEMENT.MovTime) FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId=270677

                ) AS MaxDate,
                (
                SELECT MOVEMENT.MovKind FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId=270677
                AND MOVEMENT.MovTime=MaxDate

                ) AS MovKind,
                'Aanvoer' AS Soort,
                (SELECT cs_supplier_thrid FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_chipnr=a.AniLifeNumber ) AS cs_supplier_thrid
                FROM ANIMAL a 
                JOIN MOVEMENT ON MOVEMENT.AniId=a.AniId
                WHERE  MOVEMENT.ThrId=270677 
                AND NOT a.ThrId=270677 

             UNION

                SELECT DISTINCT(a.AniId), a.*, 
                (
                SELECT MAX(EVENT.EveDate) FROM EVENT WHERE EVENT.AniId=a.AniId AND  EVENT.ThirdId=270677 AND  EVENT.EveKind=15 
                ) AS MaxDate,
                15 AS MovKind,
                'Chipper' AS Soort,
				(SELECT cs_supplier_thrid FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_chipnr=a.AniLifeNumber ) AS cs_supplier_thrid
                 FROM ANIMAL a
                JOIN EVENT ON EVENT.AniId=a.AniId 
                JOIN MOVEMENT ON MOVEMENT.AniId=a.AniId
                WHERE EVENT.EveKind=15 
                AND EVENT.ThirdId=270677 
                AND NOT a.ThrId=270677 
                AND NOT MOVEMENT.ThrId=270677
                ORDER BY AniBirthDate DESC , AniLifeNumber
             */
            StringBuilder sqlwhere = new StringBuilder();

            //sqlwhere.Append(" SELECT DISTINCT(a.AniId), a.*, ");
            //sqlwhere.Append(" ( ");
            //sqlwhere.AppendFormat(" SELECT MAX(MOVEMENT.MovTime) FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.Append(" ) AS MaxDate, ");
            //sqlwhere.Append(" ( ");
            //sqlwhere.AppendFormat(" SELECT MOVEMENT.MovKind FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.Append(" AND MOVEMENT.MovTime=MaxDate ");
            //sqlwhere.Append("  ) AS MovKind, ");
            //sqlwhere.Append(" 'Fokker' AS Soort, ");
            //sqlwhere.Append(" (SELECT cs_supplier_thrid FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_chipnr=a.AniLifeNumber ) AS cs_supplier_thrid ");
            //sqlwhere.Append(" FROM ANIMAL a ");
            //sqlwhere.AppendFormat(" WHERE a.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.AppendFormat(" HAVING  ISNULL(MovKind) ");
            //sqlwhere.Append(" UNION  ");

            //sqlwhere.Append(" SELECT DISTINCT(a.AniId), a.* , ");
            //sqlwhere.Append(" ( ");
            //sqlwhere.AppendFormat(" SELECT MAX(MOVEMENT.MovTime) FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.Append(" ) AS MaxDate, ");
            //sqlwhere.Append(" ( ");
            //sqlwhere.AppendFormat(" SELECT MOVEMENT.MovKind FROM MOVEMENT WHERE MOVEMENT.AniId=a.AniId AND  MOVEMENT.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.Append(" AND MOVEMENT.MovTime=MaxDate ");
            //sqlwhere.Append(" ) AS MovKind, ");
            //sqlwhere.Append(" 'Aanvoer' AS Soort, ");
            //sqlwhere.Append(" (SELECT cs_supplier_thrid FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_chipnr=a.AniLifeNumber ) AS cs_supplier_thrid ");
            //sqlwhere.Append(" FROM ANIMAL a ");
            //sqlwhere.Append(" JOIN MOVEMENT ON MOVEMENT.AniId=a.AniId ");

            //sqlwhere.AppendFormat(" WHERE MOVEMENT.ThrId={0} ", pKennelHouderThrId);

            //sqlwhere.AppendFormat(" AND NOT a.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.AppendFormat(" HAVING  NOT MovKind IN (2,3) ");


            //sqlwhere.Append("    UNION ");

            //sqlwhere.Append("SELECT DISTINCT(a.AniId), a.*,  ");
            //sqlwhere.Append("( ");
            //sqlwhere.Append("                SELECT MAX(EVENT.EveDate) FROM EVENT WHERE EVENT.AniId=a.AniId AND  EVENT.ThirdId=270677 AND  EVENT.EveKind=15  ");

            //sqlwhere.Append("              ) AS MaxDate, ");
            //sqlwhere.Append("              15 AS MovKind, ");
            //sqlwhere.Append("             'Chipper' AS Soort, ");
            //sqlwhere.Append("			(SELECT cs_supplier_thrid FROM chip_supplier.CHIP_STOCK WHERE chip_supplier.CHIP_STOCK.cs_chipnr=a.AniLifeNumber ) AS cs_supplier_thrid ");
            //sqlwhere.Append("              FROM ANIMAL a ");
            //sqlwhere.Append("             JOIN EVENT ON EVENT.AniId=a.AniId  ");
            //sqlwhere.Append("         JOIN MOVEMENT ON MOVEMENT.AniId=a.AniId ");
            //sqlwhere.Append("            WHERE EVENT.EveKind=15  ");
            //sqlwhere.AppendFormat("           AND EVENT.ThirdId={0} ", pKennelHouderThrId);
            //sqlwhere.AppendFormat("  AND NOT a.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.AppendFormat("  AND NOT MOVEMENT.ThrId={0} ", pKennelHouderThrId);
            //sqlwhere.Append(" ORDER BY AniBirthDate DESC , AniLifeNumber ");
            sqlwhere.AppendFormat(@"
SELECT DISTINCT
    A.*
FROM
    ANIMAL A
    LEFT JOIN ANIMALPASSWORD AP ON AP.AP_AniID=A.AniId
WHERE
    A.ThrId={0} AND A.AniId>0
    AND AP.AP_Password_DateTime != '2014-10-01 00:00:00'

UNION DISTINCT
SELECT
    A.*
FROM
    ANIMAL A
    LEFT JOIN ANIMALPASSWORD AP ON AP.AP_AniID=A.AniId
    JOIN MOVEMENT M ON M.AniId=A.AniId
WHERE
    A.AniId>0
    #AND AP.AP_Password_DateTime != '2014-10-01 00:00:00'
    AND M.ThrId={0}
", pKennelHouderThrId);



            //sqlwhere.Append("    UNION DISTINCT ");
            //sqlwhere.Append(" SELECT a.*  ");
            //sqlwhere.Append(" FROM ANIMAL a ");
            //sqlwhere.Append(" JOIN EVENT ON EVENT.AniId=a.AniId ");
            //sqlwhere.AppendFormat(" WHERE EVENT.ThirdId ={0} ", pKennelHouderThrId);
            //sqlwhere.Append(" AND EVENT.EveKind=15 ");
            DataSet ds = new DataSet();
            DataTable diertable = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwhere, "dieren", MissingSchemaAction.Add);
            List<ANIMAL> kenneldieren = new List<ANIMAL>();
            foreach (DataRow rw in diertable.Rows)
            {
                ANIMAL ani = new ANIMAL();
                if (mDatabase.FillObject(ani, rw))
                {
                    kenneldieren.Add(ani);
                }
            }
            return kenneldieren;
        }

        public List<ANIMAL> getKennelhouderAnimalsAanwezig(int pKennelHouderThrId)
        {
            /*
                #aangevoerd , import, gevonden
                SELECT m.MovKind,m.MovDate,m.MovTime, a.* FROM ANIMAL a
                JOIN MOVEMENT m ON m.AniId=a.AniId
                WHERE m.ThrId = 270677
                AND a.AniId>0 
                AND m.MovDate = (SELECT MAX(MovDate) FROM MOVEMENT m2 WHERE m2.Thrid=m.ThrId AND m2.AniId=m.AniId )
                AND m.MovKind IN (1,4,7,8,10,11)#aanwezigheids Kinds

                UNION
                #geboren

                SELECT m.MovKind,m.MovDate,m.MovTime, a.* FROM ANIMAL a
                LEFT JOIN MOVEMENT m ON m.AniId=a.AniId
                WHERE a.ThrId = 270677
                AND a.AniId>0 
                AND (ISNULL(m.MovKind))#want anders zitten ze hierboven
             */
            StringBuilder sqlwhere = new StringBuilder();


            sqlwhere.Append(" SELECT m.MovKind,m.MovDate,m.MovTime, a.*  ");
            sqlwhere.Append(" FROM ANIMAL a ");
            sqlwhere.Append(" JOIN MOVEMENT m ON m.AniId=a.AniId ");
            sqlwhere.AppendFormat(" WHERE m.ThrId = {0} ", pKennelHouderThrId);
            sqlwhere.Append(" AND a.AniId>0 AND m.MovId>0  ");
            sqlwhere.Append(" AND m.MovDate = (SELECT MAX(MovDate) FROM MOVEMENT m2 WHERE m2.Thrid=m.ThrId AND m2.AniId=m.AniId AND m2.MovId>0  ) ");
            sqlwhere.Append(" AND m.MovKind IN (1,4,7,8,10,11) ");
            sqlwhere.Append("    UNION ");

            sqlwhere.Append(" SELECT m.MovKind,m.MovDate,m.MovTime, a.*  ");
            sqlwhere.Append(" FROM ANIMAL a ");
            sqlwhere.Append(" LEFT JOIN MOVEMENT m ON m.AniId=a.AniId ");
            sqlwhere.AppendFormat(" WHERE a.ThrId = {0} ", pKennelHouderThrId);
            sqlwhere.Append(" AND a.AniId>0 ");
            sqlwhere.Append(" AND (ISNULL(m.MovKind)) ");
            DataSet ds = new DataSet();
            DataTable diertable = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwhere, "dieren", MissingSchemaAction.Add);
            List<ANIMAL> aanwezigekenneldieren = new List<ANIMAL>();
            foreach (DataRow rw in diertable.Rows)
            {
                ANIMAL ani = new ANIMAL();
                if (mDatabase.FillObject(ani, rw))
                {
                    aanwezigekenneldieren.Add(ani);
                }
            }
            return aanwezigekenneldieren;
        }


        public DataTable getChippedOverview(int AdminUbnId, int pChipperThrId, int pProgramID)
        {
            DataTable gechipttable = new DataTable();
            if (pChipperThrId > 0)
            {
                StringBuilder sqlwhere = new StringBuilder();

                sqlwhere.Append(" SELECT EVENT.EventId, EVENT.UBNId, EVENT.ThirdId ,EVENT.EveDate,agrofactuur.THIRD.ThrId AS Owner,agrofactuur.THIRD.ThrSecondName,agrofactuur.THIRD.ThrCity, agrofactuur.THIRD.ThrEmail ,ANIMAL.* FROM ANIMAL ");
                sqlwhere.Append(" JOIN EVENT ON EVENT.AniId=ANIMAL.AniId ");
                sqlwhere.Append(" LEFT JOIN ANIMALPASSWORD ap ON ap.AP_AniID=ANIMAL.AniId ");
                sqlwhere.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId = ap.AP_ThrID ");
                sqlwhere.Append(" WHERE EVENT.EveKind=15 ");
                if (pProgramID == 2571 || pProgramID == 2598)
                {
                    sqlwhere.AppendFormat(" AND EVENT.UBNId={0} ", AdminUbnId);
                }
                else
                {
                    sqlwhere.AppendFormat(" AND (EVENT.UBNId={0} OR ISNULL(EVENT.UBNId) OR EVENT.UBNId=0)", AdminUbnId);
                }
                sqlwhere.AppendFormat(" AND EVENT.ThirdId={0} ", pChipperThrId);
                sqlwhere.Append(" ORDER BY ANIMAL.AniLifeNumber,EVENT.EventId, EVENT.EveDate DESC ");


                DataSet ds = new DataSet();
                gechipttable = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwhere, "chipdieren", MissingSchemaAction.Add);

            }
            return gechipttable;
        }

        public List<MOVEMENT> GetMovementsByThrIdKind(int pThrId, int pMovKind)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE ThrId = " + pThrId.ToString() + " AND MovKind= " + pMovKind.ToString() + "  AND MOVEMENT.MovId>0  ORDER BY MovDate");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }

        public int getDogCount(int pProgramId)
        {
            int ret = 0;
            if (pProgramId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append("  SELECT COUNT(DISTINCT(AP_AniID)) FROM ANIMALPASSWORD ");
                if (pProgramId == 2500)
                {
                    lQuery.Append("  WHERE ( ISNULL(ANIMALPASSWORD.AP_ProgramID) OR ANIMALPASSWORD.AP_ProgramID=0 OR ANIMALPASSWORD.AP_ProgramID=2500) ");
                }
                else
                {
                    lQuery.AppendFormat("  WHERE ANIMALPASSWORD.AP_ProgramID={0}  ", pProgramId);

                }
                DataSet ds = new DataSet();
                DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "dogcount", MissingSchemaAction.Add);
                if (ltbl.Rows.Count > 0)
                {
                    if (ltbl.Rows[0][0] != DBNull.Value)
                    {
                        int.TryParse(ltbl.Rows[0][0].ToString(), out ret);
                    }
                }
            }
            return ret;
        }

        public double getCreditMutatieAantal(int pAdmisID, int pFarmid)
        {
            double MutatieAantal = 0;
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("   SELECT CREDITS.cr_Mutatieaantal FROM CREDITS ");
            if (pFarmid > 0)
            {
                lQuery.AppendFormat("  WHERE   CREDITS.FarmID={0} ", pFarmid);
            }
            else if (pAdmisID > 0)
            {
                lQuery.AppendFormat("  WHERE CREDITS.AdmisID={0}   ", pAdmisID);
            }
            else
            {
                return 0;
            }

            DataSet ds = new DataSet();
            DataTable ltbl = mDatabase.QueryData(mToken, ds, lQuery, "CreditMutatieAantal", MissingSchemaAction.Add);
            if (ltbl.Rows.Count > 0)
            {
                if (ltbl.Rows[0][0] != DBNull.Value)
                {
                    if (ltbl.Rows[0][0].ToString() != "")
                    {
                        double.TryParse(ltbl.Rows[0][0].ToString(), out MutatieAantal);
                    }
                }
            }
            return MutatieAantal;
        }

        public bool setCreditMutatieAantal(int pAdmisID, int pFarmid, double pMutatieaantal)
        {
            try
            {
                if (pAdmisID > 0 || pFarmid > 0)
                {
                    StringBuilder lQuery = new StringBuilder();
                    lQuery.Append("   SELECT * FROM CREDITS ");
                    if (pFarmid > 0)
                    {
                        lQuery.AppendFormat("  WHERE   CREDITS.FarmID={0} ", pFarmid);
                    }
                    else if (pAdmisID > 0)
                    {
                        lQuery.AppendFormat("  WHERE CREDITS.AdmisID={0}   ", pAdmisID);
                    }
                    //lQuery.AppendFormat("  WHERE CREDITS.AdmisID={0} AND CREDITS.FarmID={1} ", pAdmisID, pFarmid);
                    DataSet ds = new DataSet();
                    DataTable ltbl = mDatabase.QueryData(mToken, ds, lQuery, "CreditMutatieAantal", MissingSchemaAction.Add);
                    //DbCommand cmd = mDatabase.CreateCommand(mToken);
                    String CommandText;
                    if (ltbl.Rows.Count > 0)
                    {
                        StringBuilder lQueryUpdate = new StringBuilder();
                        lQueryUpdate.Append("   UPDATE  CREDITS  ");
                        lQueryUpdate.AppendFormat("   SET CREDITS.cr_Mutatieaantal={0}  ", pMutatieaantal);
                        if (pFarmid > 0)
                        {
                            lQueryUpdate.AppendFormat("  WHERE   CREDITS.FarmID={0} ", pFarmid);
                        }
                        else if (pAdmisID > 0)
                        {
                            lQueryUpdate.AppendFormat("  WHERE CREDITS.AdmisID={0}   ", pAdmisID);
                        }
                        CommandText = lQueryUpdate.ToString();
                    }
                    else
                    {
                        StringBuilder lQueryInsert = new StringBuilder();
                        lQueryInsert.Append("   INSERT INTO  CREDITS ");
                        lQueryInsert.Append("   (AdmisID,FarmID,cr_Mutatieaantal) ");
                        if (pFarmid > 0)
                        {
                            lQueryInsert.AppendFormat("  VALUES ({0},{1},{2}) ", 0, pFarmid, pMutatieaantal);
                        }
                        else if (pAdmisID > 0)
                        {
                            lQueryInsert.AppendFormat("  VALUES ({0},{1},{2}) ", pAdmisID, 0, pMutatieaantal);
                        }

                        CommandText = lQueryInsert.ToString();

                    }


                    return mDatabase.ExecuteNonQuery(mToken, CommandText) == 1;
                }
                else { return false; }
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("setCreditMutatieAantal", ex);
                return false;
            }
        }

        public DataTable getChipTotalOverzicht(int AdminUbnID, List<int> pProgramids)
        {
            //TODO Ubnid IN Query verwerken
            DataTable gechipttable = new DataTable();
            if (pProgramids.Count() > 0)
            {
                StringBuilder sqlwhere = new StringBuilder();

                sqlwhere.Append(" SELECT ANIMAL.AniLifeNumber,ANIMAL.AniSpecies,agrofactuur.ADMINISTRATIE.ProgramID AS ProgramID, EVENT.*, t1.* FROM EVENT ");
                sqlwhere.Append(" JOIN agrofactuur.ADMINISTRATIE ON agrofactuur.ADMINISTRATIE.ThrID=EVENT.ThirdId  ");
                sqlwhere.Append(" JOIN agrofactuur.THIRD t1 ON t1.THrID= agrofactuur.ADMINISTRATIE.ThrID ");
                sqlwhere.Append(" JOIN ANIMAL ON ANIMAL.AniId=EVENT.AniId ");
                sqlwhere.Append(" WHERE ");
                sqlwhere.Append(" EVENT.EveKind=15 ");
                sqlwhere.Append(" AND agrofactuur.ADMINISTRATIE.ProgramID IN (" + string.Join(",",pProgramids) + ") ");

                sqlwhere.Append(" UNION ");

                sqlwhere.Append(" SELECT  ANIMAL.AniLifeNumber,ANIMAL.AniSpecies,agrofactuur.BEDRIJF.ProgramID AS ProgramID, EVENT.*, t2.* FROM EVENT ");
                sqlwhere.Append(" JOIN agrofactuur.UBN ON agrofactuur.UBN.ThrID =EVENT.ThirdID ");
                sqlwhere.Append(" JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.UbnId=agrofactuur.UBN.UBNid ");
                sqlwhere.Append(" JOIN agrofactuur.THIRD t2 ON t2.THrID= agrofactuur.UBN.ThrID ");
                sqlwhere.Append(" JOIN ANIMAL ON ANIMAL.AniId=EVENT.AniId ");
                sqlwhere.Append(" WHERE ");
                sqlwhere.Append(" EVENT.EveKind=15 ");
                sqlwhere.Append(" AND agrofactuur.BEDRIJF.ProgramID IN (" + string.Join(",", pProgramids) + ")  ");



                DataSet ds = new DataSet();
                gechipttable = mDatabase.QueryData(mToken.getLastChildConnection(), ds, sqlwhere, "chipdieren", MissingSchemaAction.Add);

            }
            return gechipttable;
        }

        #endregion

        public List<EVENT> getEventsByDateAniIdKindUbn(DateTime lDatum, int AniId, int Evkind, int UBNid)
        {
            /*
             * GetEventsbyDateAniIdKindUbn
                BEGIN
	                SELECT * 
	                FROM EVENT
	                WHERE EVENT.EveDate = EveDate
	                AND EVENT.AniId = AniId
	                AND EVENT.EveKind = EveKind
	                AND EVENT.UBNId = UBNId;
                END
             */

            List<EVENT> lResultValue = new List<EVENT>();


            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "GetEventsbyDateAniIdKindUbn";
            //cmd.CommandText = "SELECT * " +
            //        " FROM EVENT" +
            //        " WHERE EVENT.EveDate = EveDate" +
            //        " AND EVENT.AniId = AniId " +
            //        " AND EVENT.EveKind = EveKind " +
            //        " AND EVENT.UBNId = UBNId;";
            //mDatabase.AddParameter(cmd, "EveDate", lDatum);
            //mDatabase.AddParameter(cmd, "AniId", AniId);
            //mDatabase.AddParameter(cmd, "EveKind", Evkind);
            //mDatabase.AddParameter(cmd, "UBNId", UBNid);

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0}", AniId);
            lQuery.AppendFormat(" AND EveKind = {0} AND EVENT.EventId>0 ", Evkind);
            lQuery.AppendFormat(" AND (UBNId={0} OR UBNId=0) ", UBNid);
            lQuery.Append(" AND date_format(EveDate,'%Y-%m-%d') = '" + lDatum.ToString("yyyy-MM-dd") + "'");



            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        public List<EVENT> getEventsByDateAniIdKind(DateTime lDatum, int AniId, int Evkind)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0}", AniId);
            lQuery.AppendFormat(" AND EveKind = {0}  AND EVENT.EventId>0 ", Evkind);
            lQuery.Append(" AND date_format(EveDate,'%Y-%m-%d') = '" + lDatum.ToString("yyyy-MM-dd") + "'");

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        public List<EVENT> getEventsByAniIdKindUbn(int AniId, int Evkind, int UBNid)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0} AND EveKind = {1} AND (UBNId={2} OR UBNId=0)  AND EventId>0  ORDER BY EveDate", AniId, Evkind, UBNid);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }
        public List<EVENT> getEventsByAniIdKind(int pAniId, int pEvkind)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT ");
            lQuery.AppendFormat(" WHERE AniId = {0} AND EveKind = {1}  AND EventId>0  ORDER BY EveDate", pAniId, pEvkind);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }
        public List<EVENT> getEventsByAniId(int pAniId)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0}  AND EventId>0  ORDER BY EveDate", pAniId);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        public List<EVENT> getEventsByKindUbn(int Evkind, int UBNid)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE  EveKind = {0} AND UBNId = {1}  AND EventId>0  ORDER BY EveDate", Evkind, UBNid);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }
        public List<EVENT> getEventsByAniIdUbn(int pAniId, int pUBNid)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0} AND  UBNId = {1}  AND EventId>0  ORDER BY EveDate DESC", pAniId, pUBNid);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }


        public List<EVENT> getEventsByAniIdUbn(int pAniId, int pUBNid, DateTime EveMutationDate)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT EVENT.* FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0} AND  UBNId = {1} AND EveMutationDate >= '{2}' AND EventId>0  ORDER BY EveDate DESC", pAniId, pUBNid, EveMutationDate.ToString("yyyy-MM-dd"));

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }
        public List<EVENT> getEventsByUbn(int pUBNid)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM EVENT");
            lQuery.AppendFormat(" WHERE  UBNId = {0}  AND EventId>0  ORDER BY EveDate DESC", pUBNid);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }
        public List<EVENT> getEventsByAniIdUbnNSFO(int pAniId, int pUBNid)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT DISTINCT * FROM EVENT");
            lQuery.AppendFormat(" WHERE AniId = {0} AND  UBNId = {1}  AND EventId>0  ORDER BY EveDate DESC", pAniId, pUBNid);

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        public bool eventExists(int AniId, DateTime date, VSM.RUMA.CORE.DB.LABELSConst.EventKind eveKind)
        {
            StringBuilder qry = new StringBuilder(String.Format(
                        "SELECT * FROM EVENT "
                        + "WHERE AniId = {0} "
                        + "AND Date(EveDate) = Date('{1}') "
                        + "AND EveKind = {2}",
                        AniId, MySQL_Datum(date, 1), (int)eveKind));
            EVENT e = getSingleItem<EVENT>(mToken.getLastChildConnection(), qry);
            return (e != null);
        }

        public List<EVENT> getEventsByFarmId(int pFarmId)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  EVENT.* FROM EVENT");
            lQuery.Append(" INNER JOIN ANIMAL");
            lQuery.Append(" ON ANIMAL.AniId = EVENT.AniId");
            lQuery.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lQuery.AppendFormat("WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lQuery.Append(" AND ANIMALCATEGORY.AniCategory IN (1,2,3) AND EVENT.EventId>0 ");
            lQuery.Append(" ORDER BY EveDate DESC");


            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }
        public List<EVENT> GetEventsByFarmId(int pFarmId, VSM.RUMA.CORE.DB.LABELSConst.EventKind pEventKind)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  EVENT.* FROM EVENT");
            lQuery.Append(" INNER JOIN ANIMAL");
            lQuery.Append(" ON ANIMAL.AniId = EVENT.AniId");
            lQuery.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lQuery.AppendFormat("WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lQuery.Append(" AND ANIMALCATEGORY.AniCategory IN (1,2,3)  AND EVENT.EventId>0  ");

            lQuery.AppendFormat(" AND EveKind = {0} ", (int)pEventKind);

            lQuery.Append(" ORDER BY EveDate DESC");


            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        public List<EVENT> getEventsByFarmId(int pFarmId, int pMaxAniCategory)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  EVENT.* FROM EVENT");
            lQuery.Append(" INNER JOIN ANIMAL");
            lQuery.Append(" ON ANIMAL.AniId = EVENT.AniId");
            lQuery.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lQuery.AppendFormat(" WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lQuery.AppendFormat(" AND ANIMALCATEGORY.AniCategory <= {0}  AND EVENT.EventId>0 ", pMaxAniCategory);

            lQuery.Append(" ORDER BY EveDate DESC");


            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }


        public List<EVENT> getEventsByFarmId(int pFarmId, int pMaxAniCategory, DateTime MinMutationDate)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  EVENT.* FROM EVENT");
            lQuery.Append(" INNER JOIN ANIMAL");
            lQuery.Append(" ON ANIMAL.AniId = EVENT.AniId");
            lQuery.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId=ANIMALCATEGORY.AniId ");
            lQuery.AppendFormat(" WHERE ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lQuery.AppendFormat(" AND ANIMALCATEGORY.AniCategory <= {0} ", pMaxAniCategory);
            lQuery.AppendFormat(" AND EveMutationDate >= '{0}' AND EventId>0 ", MinMutationDate.ToString("yyyy-MM-dd"));
            lQuery.Append(" ORDER BY EveDate DESC");
            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        public List<EVENT> getUnreportedHeatsByFarmId(int pFarmId, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization pReport)
        {
            // ML 06-10-2020 - Als het event vanuit de source agrobase in is gekomen, niet teruggeven.
            // ML 02-03-2021 - Nooit events melden van dieren die nooit op je bedrijf hebben gestaan, of events die niet van je bedrijf zijn.
            // Copy van getUnreportedEventsByFarmId
            // ML 01-01-2021 - Dit specifiek voor tocht, ook niet terug geven wanneer INHEAT.ReportDate gevuld

            List<EVENT> lResultValue = new List<EVENT>();

            string qry = $@"
                SELECT ev.* 
                FROM EVENT ev
                INNER JOIN ANIMAL an ON an.AniId = ev.AniId
                INNER JOIN ANIMALCATEGORY ac ON an.AniId=ac.AniId AND ac.Anicategory < 5 AND ac.UbnId = ev.UBNId                
                LEFT OUTER JOIN REPORT_INFORMATION ri ON ev.EventId = ri.EventID AND ri.RI_To = {(int)pReport}
                LEFT JOIN REPORT_INFORMATION riFromSelf ON ev.EventId = riFromSelf.EventId AND riFromSelf.RI_From = {(int)pReport} AND riFromSelf.RI_To = 0
                LEFT JOIN INHEAT ih ON ev.EventId = ih.EventId
                WHERE ac.FarmId = {pFarmId}
                AND ev.EveKind = 1
                AND EveMutationDate >= '{DateTime.Today.AddDays(-7).ToString("yyyy-MM-dd")}'
                AND ev.EventId>0 
                AND ISNULL(ri.RI_ReportDate)
                AND ISNULL(ih.ReportDate)
                AND ISNULL(riFromSelf.RI_ReportDate)
                AND (ev.EveMutationBy IN (29,42) OR ISNULL(ev.EveMutationBy))                
                ORDER BY ev.EveDate DESC";

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }

        /// <summary>
        /// Gets the unreported events by farm identifier.
        /// </summary>
        /// <param name="pFarmId">The p farm identifier.</param>
        /// <param name="pEventKind">Kind of the p event.</param>
        /// <param name="pReport">The p report.</param>
        /// <returns></returns>
        public List<EVENT> getUnreportedEventsByFarmId(int pFarmId, VSM.RUMA.CORE.DB.LABELSConst.EventKind pEventKind, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization pReport)
        {
            // ML 06-10-2020 - Als het event vanuit de source agrobase in is gekomen, niet teruggeven.
            // ML 02-03-2021 - Nooit events melden van dieren die nooit op je bedrijf hebben gestaan, of events die niet van je bedrijf zijn.
            // Voor heats gebruik getUnreportedHeatsByFarmId
            List<EVENT> lResultValue = new List<EVENT>();

            string qry = $@"
                SELECT ev.* 
                FROM EVENT ev
                INNER JOIN ANIMAL an ON an.AniId = ev.AniId
                INNER JOIN ANIMALCATEGORY ac ON an.AniId=ac.AniId AND ac.Anicategory < 5 AND ac.UbnId = ev.UBNId                
                LEFT OUTER JOIN REPORT_INFORMATION ri ON ev.EventId = ri.EventID AND ri.RI_To = {(int)pReport}
                LEFT JOIN REPORT_INFORMATION riFromSelf ON ev.EventId = riFromSelf.EventId AND riFromSelf.RI_From = {(int)pReport} AND riFromSelf.RI_To = 0
                WHERE ac.FarmId = {pFarmId}
                AND ev.EveKind = {(int)pEventKind}
                AND EveMutationDate >= '{DateTime.Today.AddDays(-7).ToString("yyyy-MM-dd")}'
                AND ev.EventId>0 
                AND ISNULL(ri.RI_ReportDate)
                AND ISNULL(riFromSelf.RI_ReportDate)
                AND (ev.EveMutationBy IN (29,42) OR ISNULL(ev.EveMutationBy))                
                ORDER BY ev.EveDate DESC";

            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }


        public List<EVENT> GetUnreportedEventsByUbnId(int ubnId, LABELSConst.EventKind eveKind, LABELSConst.ReportOrganization report)
        {
            List<EVENT> lResultValue = new List<EVENT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ev.* FROM EVENT ev");
            lQuery.Append(" INNER JOIN ANIMAL an");
            lQuery.Append(" ON an.AniId = ev.AniId");
            lQuery.Append(" INNER JOIN ANIMALCATEGORY ac ON an.AniId=ac.AniId");
            lQuery.Append(" LEFT OUTER JOIN REPORT_INFORMATION ri");
            lQuery.Append(" ON ev.EventId = ri.EventID");
            lQuery.AppendFormat(" AND ri.RI_To = {0} ", (int)report);
            lQuery.AppendFormat(" WHERE ac.UbnId = {0} ", ubnId);
            lQuery.AppendFormat(" AND ev.EveKind = {0} ", (int)eveKind);
            lQuery.AppendFormat(" AND EveMutationDate >= '{0}' ", DateTime.Today.AddDays(-7).ToString("yyyy-MM-dd"));
            lQuery.Append(" AND ev.EventId>0 AND ISNULL(ri.RI_ReportDate)");
            lQuery.Append(" AND (ev.EveMutationBy IN (29,42) OR ISNULL(ev.EveMutationBy))");
            lQuery.Append(" ORDER BY ev.EveDate DESC");
            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drEvent in dtEvents.Rows)
            {
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }

            return lResultValue;
        }


        public DataTable getWorpenMothers(int pFarmId, int pMinDays)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ANIMAL.AniId , ANIMAL.AniLifeNumber , ANIMAL.AniBirthDate,ANIMALCATEGORY.AniWorknumber, ");
            lQuery.Append(" EVENT.EventId,EVENT.EveDate,EVENT.EveKind, ");
            lQuery.Append(" BIRTH.AniFatherID AS BIRTHAniFatherID,BIRTH.CalfId,BIRTH.BornDead,BIRTH.InsPMSG AS BIRTHInsPMSG, ");
            lQuery.Append(" INSEMIN.AniIdFather AS INSEMINAniIdFather ,INSEMIN.InsPMSG AS INSEMINInsPMSG, ");
            lQuery.Append(" GRZTOGTH.AniIdFather AS GRZTOGTHAniIdFather, GRZTOGTH.EndDate, ");
            lQuery.Append(" calf.AniSex AS calfAniSex,calf.AniLifeNumber AS calfAniLifeNumber ");
            lQuery.Append(" FROM ANIMAL ");
            lQuery.Append(" INNER JOIN ANIMALCATEGORY ON ANIMAL.AniId = ANIMALCATEGORY.AniId ");
            lQuery.Append(" LEFT JOIN EVENT ON EVENT.AniId=ANIMAL.AniId ");
            lQuery.Append(" LEFT JOIN BIRTH ON BIRTH.EventId=EVENT.EventId ");
            lQuery.Append(" LEFT JOIN INSEMIN ON INSEMIN.EventId=EVENT.EventId ");
            lQuery.Append(" LEFT JOIN GRZTOGTH ON GRZTOGTH.EventId=EVENT.EventId ");
            lQuery.Append(" LEFT JOIN ANIMAL calf ON calf.AniId=BIRTH.CalfId ");
            lQuery.AppendFormat(" WHERE ANIMAL.AniSex = 2 AND DATE_ADD(ANIMAL.AniBirthDate,INTERVAL {0} DAY)  < CURDATE() ", pMinDays);
            lQuery.AppendFormat(" AND ANIMALCATEGORY.FarmId = {0} ", pFarmId);
            lQuery.Append(" AND (ANIMALCATEGORY.AniCategory>0 AND ANIMALCATEGORY.AniCategory<4) ORDER BY   ANIMALCATEGORY.AniWorknumber ");
            System.Data.DataTable dtWorpenMothers = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            return dtWorpenMothers;
        }

        public FTPLIST GetFtpListByFtpnumber(int pFtpnumber)
        {
            FTPLIST lftp = new FTPLIST();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM FTPLIST");
            lQuery.AppendFormat(" WHERE Ftpnumber = {0}", pFtpnumber);
            mDatabase.FillObject(mToken, lftp, lQuery);
            return lftp;
        }
        public FTPUSER GetFtpuser(int pUbnId, int pFtpnumber)
        {

            FTPUSER lftp = new FTPUSER();

            //unLogger.WriteInfo(" GetFtpuser start "); Veroorzaakt vertraging
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  *  FROM FTPUSER ");
            lQuery.AppendFormat(" WHERE Ftpnumber = {0} and UbnId = {1} ", pFtpnumber, pUbnId);
            DBConnectionToken bb = mToken.getLastChildConnection();
            //unLogger.WriteInfo(" mToken.getLastChildConnection()");
            mDatabase.FillObject(bb, lftp, lQuery);
            //unLogger.WriteInfo(" FillObject ");
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.DecryptFtpUser(ref lftp);
            //unLogger.WriteInfo(" Decrypt GetFtpuser eind ");
            return lftp;
        }
        public FTPUSER GetFtpuser(int pUbnId, int pProgramId, int pProgID, int pFtpnumber)
        {
            string pBrsNummer = "";
            return GetFtpuser(pUbnId, pProgramId, pProgID, pFtpnumber, out pBrsNummer);
        }
        public FTPUSER GetFtpuser(int pUbnId, int pProgramId, int pProgID, int pFtpnumber, out string pBrsNummer)
        {

            FTPUSER lftp = new FTPUSER();

            //unLogger.WriteInfo(" GetFtpuser start "); Veroorzaakt vertraging
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  *  FROM FTPUSER ");
            lQuery.AppendFormat(" WHERE Ftpnumber = {0} and UbnId = {1} ", pFtpnumber, pUbnId);
            DBConnectionToken bb = mToken.getLastChildConnection();
            //unLogger.WriteInfo(" mToken.getLastChildConnection()");
            mDatabase.FillObject(bb, lftp, lQuery);
            //unLogger.WriteInfo(" FillObject ");
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.DecryptFtpUser(ref lftp);
            //unLogger.WriteInfo(" Decrypt GetFtpuser eind ");
            //zie BUG 2039 
            if (pFtpnumber == 9992)
            {
                if (utils.isRietveld(pProgramId))
                {
                   
                    List<PROGRAMCONFIG> pvals = getProgramConfigs(60);
                    var user = from n in pvals
                               where n.FKey == "LNV2IRCredidentialsUserName"
                               select n;
                    if (user.Count() > 0)
                    {
                        lftp.UserName = user.ElementAt(0).FValue;
                    }
                    var pwuser = from n in pvals
                                 where n.FKey == "LNV2IRCredidentialsPassword"
                                 select n;
                    if (pwuser.Count() > 0)
                    {
                        lftp.Password = pwuser.ElementAt(0).FValue;
                    }
                }
                else
                {
                    if (lftp.UserName == string.Empty.Trim() || lftp.Password.Trim() == string.Empty)
                    {
                        string lUserName = "";
                        string lPassword = "";

                        GetProgramConfigsAdminCredentials(pProgramId, out lUserName, out lPassword, out pBrsNummer);
                        if (lUserName != "" && lPassword != "")
                        {
                            lftp.Password = lPassword;
                            lftp.UserName = lUserName;
                            return lftp;
                        }
                    }
                }
            }
            pBrsNummer = "";
            return lftp;
        }
        public ANIMALPASSWORD GetAnimalPassword(int pAP_AniId, int pAP_ThrID, int pProgramId)
        {
            ANIMALPASSWORD lAnPw = new ANIMALPASSWORD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");
            lQuery.AppendFormat(" WHERE AP_AniId = {0} AND AP_ThrID = {1} ", pAP_AniId, pAP_ThrID);
            if (pProgramId > 0)
            {
                if (pProgramId == 2500)
                {
                    lQuery.AppendFormat(" AND (AP_ProgramID = {0} OR AP_ProgramID = 0 OR ISNULL(AP_ProgramID) ) ", pProgramId);
                }
                else
                {
                    lQuery.AppendFormat(" AND AP_ProgramID = {0} ", pProgramId);
                }
            }
            DBConnectionToken bb = mToken.getLastChildConnection();
            mDatabase.FillObject(bb, lAnPw, lQuery);
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.DecryptAnimalPassword(ref lAnPw);
            return lAnPw;
        }
        //public ANIMALPASSWORD GetAnimalPasswordByUserNameAndPassword(string pAP_UserName, string pAP_Password)
        //{
        //    ANIMALPASSWORD lAnPw = new ANIMALPASSWORD();
        //    lAnPw.AP_UserName = pAP_UserName;
        //    lAnPw.AP_Password = pAP_Password;
        //    SettingsDecrypter Decrypt = new SettingsDecrypter();
        //    Decrypt.EncryptAnimalPassword(ref lAnPw);
        //    StringBuilder lQuery = new StringBuilder();
        //    lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");
        //    lQuery.Append(" WHERE AP_UserName = '" + lAnPw.AP_UserName + "' AND AP_Password = '" + lAnPw.AP_Password + "'");
        //    lQuery.Append(" AND AP_AniID>0 AND AP_ThrID>0 ");
        //    DBConnectionToken bb = mToken.getLastChildConnection();
        //    lAnPw = new ANIMALPASSWORD();
        //    mDatabase.FillObject(bb, lAnPw, lQuery);
        //    Decrypt.DecryptAnimalPassword(ref lAnPw);
        //    return lAnPw;
        //}
        public ANIMALPASSWORD GetAnimalPasswordByUserNameAndPassword(string pAP_UserName, string pAP_Password, int pProgramId)
        {
            pAP_UserName = pAP_UserName.Trim();
            pAP_Password = pAP_Password.Trim();
            ANIMALPASSWORD lAnPw = new ANIMALPASSWORD();
            lAnPw.AP_UserName = pAP_UserName;
            lAnPw.AP_Password = pAP_Password;
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.EncryptAnimalPassword(ref lAnPw);


            using (System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
            {
                MySql.Data.MySqlClient.MySqlParameter pm1 = new MySql.Data.MySqlClient.MySqlParameter();
                pm1.ParameterName = "?AP_UserName";
                pm1.Value = lAnPw.AP_UserName;
                cmd.Parameters.Add(pm1);
                MySql.Data.MySqlClient.MySqlParameter pm2 = new MySql.Data.MySqlClient.MySqlParameter();
                pm2.ParameterName = "?AP_Password";
                pm2.Value = lAnPw.AP_Password;
                cmd.Parameters.Add(pm2);

                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");

                lQuery.Append(" WHERE AP_UserName = ?AP_UserName AND AP_Password = ?AP_Password");
                if (pProgramId > 0)
                {
                    if (pProgramId == 2500)
                    {
                        lQuery.AppendFormat(" AND (AP_ProgramID = {0} OR AP_ProgramID = 0 OR ISNULL(AP_ProgramID) ) ", pProgramId);
                    }
                    else
                    {
                        lQuery.AppendFormat(" AND AP_ProgramID = {0} ", pProgramId);
                    }
                }
                //lQuery.Append(" AND AP_AniID>0 AND AP_ThrID>0 ");
                // als er een nieuw account wordt aangemaakt, maar er wordt direct uitgelogd zonder een dier toe te voegen, moet deze wel kunnen inloggen !!!
                lQuery.Append(" AND AP_ThrID>0 ");

                cmd.CommandText = lQuery.ToString();

                DBConnectionToken bb = mToken.getLastChildConnection();
                lAnPw = new ANIMALPASSWORD();
                mDatabase.FillObject(bb, lAnPw, cmd);
                Decrypt.DecryptAnimalPassword(ref lAnPw);
                cmd.Connection.Dispose();
            }
            return lAnPw;
        }









        public List<ANIMALPASSWORD> GetAnimalPasswordsByUserNameAndProgramId(string pAP_UserName, int pProgramId)
        {
            List<ANIMALPASSWORD> lAnPw = new List<ANIMALPASSWORD>();
            ANIMALPASSWORD anipas = new ANIMALPASSWORD();
            anipas.AP_UserName = pAP_UserName;
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            StringBuilder lQuery = new StringBuilder();


            using (System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
            {
                MySql.Data.MySqlClient.MySqlParameter pm1 = new MySql.Data.MySqlClient.MySqlParameter();
                pm1.ParameterName = "?AP_UserName";
                pm1.Value = anipas.AP_UserName;
                cmd.Parameters.Add(pm1);


                lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");
                lQuery.Append(" WHERE AP_UserName = ?AP_UserName ");
                if (pProgramId > 0)
                {
                    if (pProgramId == 2500)
                    {
                        lQuery.AppendFormat(" AND (AP_ProgramID = {0} OR AP_ProgramID = 0 OR ISNULL(AP_ProgramID) ) ", pProgramId);
                    }
                    else
                    {
                        lQuery.AppendFormat(" AND AP_ProgramID = {0} ", pProgramId);
                    }
                }
                lQuery.Append(" ORDER BY AP_Password_DateTime ");
                cmd.CommandText = lQuery.ToString();
                System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), cmd);
                foreach (DataRow drUser in dt.Rows)
                {
                    ANIMALPASSWORD fu = new ANIMALPASSWORD();
                    if (mDatabase.FillObject(fu, drUser))
                    {
                        Decrypt.DecryptAnimalPassword(ref fu);
                        lAnPw.Add(fu);
                    }
                }
                cmd.Connection.Dispose();
            }
            return lAnPw;
        }












        public List<ANIMALPASSWORD> GetAnimalPasswordsByUserNameAndPasswordAndProgramId(string pAP_UserName, string pAP_Password, int pProgramId)
        {
            List<ANIMALPASSWORD> lAnPw = new List<ANIMALPASSWORD>();
            ANIMALPASSWORD anipas = new ANIMALPASSWORD();
            anipas.AP_UserName = pAP_UserName;
            anipas.AP_Password = pAP_Password;
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.EncryptAnimalPassword(ref anipas);

            using (System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
            {
                MySql.Data.MySqlClient.MySqlParameter pm1 = new MySql.Data.MySqlClient.MySqlParameter();
                pm1.ParameterName = "?AP_UserName";
                pm1.Value = anipas.AP_UserName;
                cmd.Parameters.Add(pm1);
                MySql.Data.MySqlClient.MySqlParameter pm2 = new MySql.Data.MySqlClient.MySqlParameter();
                pm2.ParameterName = "?AP_Password";
                pm2.Value = anipas.AP_Password;
                cmd.Parameters.Add(pm2);

                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");
                lQuery.Append(" WHERE AP_UserName = ?AP_UserName AND AP_Password = ?AP_Password ");
                if (pProgramId > 0)
                {
                    if (pProgramId == 2500)
                    {
                        lQuery.AppendFormat(" AND (AP_ProgramID = {0} OR AP_ProgramID = 0 OR ISNULL(AP_ProgramID) ) ", pProgramId);
                    }
                    else
                    {
                        lQuery.AppendFormat(" AND AP_ProgramID = {0} ", pProgramId);
                    }
                }
                lQuery.Append(" ORDER BY AP_Password_DateTime ");
                cmd.CommandText = lQuery.ToString();
                System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), cmd);
                cmd.Connection.Dispose();
                foreach (DataRow drUser in dt.Rows)
                {
                    ANIMALPASSWORD fu = new ANIMALPASSWORD();
                    if (mDatabase.FillObject(fu, drUser))
                    {
                        Decrypt.DecryptAnimalPassword(ref fu);
                        lAnPw.Add(fu);
                    }
                }
            }

            return lAnPw;
        }
        public List<ANIMALPASSWORD> GetAnimalPasswordsByEmailadresAndProgramId(string pEmailadres, int pProgramId)
        {
            List<ANIMALPASSWORD> lAnPw = new List<ANIMALPASSWORD>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT AP.* FROM ANIMALPASSWORD as AP, agrofactuur.THIRD AS TH ");
            lQuery.Append(" WHERE TH.ThrEmail='" + pEmailadres + "' && TH.ThrId=AP.AP_ThrID ");
            if (pProgramId > 0)
            {
                if (pProgramId == 2500)
                {
                    lQuery.AppendFormat(" AND (AP.AP_ProgramID = {0} OR AP.AP_ProgramID = 0 OR ISNULL(AP.AP_ProgramID) ) ", pProgramId);
                }
                else
                {
                    lQuery.AppendFormat(" AND AP.AP_ProgramID = {0} ", pProgramId);
                }
            }
            lQuery.Append(" ORDER BY AP.AP_Password_DateTime ");
            System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            foreach (DataRow drUser in dt.Rows)
            {
                ANIMALPASSWORD fu = new ANIMALPASSWORD();
                if (mDatabase.FillObject(fu, drUser))
                {
                    Decrypt.DecryptAnimalPassword(ref fu);
                    lAnPw.Add(fu);
                }
            }
            return lAnPw;
        }

























        public List<ANIMALPASSWORD> GetAnimalPasswordsByAniId(int pAp_AniId)
        {
            List<ANIMALPASSWORD> lAnPwds = new List<ANIMALPASSWORD>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");
            lQuery.AppendFormat(" WHERE AP_AniId = {0} ", pAp_AniId);
            lQuery.Append(" AND AP_AniID>0 AND AP_ThrID>0 ");
            System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            foreach (DataRow drUser in dt.Rows)
            {
                ANIMALPASSWORD fu = new ANIMALPASSWORD();
                if (mDatabase.FillObject(fu, drUser))
                {
                    Decrypt.DecryptAnimalPassword(ref fu);
                    lAnPwds.Add(fu);
                }
            }

            return lAnPwds;
        }
        public List<ANIMALPASSWORD> GetAnimalPasswordsByThrID(int pAP_ThrID, int pProgramId)
        {
            List<ANIMALPASSWORD> lAnPwds = new List<ANIMALPASSWORD>();
            if (pAP_ThrID > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT  *  FROM ANIMALPASSWORD ");
                lQuery.AppendFormat(" WHERE AP_ThrID = {0} ", pAP_ThrID);
                if (pProgramId > 0)
                {
                    if (pProgramId == 2500)
                    {
                        lQuery.AppendFormat(" AND (AP_ProgramID = {0} OR AP_ProgramID = 0 OR ISNULL(AP_ProgramID) ) ", pProgramId);
                    }
                    else
                    {
                        lQuery.AppendFormat(" AND AP_ProgramID = {0} ", pProgramId);
                    }
                }
                System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                SettingsDecrypter Decrypt = new SettingsDecrypter();
                foreach (DataRow drUser in dt.Rows)
                {
                    ANIMALPASSWORD fu = new ANIMALPASSWORD();
                    if (mDatabase.FillObject(fu, drUser))
                    {
                        Decrypt.DecryptAnimalPassword(ref fu);
                        lAnPwds.Add(fu);
                    }
                }
            }
            return lAnPwds;
        }

        public List<FTPUSER> GetFtpusers(int pUbnId, List<int> pFtpnumbers)
        {
            List<FTPUSER> lUsers = new List<FTPUSER>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT  *  FROM FTPUSER ");
            lQuery.AppendFormat(" WHERE  UbnId = {0} ", pUbnId);
            lQuery.AppendFormat(" AND  Ftpnumber IN ({0}) ", intListToString(pFtpnumbers));
            System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            foreach (DataRow drUser in dt.Rows)
            {
                FTPUSER fu = new FTPUSER();
                if (mDatabase.FillObject(fu, drUser))
                {
                    Decrypt.DecryptFtpUser(ref fu);
                    lUsers.Add(fu);
                }
            }
            return lUsers;
        }

        public THIRD_LOGIN GetThirdLogin(int ThrID, int ThrSoort)
        {
            return GetThirdLogin(0, 0, ThrID, 0, 0, ThrSoort);
        }

        public THIRD_LOGIN GetThirdLogin(int farmId, int ubnId, int ThrID, int thkDescriptionId, int programId, int ThrSoort)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(
                "SELECT *" +
                " FROM THIRD_LOGIN" +
                " WHERE farmId=" + farmId.ToString() +
                " AND ubnId=" + ubnId.ToString() +
                " AND ThrID=" + ThrID.ToString() +
                " AND thkDescriptionId=" + thkDescriptionId.ToString() +
                " AND programId=" + programId.ToString() +
                " AND ThrSoort=" + ThrSoort.ToString()
            );

            THIRD_LOGIN lftp = new THIRD_LOGIN();
            mDatabase.FillObject(mToken, lftp, lQuery);

            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.DecryptThirdLogin(ref lftp);

            return lftp;
        }

        public THIRD_LOGIN_TYPE GetThirdLoginType(int pThrID, string pThr_IP_Adress)
        {
            THIRD_LOGIN_TYPE lftp = new THIRD_LOGIN_TYPE();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD_LOGIN_TYPE ");
            lQuery.AppendFormat(" WHERE ThrID = {0} and Thr_IP_Adress = {1}", pThrID, pThr_IP_Adress);
            mDatabase.FillObject(mToken, lftp, lQuery);
            return lftp;
        }

        public List<THIRD_LOGIN_TYPE> GetThirdLoginTypeByThrID(int pThrID)
        {
            List<THIRD_LOGIN_TYPE> lResultValue = new List<THIRD_LOGIN_TYPE>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD_LOGIN_TYPE ");
            lQuery.AppendFormat(" WHERE ThrID = {0} ", pThrID);
            System.Data.DataTable dtTLTypes = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow drEvent in dtTLTypes.Rows)
            {
                THIRD_LOGIN_TYPE ev = new THIRD_LOGIN_TYPE();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }
            return lResultValue;
        }

        public List<THIRD_LOGIN_TYPE> GetThirdLoginTypeByIP_Adress(string pThr_IP_Adress)
        {
            List<THIRD_LOGIN_TYPE> lResultValue = new List<THIRD_LOGIN_TYPE>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD_LOGIN_TYPE ");
            lQuery.AppendFormat(" WHERE Thr_IP_Adress =  '{0}' ", pThr_IP_Adress);
            System.Data.DataTable dtTLTypes = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow drEvent in dtTLTypes.Rows)
            {
                THIRD_LOGIN_TYPE ev = new THIRD_LOGIN_TYPE();
                if (mDatabase.FillObject(ev, drEvent))
                {
                    lResultValue.Add(ev);
                }
            }
            return lResultValue;
        }

        private string addleadingzero(string getal)
        {
            if (getal.Length == 1)
            { getal = "0" + getal; }
            return getal;
        }

        public ADMINISTRATIE getAdminByAdmisId(int pAdmisId)
        {
            ADMINISTRATIE lAdmin = new ADMINISTRATIE();
            StringBuilder QRY_Administratie = new StringBuilder();
            QRY_Administratie.Append(" SELECT ADMINISTRATIE.* ");
            QRY_Administratie.Append(" FROM ADMINISTRATIE");
            QRY_Administratie.AppendFormat(" WHERE ADMINISTRATIE.AdmisID = {0} ", pAdmisId);
            mDatabase.FillObject(mToken, lAdmin, QRY_Administratie);
            return lAdmin;
        }
        public ADMINISTRATIE getAdminByThrId(int pThrId)
        {
            ADMINISTRATIE lAdmin = new ADMINISTRATIE();
            StringBuilder QRY_Administratie = new StringBuilder();
            QRY_Administratie.Append(" SELECT ADMINISTRATIE.* ");
            QRY_Administratie.Append(" FROM ADMINISTRATIE");
            QRY_Administratie.AppendFormat(" WHERE ADMINISTRATIE.ThrId = {0} ", pThrId);
            mDatabase.FillObject(mToken, lAdmin, QRY_Administratie);
            return lAdmin;
        }
        public ADMINISTRATIE getAdminByProgramIdAdmisName(int pProgramId, string pAdmisName)
        {
            ADMINISTRATIE lAdmin = new ADMINISTRATIE();
            StringBuilder QRY_Administratie = new StringBuilder();
            QRY_Administratie.Append(" SELECT ADMINISTRATIE.* ");
            QRY_Administratie.Append(" FROM ADMINISTRATIE");
            QRY_Administratie.AppendFormat(" WHERE ADMINISTRATIE.ProgramID = {0} AND ADMINISTRATIE.Ad_AdmisName = '{1}' ", pProgramId, pAdmisName);
            mDatabase.FillObject(mToken, lAdmin, QRY_Administratie);
            return lAdmin;
        }
        public List<ADMINISTRATIE> getAdminsByThrId(int pThrId)
        {
            StringBuilder QRY_Administratie = new StringBuilder();
            QRY_Administratie.AppendFormat(" SELECT * FROM ADMINISTRATIE ");
            QRY_Administratie.AppendFormat(" WHERE ThrID = {0} ", pThrId);

            DataTable tbl = mDatabase.QueryData(mToken, QRY_Administratie);
            List<ADMINISTRATIE> listAdmin = new List<ADMINISTRATIE>();
            foreach (DataRow dr in tbl.Rows)
            {
                ADMINISTRATIE lAdmin = new ADMINISTRATIE();
                if (mDatabase.FillObject(lAdmin, dr))
                {
                    listAdmin.Add(lAdmin);
                }
            }
            return listAdmin;
        }

        public DISEASE GetDisease(int AniId, int EventID)
        {
            DISEASE lftp = new DISEASE();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM DISEASE");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lftp, lQuery);
            return lftp;
        }
        public BIRTH GetBirth(int EventID)
        {
            BIRTH lbirth = new BIRTH();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BIRTH");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lbirth, lQuery);
            return lbirth;
        }
        public BIRTH GetBirthByCalfId(int pCalfId)
        {
            BIRTH lbirth = new BIRTH();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BIRTH");
            lQuery.AppendFormat(" WHERE CalfId = {0} AND EventId>0 ", pCalfId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lbirth, lQuery);
            return lbirth;
        }
        public List<BIRTH> GetBirthsByFather(int pFatherAniId, out List<EVENT> pEvents)
        {
            List<BIRTH> lResultValue = new List<BIRTH>();
            pEvents = new List<EVENT>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT b.*,e.* FROM BIRTH b");
            lQuery.Append(" JOIN EVENT e using(EventId) ");
            lQuery.AppendFormat(" WHERE b.AniFatherID = {0} AND e.EventId>0 ", pFatherAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            List<BIRTH> lResultList = new List<BIRTH>();
            foreach (DataRow dr in tbl.Rows)
            {
                BIRTH b = new BIRTH();
                if (mDatabase.FillObject(b, dr))
                {
                    lResultList.Add(b);
                }
                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, dr))
                {
                    pEvents.Add(ev);
                }
            }
            return lResultList;
        }
        public List<BIRTH> GetBirthsByAnimal(int pAniId)
        {
            List<BIRTH> lResultValue = new List<BIRTH>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT b.* FROM BIRTH b");
            lQuery.Append(" JOIN EVENT e using(EventId) ");
            lQuery.AppendFormat(" WHERE e.AniId = {0} AND e.EventId>0 ", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            List<BIRTH> lResultList = new List<BIRTH>();
            foreach (DataRow dr in tbl.Rows)
            {
                BIRTH b = new BIRTH();
                if (mDatabase.FillObject(b, dr))
                {
                    lResultList.Add(b);
                }
            }
            return lResultList;
        }
        public List<BIRTH> GetBirthsByUbnID(int pUbnID)
        {
            List<BIRTH> lResultValue = new List<BIRTH>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT b.* FROM BIRTH b");
            lQuery.Append(" JOIN EVENT e using(EventId) ");
            lQuery.AppendFormat(" WHERE e.UbnId = {0} AND e.EventId>0 ", pUbnID);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            List<BIRTH> lResultList = new List<BIRTH>();
            foreach (DataRow dr in tbl.Rows)
            {
                BIRTH b = new BIRTH();
                if (mDatabase.FillObject(b, dr))
                {
                    lResultList.Add(b);
                }
            }
            return lResultList;
        }
        public BLOOD GetBlood(int EventID)
        {
            BLOOD lbloed = new BLOOD();

            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT * FROM BLOOD");

            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lbloed, lQuery);
            return lbloed;
        }
        public BLOOD GetBlood(int EventID, int pProgId)
        {
            BLOOD lbloed = new BLOOD();

            StringBuilder lQuery = new StringBuilder();
            if (pProgId == 3 || pProgId == 5)
            {
                if (pProgId == 3)
                {
                    lQuery.Append(" SELECT * FROM agrobase_sheep.BLOOD");
                }
                else if (pProgId == 5)
                {
                    lQuery.Append(" SELECT * FROM agrobase_goat.BLOOD");
                }
            }
            else
            {
                lQuery.Append(" SELECT * FROM BLOOD");
            }
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lbloed, lQuery);
            return lbloed;
        }

        public BLOOD_RESEARCH GetBloodResearch(int BR_File_ID)
        {
            BLOOD_RESEARCH br = new BLOOD_RESEARCH();

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT * FROM agrofactuur.BLOOD_RESEARCH WHERE BR_File_ID=" + BR_File_ID.ToString());

            mDatabase.FillObject(mToken, br, sb);
            return br;
        }

        public BLOOD_RESEARCH_DETAIL GetBloodResearchDetail(int BRD_BloID)
        {
            BLOOD_RESEARCH_DETAIL brd = new BLOOD_RESEARCH_DETAIL();

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT * FROM agrofactuur.BLOOD_RESEARCH_DETAIL WHERE BRD_BloID=" + BRD_BloID.ToString());

            mDatabase.FillObject(mToken, brd, sb);
            return brd;
        }
        public WEAN GetWean(int pEventId)
        {
            WEAN lftp = new WEAN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM WEAN");
            lQuery.AppendFormat(" WHERE EventId = {0}", pEventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lftp, lQuery);
            return lftp;
        }
        public BULLUBN GetBullUbn(int FarmId, int pAniId)
        {
            BULLUBN lbullie = new BULLUBN();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BULLUBN");
            lQuery.AppendFormat(" WHERE FarmId = {0} and BullId = {1}", FarmId, pAniId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lbullie, lQuery);
            return lbullie;
        }
        public List<BULLUBN> GetBullUbnList(int FarmId)
        {
            List<BULLUBN> lResultValue = new List<BULLUBN>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BULLUBN");
            lQuery.AppendFormat(" WHERE FarmId = {0}", FarmId);
            System.Data.DataTable dtBullubns = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drBullubns in dtBullubns.Rows)
            {
                BULLUBN lBullubn = new BULLUBN();
                if (mDatabase.FillObject(lBullubn, drBullubns))
                {
                    lResultValue.Add(lBullubn);
                }
            }
            return lResultValue;
        }
        public List<BULLUBN> GetBullUbnListByAniID(int pAniId)
        {
            List<BULLUBN> lResultValue = new List<BULLUBN>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BULLUBN");
            lQuery.AppendFormat(" WHERE BullId = {0} AND FarmId > 0", pAniId);
            System.Data.DataTable dtBullubns = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drBullubns in dtBullubns.Rows)
            {
                BULLUBN lBullubn = new BULLUBN();
                if (mDatabase.FillObject(lBullubn, drBullubns))
                {
                    lResultValue.Add(lBullubn);
                }
            }
            return lResultValue;
        }
        public BUYING GetBuying(int MovId)
        {
            BUYING lPur = new BUYING();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BUYING");
            lQuery.AppendFormat(" WHERE MovId = {0}", MovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lPur, lQuery);
            return lPur;
        }
        public DHZ GetDHZById(int InternalId)
        {
            DHZ lDHZ = new DHZ();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM DHZ");
            lQuery.AppendFormat(" WHERE Internalnr = {0} ", InternalId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lDHZ, lQuery);
            return lDHZ;

        }
        public DHZ GetDHZByEventId(int EventId)
        {
            DHZ lDHZ = new DHZ();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM DHZ");
            lQuery.AppendFormat(" WHERE EventID = {0} ", EventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lDHZ, lQuery);
            return lDHZ;
        }
        public GESTATIO GetGestatio(int EventID)
        {
            GESTATIO lGESTATIO = new GESTATIO();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GESTATIO");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lGESTATIO, lQuery);
            return lGESTATIO;
        }

        public DRYOFF GetDryoff(int EventID)
        {
            DRYOFF lDRYOFF = new DRYOFF();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM DRYOFF");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lDRYOFF, lQuery);
            return lDRYOFF;
        }


        public DRYOFFDAYS GetDryoffDays(int pUbnID, int pBCS, int pLactationnr)
        {

            DRYOFFDAYS lDryoffDays = new DRYOFFDAYS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM DRYOFFDAYS");
            lQuery.AppendFormat(" WHERE UbnID = {0} AND BCS = {1} AND Lactationnr = {2} ", pUbnID, pBCS, pLactationnr);
            mDatabase.FillObject(mToken.getLastChildConnection(), lDryoffDays, lQuery);
            return lDryoffDays;
        }

        public bool SaveDryoffDays(DRYOFFDAYS pDryoffDays)
        {
            try
            {
                if (WriteActions.SaveObject(pDryoffDays) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveDryoffDays", ex);
                return false;
            }
        }

        public bool DeleteDryoffDays(DRYOFFDAYS pDryoffDays)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pDryoffDays);
            String[] DeleteParams = new String[]
             {
                 "UbnID", "BCS", "Lactationnr"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pDryoffDays, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pDryoffDays, mDatabase.CreateSetNegativeCommandText(pDryoffDays, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<DRYOFFDAYS> GetDryoffDaysByUbn(int pUbnID)
        {

            List<DRYOFFDAYS> lResultValue = new List<DRYOFFDAYS>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM DRYOFFDAYS ");
            lQuery.AppendFormat(" WHERE UbnID= {0} ", pUbnID);

            System.Data.DataTable dtdrdays = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drDrodays in dtdrdays.Rows)
            {
                DRYOFFDAYS mp = new DRYOFFDAYS();
                if (mDatabase.FillObject(mp, drDrodays))
                {
                    lResultValue.Add(mp);
                }
            }
            return lResultValue;
        }

        public INHEAT GetInHeat(int EventId)
        {
            INHEAT lInHeat = new INHEAT();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM INHEAT");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lInHeat, lQuery);
            return lInHeat;
        }
        public INSEMIN GetInsemin(int EventID)
        {
            INSEMIN lInsemin = new INSEMIN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM INSEMIN");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lInsemin, lQuery);
            return lInsemin;
        }
        public List<INSEMIN> GetInseminByAniIdFather(int pAniIdFather)
        {
            List<INSEMIN> lResultValue = new List<INSEMIN>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM INSEMIN");
            lQuery.AppendFormat(" WHERE AniIdFather = {0}", pAniIdFather);
            DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwthr in ltbl.Rows)
            {
                INSEMIN lTransprt = new INSEMIN();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultValue.Add(lTransprt);
                }
            }

            return lResultValue;
        }
        public LOSS GetLoss(int MovId)
        {
            LOSS lLos = new LOSS();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM LOSS");
            lQuery.AppendFormat(" WHERE MovId = {0}", MovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lLos, lQuery);
            return lLos;
        }
        public List<LOSS> GetLosses(List<int> pMovIds)
        {
            List<LOSS> lLosses = new List<LOSS>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM LOSS");
            lQuery.Append(" WHERE MovId IN (" + intListToString(pMovIds) + ") ");
            DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwthr in ltbl.Rows)
            {
                LOSS lTransprt = new LOSS();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lLosses.Add(lTransprt);
                }
            }
            return lLosses;
        }
        public List<SUPPLY1> getLeverancierSupplylist(int pFactRelatieId, int pYear)
        {

            int Yvoor = pYear - 1;
            int Yna = pYear + 1;
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT SUPPLY1.*  FROM SUPPLY1");
            lQuery.Append(" INNER JOIN FACTUUR ON SUPPLY1.Factid = FACTUUR.FactId");
            lQuery.AppendFormat("  WHERE FACTUUR.FactRelatieId = {0}", pFactRelatieId);
            lQuery.Append("  AND SupplyId>0  AND  date_format(FactDatum,'%Y') > '" + Yvoor.ToString() + "'  AND  date_format(FactDatum,'%Y') < '" + Yna.ToString() + "'");
            lQuery.Append("  ORDER BY Artikelid");
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            //DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<SUPPLY1> lResultList = new List<SUPPLY1>();
            foreach (DataRow drFactuur in tbl.Rows)
            {
                SUPPLY1 lFactuur = new SUPPLY1();
                if (mDatabase.FillObject(lFactuur, drFactuur))
                {
                    lResultList.Add(lFactuur);
                }
            }
            return lResultList;
        }

        public List<FACTUUR> getLeverancierFactuurlist(int pFactRelatieId, int pYear)
        {

            int Yvoor = pYear - 1;
            int Yna = pYear + 1;
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM FACTUUR");
            lQuery.AppendFormat("  WHERE FACTUUR.FactRelatieId = {0}", pFactRelatieId);
            lQuery.Append(" AND date_format(FactDatum,'%Y') > '" + Yvoor.ToString() + "'  AND  date_format(FactDatum,'%Y') < '" + Yna.ToString() + "'");
            lQuery.Append("  ORDER BY FACTUUR.FarmId");
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            //DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<FACTUUR> lResultList = new List<FACTUUR>();
            foreach (DataRow drFactuur in tbl.Rows)
            {
                FACTUUR lFactuur = new FACTUUR();
                if (mDatabase.FillObject(lFactuur, drFactuur))
                {
                    lResultList.Add(lFactuur);
                }
            }
            return lResultList;
        }

        public MESTNR getMestnr(string pMestnummer)
        {
            MESTNR lMestnummer = new MESTNR();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MESTNR");
            lQuery.AppendFormat(" WHERE Mestnummer = '{0}' ", pMestnummer);
            mDatabase.FillObject(mToken, lMestnummer, lQuery);
            return lMestnummer;
        }
        public List<MESTNR> getMestnrsByUbn(List<string> pBedrijfsnummers)
        {
            List<MESTNR> lResultList = new List<MESTNR>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MESTNR");
            lQuery.Append(" JOIN MESTUBN ON MESTUBN.Mestnummer=MESTNR.Mestnummer ");
            lQuery.Append(" WHERE MESTUBN.FarmNumber IN (" + stringListToString(pBedrijfsnummers) + ") ");

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);


            foreach (DataRow drMestnummer in tbl.Rows)
            {
                MESTNR lMestnr = new MESTNR();
                if (mDatabase.FillObject(lMestnr, drMestnummer))
                {
                    lResultList.Add(lMestnr);
                }
            }
            return lResultList;
        }
        public MESSAGES getMessage(int pMesID)
        {
            MESSAGES lMes = new MESSAGES();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MESSAGES");
            lQuery.AppendFormat(" WHERE MesID = {0} AND MesProgramID>=0  ", pMesID);
            mDatabase.FillObject(mToken, lMes, lQuery);
            return lMes;
        }
        public List<MESSAGES> getMessages()
        {
             
            string datum = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            //AND NOT isnull(MesProgramID) 
            StringBuilder sb = new StringBuilder($@"
              SELECT MesBegin_DateTime, MesComment,MesEnd_DateTime,MesFromThrId, MesID,MesMessage,  MesProgId,
              MesProgramID, MesReadDate, MesState,MesSubject,  MesThrId, MesUbnId,MesVersion
              FROM agrofactuur.MESSAGES
              WHERE MesBegin_DateTime<'{datum}' AND MesEnd_DateTime >='{datum}'
              AND MesID>0 
              AND MesProgramID>=0
              ORDER BY MesBegin_DateTime DESC
            ");
            DataTable tblmes = mDatabase.QueryData(mToken, sb);
            List<MESSAGES> lResultList = new List<MESSAGES>();
            foreach (DataRow drwthr in tblmes.Rows)
            {
                MESSAGES lmsg = new MESSAGES();
                if (mDatabase.FillObject(lmsg, drwthr))
                {
                    lResultList.Add(lmsg);
                }
            }


            return lResultList;
        }
        public List<MESSAGES> getMessages(int pProgramid)
        {

            DateTime BVDate = DateTime.Now;
            StringBuilder sb = new StringBuilder("select * from MESSAGES ");
            sb.Append(" where (MesProgramID = " + pProgramid.ToString());
            sb.Append(" OR MesProgramID = 0) ");
            sb.Append(" AND date_format(MesBegin_DateTime,'%Y-%m-%d %T')<'" + BVDate.Year.ToString() + "-" + addleadingzero(BVDate.Month.ToString()) + "-" + addleadingzero(BVDate.Day.ToString()) + " " + addleadingzero(BVDate.Hour.ToString()) + ":" + addleadingzero(BVDate.Minute.ToString()) + ":" + addleadingzero(BVDate.Second.ToString()) + "' ");
            sb.Append(" AND date_format(MesEnd_DateTime,'%Y-%m-%d %T')>='" + BVDate.Year.ToString() + "-" + addleadingzero(BVDate.Month.ToString()) + "-" + addleadingzero(BVDate.Day.ToString()) + " " + addleadingzero(BVDate.Hour.ToString()) + ":" + addleadingzero(BVDate.Minute.ToString()) + ":" + addleadingzero(BVDate.Second.ToString()) + "'  ");
            sb.Append(" AND MesID>0 ");
            sb.Append(" ORDER BY MesBegin_DateTime DESC");

            DataTable tblmes = mDatabase.QueryData(mToken, sb);

            List<MESSAGES> lResultList = new List<MESSAGES>();
            foreach (DataRow drwthr in tblmes.Rows)
            {
                MESSAGES lmsg = new MESSAGES();
                if (mDatabase.FillObject(lmsg, drwthr))
                {
                    lResultList.Add(lmsg);
                }
            }


            return lResultList;
        }
        public List<MESSAGES> getMessagesForAdminUse(int pProgramid)
        {

            StringBuilder sb = new StringBuilder("select MESSAGES.* from MESSAGES ");
            sb.Append(" where MesProgramID = " + pProgramid.ToString());
            sb.Append(" AND MesID>0 ");
            sb.Append(" ORDER BY MesBegin_DateTime DESC");

            DataTable tblmes = mDatabase.QueryData(mToken, sb);
            List<MESSAGES> lResultList = new List<MESSAGES>();
            foreach (DataRow drwthr in tblmes.Rows)
            {
                MESSAGES lmsg = new MESSAGES();
                if (mDatabase.FillObject(lmsg, drwthr))
                {
                    lResultList.Add(lmsg);
                }
            }
            return lResultList;
        }
        public MESTTANK getMestTank(string pMestnummer, int pTanknummer)
        {
            MESTTANK lMesttank = new MESTTANK();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MESTTANK");
            lQuery.AppendFormat(" WHERE Mestnummer = '{0}' AND Tanknummer = {1}", pMestnummer, pTanknummer);
            mDatabase.FillObject(mToken, lMesttank, lQuery);
            return lMesttank;
        }
        public List<MESTTANK> getMestTanks(string pMestnummer)
        {

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MESTTANK");
            lQuery.AppendFormat(" WHERE Mestnummer = '{0}' ", pMestnummer);
            DataTable ltbl = mDatabase.QueryData(mToken, lQuery);
            List<MESTTANK> lResultList = new List<MESTTANK>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                MESTTANK lTransprt = new MESTTANK();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }

        public MESTUBN getMestUbn(string pMestnummer, string pBedrijfsnummer)
        {
            MESTUBN lMestubn = new MESTUBN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MESTUBN");
            lQuery.AppendFormat(" WHERE Mestnummer = '{0}' AND FarmNumber = '{1}' ", pMestnummer, pBedrijfsnummer);
            mDatabase.FillObject(mToken, lMestubn, lQuery);
            return lMestubn;
        }
        public List<MESTUBN> getMestUbns(string pMestnummer)
        {
            StringBuilder lsb = new StringBuilder(" SELECT * FROM MESTUBN  WHERE Mestnummer = '" + pMestnummer + "' ");
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<MESTUBN> lResultList = new List<MESTUBN>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                MESTUBN lTransprt = new MESTUBN();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }


        public List<RIGHT_MODULE> getRightModules()
        {
            List<RIGHT_MODULE> lModules = new List<RIGHT_MODULE>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM RIGHT_MODULE");
            DataTable ltbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow drwthr in ltbl.Rows)
            {
                RIGHT_MODULE lMod = new RIGHT_MODULE();
                if (mDatabase.FillObject(lMod, drwthr))
                {
                    lModules.Add(lMod);
                }
            }
            return lModules;
        }
        public RIGHT_MODULE getRightModuleByName(string pModuleName)
        {
            RIGHT_MODULE lModule = new RIGHT_MODULE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM RIGHT_MODULE");
            lQuery.AppendFormat(" WHERE ModuleName='{0}' ", pModuleName);
            mDatabase.FillObject(mToken, lModule, lQuery);
            return lModule;
        }
        public RIGHT_MODULE getRightModuleById(int pModuleId)
        {
            RIGHT_MODULE lModule = new RIGHT_MODULE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM RIGHT_MODULE");
            lQuery.AppendFormat(" WHERE ModuleID='{0}' ", pModuleId);
            mDatabase.FillObject(mToken, lModule, lQuery);
            return lModule;
        }
        public DataTable getWebPageRightsTable(int pFarmID, int pModuleID)
        {
            string sql = "SELECT AUTH_GROUPS_RIGHTS.ObjectID, AUTH_GROUPS_RIGHTS.Object_Type, RIGHT_LABELS.TypeId, RIGHT_LABELS.Parent_ObjectID,RIGHT_LABELS.Labkind,RIGHT_LABELS.LabID "//, RIGHT_LABELS.TypeID"
                                    + " FROM AUTH_GROUPS_RIGHTS"
                                    + " INNER JOIN AUTH_GROUPS_FARM ON AUTH_GROUPS_FARM.GroupID = AUTH_GROUPS_RIGHTS.GroupID"
                                    + " INNER JOIN RIGHT_LABELS ON AUTH_GROUPS_RIGHTS.ObjectID = RIGHT_LABELS.ObjectID"
                                    + " WHERE FarmID = @FarmID"
                                    + " AND AUTH_GROUPS_RIGHTS.ModuleID = @ModuleID";
            using (System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(mToken))
            {
                cmd.CommandText = sql;
                mDatabase.AddParameter(cmd, "@FarmID", pFarmID);
                mDatabase.AddParameter(cmd, "@ModuleID", pModuleID);
                //only do database interaction if the datatable isn't in saved in the Session yet
                //use type as identifier for the session variable

                DataTable dt = mDatabase.QueryData(mToken, cmd);
                cmd.Connection.Dispose();
                return dt;
            }


        }

        public DataTable getWebPageRightsTableByGroupID(int pGroupID, int pModuleID)
        {
            string sql = "SELECT AUTH_GROUPS_RIGHTS.ObjectID, AUTH_GROUPS_RIGHTS.Object_Type, RIGHT_LABELS.TypeId, RIGHT_LABELS.Parent_ObjectID,RIGHT_LABELS.Labkind,RIGHT_LABELS.LabID "//, RIGHT_LABELS.TypeID"
                                    + " FROM AUTH_GROUPS_RIGHTS"
                                    //                        + " INNER JOIN AUTH_GROUPS_FARM ON AUTH_GROUPS_FARM.GroupID = AUTH_GROUPS_RIGHTS.GroupID"
                                    + " INNER JOIN RIGHT_LABELS ON AUTH_GROUPS_RIGHTS.ObjectID = RIGHT_LABELS.ObjectID"
                                    //                        + " WHERE FarmID = @FarmID"
                                    + "  WHERE AUTH_GROUPS_RIGHTS.GroupID=@GroupID "
                                    + " AND AUTH_GROUPS_RIGHTS.ModuleID = @ModuleID AND RIGHT_LABELS.ProgID = @ProgId";
            using (System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(mToken))
            {
                cmd.CommandText = sql;
                mDatabase.AddParameter(cmd, "@GroupID", pGroupID);
                mDatabase.AddParameter(cmd, "@ProgId", pGroupID);
                mDatabase.AddParameter(cmd, "@ModuleID", pModuleID);
                //only do database interaction if the datatable isn't in saved in the Session yet
                //use type as identifier for the session variable

                DataTable dt = mDatabase.QueryData(mToken, cmd);
                cmd.Connection.Dispose();
                return dt;
            }


        }
        public int getAuthGroupRightsGroupID(int pFarmId, int pProgramid)
        {
            int ret = 0;
            if (pProgramid > 0)
            {
                /*
                    SELECT AUTH_GROUPS_FARM.GroupID 
                    FROM AUTH_GROUPS_FARM 
                    WHERE AUTH_GROUPS_FARM.FarmID=110 
                    UNION 
                    SELECT PROGRAM_LICENSE.GroupID
                    FROM PROGRAM_LICENSE 
                    WHERE PROGRAM_LICENSE.ProgID=2599
                 */
                StringBuilder sql = new StringBuilder();
                if (pFarmId > 0)
                {
                    sql.Append(" SELECT AUTH_GROUPS_FARM.GroupID ");
                    sql.Append(" FROM AUTH_GROUPS_FARM ");
                    sql.AppendFormat(" WHERE AUTH_GROUPS_FARM.FarmID={0} ", pFarmId);
                    sql.Append(" UNION ");
                }
                sql.Append(" SELECT PROGRAM_LICENSE.GroupID ");
                sql.Append(" FROM PROGRAM_LICENSE ");
                sql.AppendFormat(" WHERE PROGRAM_LICENSE.ProgID={0} ", pProgramid);
                DataSet ds = new DataSet();
                DataTable tbl = mDatabase.QueryData(mToken, ds, sql, "AuthGroupRightsGroupID", MissingSchemaAction.Add);
                if (tbl.Rows.Count > 0)
                {
                    if (tbl.Rows[0]["GroupID"] != DBNull.Value)
                    {
                        if (tbl.Rows[0]["GroupID"].ToString() != "")
                        {
                            int.TryParse(tbl.Rows[0]["GroupID"].ToString(), out ret);
                        }
                    }
                }
            }
            return ret;
        }
        public DataTable getScrapieSteekproefBedrijven()
        {
            //in gebruik bij getNsfoScrapieVrij_ByDate in overzichtaantallen.aspx en ScrapieSteekproeven.aspx
            //Omdat: aantallen moeten gelijk zijn.
            StringBuilder bld = new StringBuilder();
            bld.Append(@"SELECT  
                ( 
                SELECT COUNT(ANIMALCATEGORY.AniId) FROM ANIMALCATEGORY 
                LEFT JOIN ANIMAL ON ANIMAL.AniId = ANIMALCATEGORY.AniId 
                WHERE ANIMALCATEGORY.FarmId IN ( SELECT bb.FarmId FROM agrofactuur.BEDRIJF bb WHERE bb.UbnId= u1.UBNid )
                AND (ANIMAL.AniSex=2 OR ANIMAL.AniSex=0) 
                AND ANIMALCATEGORY.Anicategory>0 AND ANIMALCATEGORY.Anicategory<4 AND ANIMALCATEGORY.AniId>0 
                AND DATEDIFF(NOW(),ANIMAL.AniBirthDate)>364 
                )   AS AantalOoienOuderDanEenJaar, 
                agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.ProgramID,agrofactuur.BEDRIJF.UbnId,u1.Bedrijfsnummer, 
                agrofactuur.BEDRIJF.Omschrijving, agrofactuur.BEDRIJF.Fokkers_Nr,
                bz1.bz_Datum,agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1, 
                agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName 
                FROM agrofactuur.BEDRIJF_ZIEKTE bz1 
                LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID 
                LEFT JOIN agrofactuur.UBN u1 ON u1.UBNid = agrofactuur.BEDRIJF.UBNid  
                LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=u1.ThrID 
                WHERE bz1.bz_ZiekteID=2 
                AND agrofactuur.BEDRIJF.FarmId>0 
                AND bz1.bz_StatusID=1 
                AND bz1.bz_Datum =  
                ( 
	                SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2 
	                WHERE bz2.bz_ZiekteID=2 
	                AND bz2.bz_FarmID=bz1.bz_FarmID 
                 ) 
                 GROUP BY u1.UbnID            ORDER BY u1.Bedrijfsnummer ");
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "Scrapiesteekproef", MissingSchemaAction.Add);
            return tbl;

        }
        #region Brucella Melitensis Steekproef

        public DataTable getSteekproeven(int pZiekteID)
        {
            //DbCommand idcmd = mDatabase.CreateCommand(mToken);
            //idcmd.CommandType = System.Data.CommandType.Text;
            StringBuilder bldDetails = new StringBuilder();
            bldDetails.Append(" SELECT BEDRIJF_ZIEKTE_STEEKPROEF.* ,AGRO_LABELS.LabLabel ");
            bldDetails.Append(" FROM BEDRIJF_ZIEKTE_STEEKPROEF ");
            bldDetails.Append(" JOIN AGRO_LABELS ON AGRO_LABELS.LabID = BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ZiekteID ");
            bldDetails.AppendFormat(" WHERE BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ZiekteID={0}  ", pZiekteID);
            bldDetails.Append(" AND  AGRO_LABELS.LabKind=250 AND AGRO_LABELS.LabProgID=0  AND AGRO_LABELS.LabProgramID=0 ");
            //idcmd.CommandText = bldDetails.ToString();
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken, ds, bldDetails, "steekproeven", MissingSchemaAction.Add);
            return tbl;
        }

        public DataTable getSteekproefUbns(int pBzs_ID, int pbzs_ZiekteID)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(@" SELECT 

              u.UbnId,agrofactuur.THIRD.ThrId,u.Bedrijfsnummer, 
              agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  
              agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, 
              BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.bzsd_Steekproef 

               , Totaal_Aantal_TESTEN 
              ,Negatieve_Dier_Testen 
              , Positieve_Dier_Testen 
              ,SCHAAP_TEST_DATUMS 
              ,Schaap_TESTEN 
              ,GEIT_TEST_DATUMS 
              ,Geit_TESTEN 


              FROM BEDRIJF_ZIEKTE_STEEKPROEF  
              JOIN BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS ON BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.bzs_ID = BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ID  
              LEFT JOIN agrofactuur.UBN u ON u.UbnId= BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.UbnID  

              LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId= u.ThrID  " +
              //Added 2-10-2013
              @" LEFT OUTER JOIN  
              ( 
              SELECT UBN.UbnId, UBN.Bedrijfsnummer, UBN.Bedrijfsnaam 

              ,BM_SCHAAP.Totaal_Aantal_Dier_Testen + BM_GEIT.Totaal_Aantal_Dier_Testen AS Totaal_Aantal_TESTEN 
              ,BM_SCHAAP.Totaal_Aantal_Negatieve_Dier_Testen + BM_GEIT.Totaal_Aantal_Negatieve_Dier_Testen AS  Negatieve_Dier_Testen  
              ,BM_SCHAAP.Totaal_Aantal_Positieve_Dier_Testen + BM_GEIT.Totaal_Aantal_Positieve_Dier_Testen AS  Positieve_Dier_Testen 

              ,BM_SCHAAP.Test_Datums AS SCHAAP_TEST_DATUMS 
              ,BM_GEIT.Test_Datums AS GEIT_TEST_DATUMS 


              ,BM_SCHAAP.Totaal_Aantal_Dier_Testen AS Schaap_TESTEN 
              ,BM_GEIT.Totaal_Aantal_Dier_Testen AS Geit_TESTEN 


               FROM agrofactuur.UBN 

              INNER JOIN (SELECT UBN.Ubnid 

              ,(SELECT COUNT(*) FROM agrobase_sheep.ANIMALCATEGORY INNER JOIN agrobase_sheep.ANIMAL ON ANIMAL.aniid = agrobase_sheep.ANIMALCATEGORY.aniid INNER JOIN agrobase_sheep.EVENT ON agrobase_sheep.EVENT.aniid = agrobase_sheep.ANIMAL.aniid AND agrobase_sheep.EVENT.evekind = 11 INNER JOIN agrobase_sheep.BLOOD ON agrobase_sheep.BLOOD.eventid = agrobase_sheep.EVENT.eventid AND agrobase_sheep.BLOOD.blokind = -15 WHERE agrobase_sheep.ANIMALCATEGORY.farmid = BEDRIJF.farmid AND agrobase_sheep.EVENT.ubnid = BEDRIJF.ubnid) AS Totaal_Aantal_Dier_Testen 
              ,(SELECT COUNT(*) FROM agrobase_sheep.ANIMALCATEGORY INNER JOIN agrobase_sheep.ANIMAL ON ANIMAL.aniid = agrobase_sheep.ANIMALCATEGORY.aniid INNER JOIN agrobase_sheep.EVENT ON agrobase_sheep.EVENT.aniid = agrobase_sheep.ANIMAL.aniid AND agrobase_sheep.EVENT.evekind = 11 INNER JOIN agrobase_sheep.BLOOD ON agrobase_sheep.BLOOD.eventid = agrobase_sheep.EVENT.eventid AND agrobase_sheep.BLOOD.blokind = -15 WHERE agrobase_sheep.ANIMALCATEGORY.farmid = BEDRIJF.farmid AND agrobase_sheep.EVENT.ubnid = BEDRIJF.ubnid AND LOWER( agrobase_sheep.EVENT.evecomment) = 'negatief' ) AS Totaal_Aantal_Negatieve_Dier_Testen 
              ,(SELECT COUNT(*) FROM agrobase_sheep.ANIMALCATEGORY INNER JOIN agrobase_sheep.ANIMAL ON ANIMAL.aniid = agrobase_sheep.ANIMALCATEGORY.aniid INNER JOIN agrobase_sheep.EVENT ON agrobase_sheep.EVENT.aniid = agrobase_sheep.ANIMAL.aniid AND agrobase_sheep.EVENT.evekind = 11 INNER JOIN agrobase_sheep.BLOOD ON agrobase_sheep.BLOOD.eventid = agrobase_sheep.EVENT.eventid AND agrobase_sheep.BLOOD.blokind = -15 WHERE agrobase_sheep.ANIMALCATEGORY.farmid = BEDRIJF.farmid AND agrobase_sheep.EVENT.ubnid = BEDRIJF.ubnid AND LOWER( agrobase_sheep.EVENT.evecomment) = 'positief')  AS Totaal_Aantal_Positieve_Dier_Testen
              ,(SELECT CAST( GROUP_CONCAT(EVE_DATUMS.EDATE) AS CHAR) FROM (SELECT DATE(EVEDATE) AS EDATE, FarmID FROM agrobase_sheep.ANIMALCATEGORY INNER JOIN agrobase_sheep.ANIMAL ON agrobase_sheep.ANIMAL.aniid = agrobase_sheep.ANIMALCATEGORY.aniid INNER JOIN agrobase_sheep.EVENT ON agrobase_sheep.EVENT.aniid = agrobase_sheep.ANIMAL.aniid AND agrobase_sheep.EVENT.evekind = 11 INNER JOIN agrobase_sheep.BLOOD ON agrobase_sheep.BLOOD.eventid = agrobase_sheep.EVENT.eventid AND agrobase_sheep.BLOOD.blokind = -15 GROUP BY agrobase_sheep.EVENT.EVEDATE, farmid) AS EVE_DATUMS WHERE EVE_DATUMS.farmid = BEDRIJF.farmid) AS Test_Datums 

              FROM agrofactuur.BEDRIJF_ZIEKTE_STEEKPROEF  
              INNER JOIN agrofactuur.BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS ON BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.bzs_ID = BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ID  
              INNER JOIN agrofactuur.UBN ON UBN.ubnid = BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.UbnID  
              LEFT OUTER JOIN agrofactuur.BEDRIJF ON BEDRIJF.ubnid = UBN.ubnid AND BEDRIJF.progid IN (3)   

              WHERE BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ZiekteID = " + pbzs_ZiekteID.ToString() + @" AND BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ID=" + pBzs_ID.ToString() + @"
              ) AS BM_SCHAAP ON BM_SCHAAP.ubnid = UBN.UbnID 

              INNER JOIN (SELECT UBN.ubnid 

              ,(SELECT COUNT(*) FROM agrobase_goat.ANIMALCATEGORY INNER JOIN agrobase_goat.ANIMAL ON agrobase_goat.ANIMAL.aniid = agrobase_goat.ANIMALCATEGORY.aniid INNER JOIN agrobase_goat.EVENT ON EVENT.aniid = agrobase_goat.ANIMAL.aniid AND agrobase_goat.EVENT.evekind = 11 INNER JOIN agrobase_goat.BLOOD ON BLOOD.eventid = agrobase_goat.EVENT.eventid AND agrobase_goat.BLOOD.blokind = -15 WHERE agrobase_goat.ANIMALCATEGORY.farmid = BEDRIJF.farmid AND agrobase_goat.EVENT.ubnid = BEDRIJF.ubnid) AS Totaal_Aantal_Dier_Testen 
              ,(SELECT COUNT(*) FROM agrobase_goat.ANIMALCATEGORY INNER JOIN agrobase_goat.ANIMAL ON agrobase_goat.ANIMAL.aniid = agrobase_goat.ANIMALCATEGORY.aniid INNER JOIN agrobase_goat.EVENT ON EVENT.aniid = agrobase_goat.ANIMAL.aniid AND agrobase_goat.EVENT.evekind = 11 INNER JOIN agrobase_goat.BLOOD ON BLOOD.eventid = agrobase_goat.EVENT.eventid AND agrobase_goat.BLOOD.blokind = -15 WHERE agrobase_goat.ANIMALCATEGORY.farmid = BEDRIJF.farmid AND agrobase_goat.EVENT.ubnid = BEDRIJF.ubnid AND LOWER( agrobase_goat.EVENT.evecomment) = 'negatief' ) AS Totaal_Aantal_Negatieve_Dier_Testen 
              ,(SELECT COUNT(*) FROM agrobase_goat.ANIMALCATEGORY INNER JOIN agrobase_goat.ANIMAL ON agrobase_goat.ANIMAL.aniid = agrobase_goat.ANIMALCATEGORY.aniid INNER JOIN agrobase_goat.EVENT ON EVENT.aniid = agrobase_goat.ANIMAL.aniid AND agrobase_goat.EVENT.evekind = 11 INNER JOIN agrobase_goat.BLOOD ON BLOOD.eventid = agrobase_goat.EVENT.eventid AND agrobase_goat.BLOOD.blokind = -15 WHERE agrobase_goat.ANIMALCATEGORY.farmid = BEDRIJF.farmid AND agrobase_goat.EVENT.ubnid = BEDRIJF.ubnid AND LOWER( agrobase_goat.EVENT.evecomment) = 'positief')  AS Totaal_Aantal_Positieve_Dier_Testen 
              ,(SELECT CAST( GROUP_CONCAT(EVE_DATUMS.EDATE) AS CHAR) FROM (SELECT DATE(EVEDATE) AS EDATE, FarmID FROM agrobase_goat.ANIMALCATEGORY INNER JOIN agrobase_goat.ANIMAL ON agrobase_goat.ANIMAL.aniid = agrobase_goat.ANIMALCATEGORY.aniid INNER JOIN agrobase_goat.EVENT ON agrobase_goat.EVENT.aniid = agrobase_goat.ANIMAL.aniid AND agrobase_goat.EVENT.evekind = 11 INNER JOIN agrobase_goat.BLOOD ON agrobase_goat.BLOOD.eventid = agrobase_goat.EVENT.eventid AND agrobase_goat.BLOOD.blokind = -15 GROUP BY agrobase_goat.EVENT.EVEDATE, farmid) AS EVE_DATUMS WHERE EVE_DATUMS.farmid = BEDRIJF.farmid) AS Test_Datums 


              FROM agrofactuur.BEDRIJF_ZIEKTE_STEEKPROEF 
              INNER JOIN agrofactuur.BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS ON BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.bzs_ID = BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ID 
              INNER JOIN agrofactuur.UBN ON UBN.ubnid = BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.UbnID 
              LEFT OUTER JOIN agrofactuur.BEDRIJF ON BEDRIJF.ubnid = UBN.ubnid AND BEDRIJF.progid IN (5)  


              WHERE BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ZiekteID = " + pbzs_ZiekteID.ToString() + " AND BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ID=" + pBzs_ID.ToString() + @"  
              ) AS BM_GEIT ON BM_GEIT.ubnid = UBN.UbnID 



             
              WHERE UBN.ubnid > 0 


              GROUP by UBN.UBNid 


              HAVING UBN.Ubnid > 0  " +
              //#AND UBN.bedrijfsnummer LIKE IF('1217634' > "", ConCat("%", '1217634', "%"), "%%")
              @" AND Totaal_Aantal_TESTEN >= 1 

              ORDER BY UBN.Bedrijfsnaam, UBN.Bedrijfsnummer 
              ) AS tblMoni 
              ON tblMoni.UbnId = BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS.UBNid " +
              //END Added 2-10-2013

              @" WHERE  BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ZiekteID=" + pbzs_ZiekteID.ToString() + @" 
              AND BEDRIJF_ZIEKTE_STEEKPROEF.bzs_ID=" + pBzs_ID.ToString() + @" 

              ORDER BY u.Bedrijfsnummer ");
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken, ds, bld, "BMsteekproefubns", MissingSchemaAction.Add);
            return tbl;
        }

        public bool setSteekproefThird(int pBzs_ID, int pThrId)
        {
            if (pThrId > 0 && pBzs_ID > 0)
            {


                StringBuilder bldDetails = new StringBuilder();
                bldDetails.Append(" UPDATE BEDRIJF_ZIEKTE_STEEKPROEF ");
                bldDetails.AppendFormat(" SET bzs_ThrID = {0}  ", pThrId);
                bldDetails.AppendFormat(" WHERE bzs_ID= {0} ", pBzs_ID);

                //DbCommand cmdDetails = mDatabase.CreateCommand(mToken);
                //cmdDetails.CommandText = bldDetails.ToString();
                //if (mDatabase.ExecuteNonQueryCommand(cmdDetails) != 1)
                //    return false;
                return mDatabase.ExecuteNonQuery(mToken, bldDetails.ToString()) == 1;
            }
            // Luc 07-03-16 moet dit niet false zijn??
            return true;
        }
        public bool setSteekproef(List<int> pUbnIds, int pBzs_ID)
        {
            if (pUbnIds.Count() > 0 && pBzs_ID > 0)
            {


                StringBuilder bldDetails = new StringBuilder();
                bldDetails.Append(" UPDATE BEDRIJF_ZIEKTE_STEEKPROEF_DETAILS ");
                bldDetails.Append(" SET bzsd_Steekproef = 1  ");
                bldDetails.AppendFormat(" WHERE bzs_ID= {0} ", pBzs_ID);
                bldDetails.Append(" AND  UbnID IN (" + intListToString(pUbnIds) + ")  ");
                //DbCommand cmdDetails = mDatabase.CreateCommand(mToken);
                //cmdDetails.CommandText = bldDetails.ToString();
                //if (mDatabase.ExecuteNonQueryCommand(cmdDetails) != pUbnIds.Count())
                //  return false;
                if (mDatabase.ExecuteNonQuery(mToken, bldDetails.ToString()) != pUbnIds.Count())
                    return false;

            }
            return true;
        }

        #endregion
        public DataTable getBedrijvenByProgramIds(List<int> pProgramIds, string pSearchUbnNr)
        {
            DataTable tbl = new DataTable();
            if (pProgramIds.Count() > 0)
            {
                StringBuilder sql = new StringBuilder();
                sql.Append(" SELECT u.UbnId, u.Bedrijfsnummer, u.Bedrijfsnaam, b.FarmId, b.ProgramId, b.ProgId, b.Fokkers_Nr, ");
                sql.Append(" t.ThrCompanyname,t.ThrZipCode AS Postcode ,t.ThrCity AS Woonplaats, ");
                //sql.Append(" SUBSTR(lablabel,1, POSITION(':' IN lablabel)-2 ) AS Stamboek");
                sql.Append("  IF(LENGTH(SUBSTR(lablabel,1, POSITION(':' IN lablabel)-2 ))>0,SUBSTR(lablabel,1, POSITION(':' IN lablabel)-2 ),lablabel) AS Stamboek ");
                sql.Append(" FROM agrofactuur.BEDRIJF b");
                sql.Append(" RIGHT JOIN agrofactuur.UBN u ON (u.UbnId=b.UbnId)");
                sql.Append(" LEFT JOIN THIRD t ON t.ThrId=u.ThrId ");
                sql.Append(" LEFT JOIN agrofactuur.AGRO_LABELS l ON (l.LabID=b.Programid AND l.LabKind=9100");
                sql.Append(" AND l.LabProgramId=0 AND l.LabCountry=0 AND l.LabProgId=0)");
                sql.Append(" WHERE ((b.ProgramId IN (" + intListToString(pProgramIds) + ")) ");
                sql.Append(" OR (b.ProgramId IN (47,49)  AND b.UbnId IN (SELECT DISTINCT(BEDRIJF.UBNid) FROM BEDRIJF WHERE BEDRIJF.Programid IN (" + intListToString(pProgramIds) + "))))");
                sql.Append(" AND (NOT (ISNULL(u.Bedrijfsnaam) OR LENGTH(u.Bedrijfsnaam)=0))  AND u.UbnId>0 AND b.FarmId>0  ");
                if (pSearchUbnNr != null && pSearchUbnNr.Length > 0)
                {
                    sql.AppendFormat(" AND u.Bedrijfsnummer='{0}' ", pSearchUbnNr);
                }
                sql.Append(" ORDER BY t.ThrCompanyname,  u.Bedrijfsnummer ");
                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken, ds, sql, "Bedrijven", MissingSchemaAction.Add);

                //DataRow[] addnames = tbl.Select(" ProgramId=49 ");
                //foreach (DataRow rw in addnames)
                //{
                //    rw["Stamboek"] = pStamboekloosName;
                //}
            }
            return tbl;
        }

        public DataTable getDeelnemersDierziekteBestrijding(int ZiekteId)
        {
            //BUG 1938 voor ziekteid 1 en 2 schapen
            //              ziekteid 4 en 5 geiten
            //List<int> pProgramIds = getStamboekenDieMeedoenMetScrapieZiekte().ToList();
            StringBuilder sb = new StringBuilder();

            sb.Append(@"SELECT DISTINCT bz.bz_FarmId, t.thrCompanyName, t.thrZipCode, t.thrCity, u.Bedrijfsnummer, b.Fokkers_nr, bz.bz_ZiekteId, b.ProgramId, b.ProgId, 
            (SELECT MAX(bz2.bz_Datum) as bDatum FROM agrofactuur.BEDRIJF_ZIEKTE bz2 WHERE bz2.bz_FarmId = bz.bz_FarmId AND bz2.bz_ZiekteId = bz.bz_ZiekteId) AS Datum,  
            (SELECT bz3.bz_StatusId FROM agrofactuur.BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS Status , 
            (SELECT bz3.bz_NSFO_Dierziekte_Geldigheid FROM agrofactuur.BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS bz_NSFO_Dierziekte_Geldigheid ,
             ( SELECT agrofactuur.THIRD.ThrInitials FROM agrofactuur.THIRD  
             WHERE agrofactuur.THIRD.ThrId= 
             		(SELECT agrologs.BEDRIJFZIEKTELOG.bzlThrId FROM agrologs.BEDRIJFZIEKTELOG WHERE bzlFarmId=bz.bz_FarmId AND bzlZiekteId=bz.bz_ZiekteID  
             AND DATE_FORMAT(bzlDatum,'%Y-%m-%d')=DATE_FORMAT(Datum,'%Y-%m-%d')  
             AND bzlStatusID=Status  
             ORDER BY bzlLogDateTime DESC LIMIT 1) 
             ) AS ThrInitials 

            FROM agrofactuur.BEDRIJF_ZIEKTE bz  
            JOIN agrofactuur.BEDRIJF b ON bz.bz_FarmId = b.FarmId 
            JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId 
            JOIN agrofactuur.THIRD t ON u.ThrId = t.thrId ");


            //sb.Append("WHERE b.ProgramId IN (" + sProgramIds + ") "); UITGEZET
            /*
                 er zijn  bedrijven die geen nsfo zijn maar wel 
                 mee willen doen met nsfo bedrijfsziekte programma
                 die moeten dan ook de meldingen krijgen
             */
            sb.AppendFormat(" WHERE bz_ZiekteId = {0} AND b.FarmId>0", ZiekteId);
            if (ZiekteId == 1 || ZiekteId == 2 || ZiekteId == 3)
            {
                sb.AppendLine(" AND b.ProgId=3 ");
            }
            else if (ZiekteId == 4 || ZiekteId == 5)
            {
                sb.AppendLine(" AND b.ProgId=5 ");
                sb.AppendLine(" AND ProgramId IN (" + intListToString(utils.getNsfoProgramIds()) + ",47,49) ");
            }
            //sb.Append(" OR b.ProgramId IN (" + intListToString(pProgramIds) + ")) ");

            sb.AppendLine(" AND LENGTH(u.Bedrijfsnummer)>0  GROUP BY Bedrijfsnummer ");// Om niet allerlei rommel in de grid te krijgen
            ////////////////////////////////////
            if (ZiekteId == 4 || ZiekteId == 5)
            {
                sb.Append("     UNION ");
                sb.Append(" SELECT DISTINCT b.FarmId, t.thrCompanyName, t.thrZipCode, t.thrCity, u.Bedrijfsnummer, b.Fokkers_nr, " + ZiekteId.ToString() + " AS bz_ZiekteId, b.ProgramId, b.ProgId,  ");
                sb.Append("  NOW() AS Datum,   ");
                sb.Append("  0 AS Status ,  ");
                sb.Append("  24 AS bz_NSFO_Dierziekte_Geldigheid , ");
                sb.Append("  '' AS ThrInitials ");
                sb.Append("  FROM BEDRIJF b ");
                sb.Append("  JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId  ");
                sb.Append("  JOIN agrofactuur.THIRD t ON u.ThrId = t.thrId ");
                sb.Append(" WHERE b.UbnID IN ");
                sb.Append(" ( ");
                sb.Append(" 	SELECT UBN.UBNid FROM UBN ");
                sb.Append(" 	JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid ");
                sb.Append(" 	WHERE BEDRIJF.Programid IN(40,47) ");
                sb.Append(" ) ");
                sb.Append(" AND b.ProgId=5  ");
                sb.Append(" AND NOT b.FarmId IN (SELECT DISTINCT(BEDRIJF_ZIEKTE.bz_FarmID) FROM BEDRIJF_ZIEKTE  WHERE BEDRIJF_ZIEKTE.bz_ZiekteID=" + ZiekteId.ToString() + ") ");
                sb.Append(" AND ProgramId IN (" + intListToString(utils.getNsfoProgramIds()) + ",47,49) GROUP BY Bedrijfsnummer  ");
            }
            ///////////////////////////
            sb.Append("   ORDER BY thrCompanyName, bz_ZiekteId, Datum DESC ");

            DataSet ds = new DataSet();
            DataTable dt = mDatabase.QueryData(mToken, ds, sb, "deelnemers", MissingSchemaAction.Add);
            return dt;
        }

        public bool CorrigerenArrArr(UBN pUbn)
        {
            //BUG 1523
            //BUG 1912 2e administratie wordt niet mee geupdate
            //dit kan gebeuren als de 2e administratie geen record in Bedrijfsziekte heeft
            //dus doe ik het iets anders hier 
            if (pUbn.UBNid > 0)
            {

                List<BEDRIJF> bedrijven = getBedrijvenByUBNId(pUbn.UBNid);
                var farmids = from n in bedrijven
                              select n.FarmId;
                if (farmids.Count() > 0)
                {
                    BEDRIJF_ZIEKTE bz = getCurrentBedrijfZiekteStatus(farmids.ElementAt(0), 2);
                    if (bz != null)
                    {
                        if (bz.Bz_StatusID == 1)
                        {
                            if (bz.Bz_Datum > DateTime.MinValue)
                            {
                                StringBuilder sQuery = new StringBuilder();
                                sQuery.Append(" UPDATE  ");
                                //sQuery.Append(" agrofactuur.BEDRIJF_ZIEKTE,  ");
                                sQuery.Append(" agrofactuur.UBN, ");
                                sQuery.Append(" agrofactuur.BEDRIJF, ");
                                sQuery.Append(" agrobase_sheep.ANIMALCATEGORY, ");
                                sQuery.Append(" agrobase_sheep.ANIMAL, ");
                                sQuery.Append(" agrobase_sheep.ANIMAL father, ");
                                sQuery.Append(" agrobase_sheep.ANIMAL mother ");
                                sQuery.Append(" SET ANIMAL.aniscrapie = 1 ");
                                sQuery.Append(" WHERE ANIMAL.ThrID > 0  ");
                                sQuery.Append(" AND   ANIMAL.aniid > 0 ");
                                sQuery.Append(" AND (ANIMAL.AniScrapie IS NULL OR ANIMAL.AniScrapie = 0) ");
                                //sQuery.Append(" AND BEDRIJF_ZIEKTE.bz_FARMID = BEDRIJF.farmID ");
                                //sQuery.Append(" AND BEDRIJF_ZIEKTE.bz_ziekteID = 2  ");
                                //sQuery.Append(" AND BEDRIJF_ZIEKTE.bz_statusid = 1  ");
                                sQuery.Append(" AND UBN.UbnID    = BEDRIJF.UbnID ");
                                sQuery.Append(" AND ANIMAL.thrid = UBN.ThrID ");
                                sQuery.Append(" AND ANIMALCATEGORY.AniId = ANIMAL.AniId ");
                                sQuery.Append(" AND ANIMALCATEGORY.farmid = BEDRIJF.farmID ");
                                sQuery.Append(" AND BEDRIJF.programid IN (" + intListToString(utils.getNsfoProgramIds()) + ",47,49) ");
                                //sQuery.Append(" AND ANIMAL.AniBirthDate > BEDRIJF_ZIEKTE.bz_datum ");
                                sQuery.Append("   AND ANIMAL.AniBirthDate > (SELECT BEDRIJF_ZIEKTE.bz_datum FROM agrofactuur.BEDRIJF_ZIEKTE WHERE BEDRIJF_ZIEKTE.bz_ID = " + bz.Bz_ID.ToString() + ") ");
                                sQuery.Append(" AND (father.AniScrapie = 1 AND mother.aniscrapie = 1) ");
                                sQuery.Append(" AND father.aniid = ANIMAL.AniIdFather ");
                                sQuery.Append(" AND mother.aniid = ANIMAL.AniIdmother ");
                                sQuery.Append(" AND BEDRIJF.farmid IN (" + intListToString(farmids.ToList()) + ") ");

                                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                                //cmd.CommandText = sQuery.ToString();

                                try
                                {
                                    //mDatabase.QueryData(mToken, cmd);
                                    QueryData(sQuery.ToString());
                                    return true;
                                }
                                catch (Exception ex)
                                {
                                    unLogger.WriteError(ex.Message, ex);

                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        public bool CorrigerenArrArr(BEDRIJF pBedrijf, bool pCorrigeerAlleLammeren)
        {
            //BUG 2082 
            if (pBedrijf.FarmId > 0)
            {

                BEDRIJF_ZIEKTE bz = getCurrentBedrijfZiekteStatus(pBedrijf.FarmId, 2);
                if (bz != null)
                {
                    if (bz.Bz_StatusID == 1)
                    {
                        if (bz.Bz_Datum > DateTime.MinValue)
                        {
                            StringBuilder sQuery = new StringBuilder();
                            sQuery.Append(" UPDATE agrobase_sheep.ANIMAL ");
                            sQuery.Append(" JOIN agrobase_sheep.ANIMALCATEGORY ON agrobase_sheep.ANIMALCATEGORY.AniId=agrobase_sheep.ANIMAL.AniId ");
                            sQuery.Append(" JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.FarmId =  agrobase_sheep.ANIMALCATEGORY.FarmId ");
                            sQuery.Append(" JOIN agrofactuur.UBN u ON u.UbnId=agrofactuur.BEDRIJF.UbnID ");
                            sQuery.Append(" LEFT JOIN agrobase_sheep.ANIMAL father ON father.AniId= agrobase_sheep.ANIMAL.AniIdFather ");
                            sQuery.Append(" LEFT JOIN agrobase_sheep.ANIMAL mother ON mother.AniId= agrobase_sheep.ANIMAL.AniIdmother ");
                            sQuery.Append(" SET agrobase_sheep.ANIMAL.aniscrapie = 1 ");
                            sQuery.AppendFormat(" WHERE agrobase_sheep.ANIMALCATEGORY.farmid  ={0} ", pBedrijf.FarmId);
                            sQuery.Append(" AND   ANIMAL.aniid > 0 ");
                            sQuery.Append(" AND (ANIMAL.AniScrapie IS NULL OR ANIMAL.AniScrapie = 0) ");

                            if ((pBedrijf.Programid == 47 || pBedrijf.Programid == 49) && pCorrigeerAlleLammeren)
                            {

                            }
                            else
                            {
                                sQuery.Append(" AND (father.AniScrapie = 1 AND mother.aniscrapie = 1) ");
                                sQuery.Append(" AND father.aniid = ANIMAL.AniIdFather ");
                                sQuery.Append(" AND mother.aniid = ANIMAL.AniIdmother ");
                            }

                            sQuery.Append(" AND ANIMAL.thrid = u.ThrID ");
                            sQuery.AppendFormat(" AND ANIMAL.AniBirthDate > (SELECT BEDRIJF_ZIEKTE.bz_datum FROM agrofactuur.BEDRIJF_ZIEKTE WHERE BEDRIJF_ZIEKTE.bz_ID = {0})", bz.Bz_ID);
                            sQuery.Append(" AND ANIMAL.ThrID = (SELECT agrofactuur.UBN.ThrID FROM agrofactuur.UBN WHERE agrofactuur.UBN.UbnId=u.UbnId) ");



                            sQuery.Append(" AND BEDRIJF.farmid IN (" + pBedrijf.FarmId.ToString() + ") ");

                            //DbCommand cmd = mDatabase.CreateCommand(mToken);
                            //cmd.CommandText = sQuery.ToString();

                            try
                            {
                                //mDatabase.QueryData(mToken, cmd);
                                mDatabase.ExecuteNonQuery(mToken, sQuery.ToString());
                                return true;
                            }
                            catch (Exception ex)
                            {
                                unLogger.WriteError(ex.Message, ex);

                            }
                        }
                    }
                }
            }
            return false;
        }


        private int[] getStamboekenDieMeedoenMetScrapieZiekte()
        {
            List<int> nsfos = utils.getNsfoProgramIds();
            nsfos.Add(47);
            nsfos.Add(49);
            return nsfos.ToArray();
            //return new int[] { 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 47, 49 };
        }
        public bool isdeelnemerBedrijfZiekteNsfo(int pUbnId, int pProgramId)
        {
            if (getStamboekenDieMeedoenMetScrapieZiekte().Contains(pProgramId))
            {

                return true;

            }

            if (pUbnId > 0)
            {

                //BUG 1774 1775
                StringBuilder sbfirst = new StringBuilder();
                sbfirst.Append(" SELECT BEDRIJF.* FROM UBN ");
                sbfirst.Append(" JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid ");
                sbfirst.AppendFormat(" WHERE UBN.UBNid={0}", pUbnId);
                sbfirst.Append(" AND BEDRIJF.FarmId>0 ");
                //sbfirst.Append(" AND (BEDRIJF.ProgId=3 OR BEDRIJF.ProgId=5) ");
                /*
                 * als het huidige programid niet 3 of 5 is dan return false
                 */
                DataSet ds11 = new DataSet();
                DataTable dt11 = mDatabase.QueryData(mToken, ds11, sbfirst, "deelnemer", MissingSchemaAction.Add);
                List<BEDRIJF> lBedrijven = new List<BEDRIJF>();
                foreach (DataRow rw in dt11.Rows)
                {
                    BEDRIJF b = new BEDRIJF();
                    if (mDatabase.FillObject(b, rw))
                    {
                        lBedrijven.Add(b);
                    }
                }
                if (dt11.Rows.Count > 0)
                {

                    var check = from n in lBedrijven where n.Programid == pProgramId select n;
                    if (check.Count() > 0)
                    {
                        if (check.ElementAt(0).ProgId == 3 || check.ElementAt(0).ProgId == 5)
                        {

                        }
                        else { return false; }
                    }

                    DataRow[] foundrows = dt11.Select("Programid=47 OR Programid=49");
                    if (foundrows.Count() > 0)
                    {
                        return true;
                    }
                }


                StringBuilder sb = new StringBuilder();

                sb.Append(" SELECT bz.bz_FarmId ,b.ProgId,b.ProgramId ");
                sb.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz  ");
                sb.Append(" LEFT JOIN agrofactuur.BEDRIJF b ON bz.bz_FarmId = b.FarmId ");
                sb.Append(" LEFT JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId ");

                /*
                     er zijn  bedrijven die geen nsfo zijn maar wel 
                     mee willen doen met nsfo bedrijfsziekte programma
                     die moeten dan ook de meldingen krijgen
                 */
                sb.AppendFormat(" WHERE u.UbnId = {0} ", pUbnId);

                DataSet ds = new DataSet();
                DataTable dt = mDatabase.QueryData(mToken, ds, sb, "deelnemer", MissingSchemaAction.Add);
                if (dt.Rows.Count > 0)
                {
                    bool ret = false;
                    foreach (DataRow rw in dt.Rows)
                    {
                        if (rw["ProgramId"] != DBNull.Value)
                        {
                            if (rw["ProgramId"].ToString() == pProgramId.ToString())
                            {
                                ret = true;
                            }
                        }
                    }
                    return ret;

                }
            }

            return false;
        }

        public DataTable getBedrijfZiekteDatumVerlopen(out string pProgramConfigScrapieAddWeeks, out string pProgramConfigZwoegerziekteAddWeeks)
        {
            //BUG 1271 1 Query and 1 query for All


            StringBuilder bld = new StringBuilder();
            List<PROGRAMCONFIG> pConfigs = getProgramConfigs(0);
            PROGRAMCONFIG pScrapie = pConfigs.Find(delegate (PROGRAMCONFIG p) { return p.FKey == "ScrapieAddWeeks"; });

            if (pScrapie != null)
            {
                pProgramConfigScrapieAddWeeks = pScrapie.FValue;
            }
            else
            {
                pProgramConfigScrapieAddWeeks = "104";
            }

            PROGRAMCONFIG pZwoeger = pConfigs.Find(delegate (PROGRAMCONFIG p) { return p.FKey == "ZwoegerziekteAddWeeks"; });

            if (pZwoeger != null)
            {
                pProgramConfigZwoegerziekteAddWeeks = pZwoeger.FValue;
            }
            else
            {
                pProgramConfigZwoegerziekteAddWeeks = "104";
            }


            int lAddDaysScrapie = (int.Parse(pProgramConfigScrapieAddWeeks) * 7) - 42;//allen die meer dan 6 weken (6*7=42) ervoor zitten 
            int lAddDaysZwoeger = (int.Parse(pProgramConfigZwoegerziekteAddWeeks) * 7) - 42;//allen die meer dan 6 weken (6*7=42) ervoor zitten 
            // 3 groepen 6weken ervoor 3weken ervoor en verlopen
            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Scrapie).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append(" AND agrofactuur.BEDRIJF.ProgId = 3 ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Scrapie).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID   ");//verwijder in deze regel ) bij aanzetten van onderstaande  aanpassing

            //bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=" + lAddDaysScrapie.ToString() + " ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=(bz1.bz_NSFO_Dierziekte_geldigheid*(365/12) -42 ))");
            bld.Append(" AND bz1.bz_StatusID in (1,3,4,5)");

            bld.Append(" UNION ");

            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Zwoegerziekte).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append(" AND agrofactuur.BEDRIJF.ProgId = 3 ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Zwoegerziekte).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID  ");//verwijder in deze regel ) bij aanzetten van onderstaande  aanpassing

            //bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=" + lAddDaysZwoeger.ToString() + " ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=(bz1.bz_NSFO_Dierziekte_geldigheid*(365/12) - 42))");
            bld.Append(" AND bz1.bz_StatusID in (1,3,4,5) ");
            //CAE geit
            bld.Append(" UNION ");

            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CAE).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append(" AND agrofactuur.BEDRIJF.ProgId = 5 ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CAE).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID  ");//verwijder in deze regel ) bij aanzetten van onderstaande  aanpassing

            //bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=" + lAddDaysZwoeger.ToString() + " ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=(bz1.bz_NSFO_Dierziekte_geldigheid*(365/12) - 42))");
            bld.Append(" AND bz1.bz_StatusID in (1,3,4,5) ");
            //CL Geit
            bld.Append(" UNION ");

            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CL).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append(" AND agrofactuur.BEDRIJF.ProgId = 5 ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CL).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID  ");//verwijder in deze regel ) bij aanzetten van onderstaande  aanpassing

            //bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=" + lAddDaysZwoeger.ToString() + " ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )>=(bz1.bz_NSFO_Dierziekte_geldigheid*(365/12) - 42))");
            bld.Append(" AND bz1.bz_StatusID in (1,3,4,5) ");
            //unLogger.WriteInfo(bld.ToString());
            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "verlopenbedrijfsziektes", MissingSchemaAction.Add);
            return tbl;
        }

        public DataTable getBedrijfZiekteRecentGewijzigd(int pNumberOffDaysAgo)
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Scrapie).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Scrapie).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID        )   ");//verwijder ) bij onderstaande aanpassing
            //bld.Append(" AND bz2.bz_NSFO_Dierziekte=1 ) ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )<=" + pNumberOffDaysAgo.ToString() + " ");
            bld.Append(" AND NOT bz1.bz_StatusID=1  ");

            bld.Append(" UNION ");

            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Zwoegerziekte).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");

            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_Zwoegerziekte).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID         )  ");//verwijder ) bij onderstaande aanpassing
            //bld.Append(" AND bz2.bz_NSFO_Dierziekte=1 ) ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )<=" + pNumberOffDaysAgo.ToString() + " ");
            bld.Append(" AND NOT bz1.bz_StatusID=1  ");

            bld.Append(" UNION ");

            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CAE).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append(" AND agrofactuur.BEDRIJF.ProgId = 5 ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CAE).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID         )  ");//verwijder ) bij onderstaande aanpassing
            //bld.Append(" AND bz2.bz_NSFO_Dierziekte=1 ) ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )<=" + pNumberOffDaysAgo.ToString() + " ");
            bld.Append(" AND NOT bz1.bz_StatusID=1  ");

            bld.Append(" UNION ");

            bld.Append(" SELECT ");
            bld.Append(" agrofactuur.BEDRIJF.FarmId,agrofactuur.BEDRIJF.UbnId,agrofactuur.UBN.Bedrijfsnummer, ");
            bld.Append(" agrofactuur.THIRD.ThrCompanyName,agrofactuur.THIRD.ThrStreet1,  ");
            bld.Append(" agrofactuur.THIRD.ThrCity,agrofactuur.THIRD.ThrZipCode,agrofactuur.THIRD.ThrSecondName, bz1.* ");
            bld.Append(" FROM agrofactuur.BEDRIJF_ZIEKTE bz1  ");
            bld.Append(" LEFT JOIN agrofactuur.BEDRIJF  ON agrofactuur.BEDRIJF.FarmId = bz1.bz_FarmID  ");
            bld.Append(" LEFT JOIN agrofactuur.UBN  ON agrofactuur.UBN.UBNid = agrofactuur.BEDRIJF.UBNid   ");
            bld.Append(" LEFT JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID  ");
            bld.Append(" WHERE bz1.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CL).ToString() + " ");
            bld.Append(" AND agrofactuur.BEDRIJF.FarmId>0  ");
            bld.Append(" AND agrofactuur.BEDRIJF.ProgId = 5 ");
            bld.Append("  AND agrofactuur.bz1.bz_FarmID>0  ");

            bld.Append(" AND bz1.bz_Datum = (   	");
            bld.Append(" SELECT MAX(bz2.bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE bz2");
            bld.Append(" WHERE bz2.bz_ZiekteID=" + ((int)VSM.RUMA.CORE.DB.LABELSConst.labIds.BEDRIJF_ZIEKTE_CL).ToString() + " ");
            bld.Append(" AND bz2.bz_FarmID=bz1.bz_FarmID         )  ");//verwijder ) bij onderstaande aanpassing
            //bld.Append(" AND bz2.bz_NSFO_Dierziekte=1 ) ");
            bld.Append(" AND DATEDIFF(NOW(), bz1.bz_Datum )<=" + pNumberOffDaysAgo.ToString() + " ");
            bld.Append(" AND NOT bz1.bz_StatusID=1  ");

            DataSet ds = new DataSet();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, bld, "recentgewijzigdebedrijfsziektes", MissingSchemaAction.Add);
            return tbl;
        }

        public DataTable getBedrijfZiekteStatussenByAniIdMovements(List<int> pZiekteIds, int pAniId)
        {
            DataTable tbl = new DataTable();
            if (pZiekteIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();

                for (int i = 0; i < pZiekteIds.Count(); i++)
                {

                    lQuery.Append(" SELECT ANIMAL.AniId,ANIMAL.AniScrapie,MOVEMENT.*,   ");
                    lQuery.Append(" (  ");
                    lQuery.Append(" SELECT agrofactuur.BEDRIJF_ZIEKTE.bz_StatusID FROM agrofactuur.BEDRIJF_ZIEKTE  ");
                    lQuery.Append(" LEFT JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.FarmID=agrofactuur.BEDRIJF_ZIEKTE.bz_FarmId ");
                    lQuery.Append(" WHERE agrofactuur.BEDRIJF.UbnId = MOVEMENT.UbnId   ");
                    lQuery.AppendFormat(" AND agrofactuur.BEDRIJF_ZIEKTE.bz_ZiekteId = {0} ", pZiekteIds[i]);
                    lQuery.Append(" ORDER BY agrofactuur.BEDRIJF_ZIEKTE.bz_Datum DESC  ");
                    lQuery.Append(" LIMIT 1   ");
                    lQuery.Append(" ) AS Status,  ");
                    lQuery.Append(" ( ");
                    lQuery.Append(" SELECT agrofactuur.BEDRIJF_ZIEKTE.bz_Datum FROM agrofactuur.BEDRIJF_ZIEKTE ");
                    lQuery.Append(" LEFT JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.FarmID=agrofactuur.BEDRIJF_ZIEKTE.bz_FarmId  ");
                    lQuery.Append("  WHERE agrofactuur.BEDRIJF.UbnId = MOVEMENT.UbnId  ");
                    lQuery.AppendFormat(" AND agrofactuur.BEDRIJF_ZIEKTE.bz_ZiekteId = {0} ", pZiekteIds[i]);
                    lQuery.Append(" ORDER BY agrofactuur.BEDRIJF_ZIEKTE.bz_Datum DESC   ");
                    lQuery.Append(" LIMIT 1   ");
                    lQuery.Append(" ) AS Datum , ");
                    lQuery.Append("  ( ");
                    lQuery.Append(" SELECT agrofactuur.BEDRIJF_ZIEKTE.bz_FarmId FROM agrofactuur.BEDRIJF_ZIEKTE ");
                    lQuery.Append(" LEFT JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.FarmID=agrofactuur.BEDRIJF_ZIEKTE.bz_FarmId  ");
                    lQuery.Append("  WHERE agrofactuur.BEDRIJF.UbnId = MOVEMENT.UbnId  ");
                    lQuery.AppendFormat(" AND agrofactuur.BEDRIJF_ZIEKTE.bz_ZiekteId = {0} ", pZiekteIds[i]);
                    lQuery.Append(" ORDER BY agrofactuur.BEDRIJF_ZIEKTE.bz_Datum DESC  ");
                    lQuery.Append(" LIMIT 1   ");
                    lQuery.Append(" ) AS FarmID ");
                    lQuery.Append(" ,");
                    lQuery.AppendFormat("  {0} AS Ziekte ", pZiekteIds[i]);
                    lQuery.Append(" FROM ANIMAL");
                    lQuery.Append(" LEFT JOIN MOVEMENT ON MOVEMENT.AniId=ANIMAL.aniId");
                    lQuery.AppendFormat("  WHERE ANIMAL.AniId={0} ", pAniId);
                    lQuery.AppendFormat("  AND MovId>0 ");



                    if (i < pZiekteIds.Count() - 1)
                    {
                        lQuery.Append(" UNION  ");
                    }

                }
                lQuery.Append(" ORDER BY  MovDate DESC ,MovId DESC,Ziekte");
                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "getBedrijfZiekteStatussenByAniId", MissingSchemaAction.Add);
                return tbl;
            }
            return tbl;
        }

        public DataTable getBedrijfZiekteStatussenByUbnIds(List<int> pUbnIds, List<int> pZiekteIds)
        {
            /* for copypaste
                 SELECT BEDRIJF.*,UBN.*,THIRD.* , 
                 ( 
                 SELECT BEDRIJF_ZIEKTE.bz_StatusID FROM BEDRIJF_ZIEKTE 
                 WHERE bz_FarmId = BEDRIJF.FarmId 
                 AND bz_ZiekteId = 1
                 ORDER BY bz_Datum DESC 
                 LIMIT 1  
                 ) AS Status, 
                 ( 
                  SELECT BEDRIJF_ZIEKTE.bz_Datum FROM BEDRIJF_ZIEKTE 
                 WHERE bz_FarmId = BEDRIJF.FarmId 
                 AND bz_ZiekteId = 1
                  ORDER BY bz_Datum DESC  
                 LIMIT 1  
                   ) AS Datum , 1 AS Ziekte 
                 FROM BEDRIJF  
                 LEFT JOIN UBN ON UBN.UBNid=BEDRIJF.UBNid 
                 LEFT JOIN THIRD ON THIRD.ThrId=UBN.ThrId
                 WHERE UBN.UBNid IN (107745)
             */
            DataTable tbl = new DataTable();
            if (pUbnIds.Count() > 0 && pZiekteIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();

                for (int i = 0; i < pZiekteIds.Count(); i++)
                {

                    lQuery.Append(" SELECT BEDRIJF.*,UBN.*,THIRD.* , ");
                    lQuery.Append(" ( ");
                    lQuery.Append(" SELECT BEDRIJF_ZIEKTE.bz_StatusID FROM BEDRIJF_ZIEKTE ");
                    lQuery.Append(" WHERE bz_FarmId = BEDRIJF.FarmId ");
                    lQuery.AppendFormat(" AND bz_ZiekteId = {0} ", pZiekteIds[i]);
                    lQuery.Append(" ORDER BY bz_Datum DESC ");
                    lQuery.Append(" LIMIT 1  ");
                    lQuery.Append(" ) AS Status, ");
                    lQuery.Append(" ( ");
                    lQuery.Append(" SELECT BEDRIJF_ZIEKTE.bz_Datum FROM BEDRIJF_ZIEKTE ");
                    lQuery.Append(" WHERE bz_FarmId = BEDRIJF.FarmId ");
                    lQuery.AppendFormat(" AND bz_ZiekteId = {0} ", pZiekteIds[i]);
                    lQuery.Append(" ORDER BY bz_Datum DESC  ");
                    lQuery.Append(" LIMIT 1  ");
                    lQuery.AppendFormat(" ) AS Datum , {0} AS Ziekte ", pZiekteIds[i]);
                    lQuery.Append(" FROM BEDRIJF  ");
                    lQuery.Append(" LEFT JOIN UBN ON UBN.UBNid=BEDRIJF.UBNid ");
                    lQuery.Append(" LEFT JOIN THIRD ON THIRD.ThrId=UBN.ThrId ");
                    lQuery.AppendFormat(" WHERE UBN.UBNid IN ({0}) AND BEDRIJF.FarmId>0 AND BEDRIJF.ProgId IN (3,5) ", intListToString(pUbnIds));

                    if (i < pZiekteIds.Count() - 1)
                    {
                        lQuery.Append(" UNION  ");
                    }

                }
                DataSet ds = new DataSet();
                tbl = mDatabase.QueryData(mToken, ds, lQuery, "BedrijfZiekteStatussenByUbnIds", MissingSchemaAction.Add);
                return tbl;
            }
            return tbl;
        }

        public SALE GetSale(int MovId)
        {
            SALE lSal = new SALE();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM SALE");
            lQuery.AppendFormat(" WHERE MovId = {0}", MovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lSal, lQuery);
            return lSal;
        }
        public List<SALE> GetSales(List<int> pMovIds)
        {
            List<SALE> lResultValue = new List<SALE>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM SALE ");
            lQuery.AppendFormat(" WHERE MovId IN ({0}) ", intListToString(pMovIds));
            System.Data.DataTable dtrecs = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drsecrecs in dtrecs.Rows)
            {
                SALE lsecr = new SALE();
                if (mDatabase.FillObject(lsecr, drsecrecs))
                {
                    lResultValue.Add(lsecr);
                }
            }
            return lResultValue;
        }
        public SECONRAC GetSeconRacByKey(int pAnimalId, int RacId)
        {
            /* getSeconRac
             * BEGIN
	                SELECT *
	                FROM SECONRAC 
	                WHERE RacId = RaceId
	                AND AniId = AnimalId;
                END*/
            //SECONRAC lSeconRac = new SECONRAC();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getSeconRac";
            //mDatabase.AddParameter(cmd, "AnimalId", pAnimalId);
            //mDatabase.AddParameter(cmd, "RaceId", RacId);
            //mDatabase.FillObject(mToken.getLastChildConnection(), lSeconRac, cmd);
            //return lSeconRac;
            SECONRAC lSeconRac = new SECONRAC();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM SECONRAC");
            lQuery.AppendFormat(" WHERE RacId = {0}", RacId);
            lQuery.AppendFormat(" AND AniId = {0}", pAnimalId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lSeconRac, lQuery);
            return lSeconRac;
        }
        public List<SECONRAC> GetSeconRacSByAnimalId(int pAnimalId)
        {
            List<SECONRAC> lResultValue = new List<SECONRAC>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT DISTINCT * FROM SECONRAC");
            lQuery.AppendFormat(" WHERE AniId = {0} ORDER BY SraRate DESC ", pAnimalId);
            System.Data.DataTable dtrecs = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drsecrecs in dtrecs.Rows)
            {
                SECONRAC lsecr = new SECONRAC();
                if (mDatabase.FillObject(lsecr, drsecrecs))
                {
                    lResultValue.Add(lsecr);
                }
            }
            return lResultValue;
        }

        public List<SECONRAC> GetSeconRacSByAnimalIds(List<int> pAnimalIds)
        {
            List<SECONRAC> lResultValue = new List<SECONRAC>();
            if (pAnimalIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT DISTINCT * FROM SECONRAC");
                lQuery.AppendFormat(" WHERE AniId IN({0}) ORDER BY SraRate DESC ", intListToString(pAnimalIds));
                System.Data.DataTable dtrecs = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow drsecrecs in dtrecs.Rows)
                {
                    SECONRAC lsecr = new SECONRAC();
                    if (mDatabase.FillObject(lsecr, drsecrecs))
                    {
                        lResultValue.Add(lsecr);
                    }
                }
            }
            return lResultValue;
        }

        public DataTable getChildRaces(ANIMAL pAnimal, int pProgramId, int pProgId)
        {

            /*
                SELECT a.AniLifeNumber,a.AniIdMother,a.AniIdFather,a.AniSex, SECONRAC.* ,l.LabLabel FROM ANIMAL a
                LEFT JOIN SECONRAC  ON a.AniId = SECONRAC.AniId
                LEFT JOIN ANIMAL m ON m.AniId = a.AniIdMother
                LEFT JOIN agrofactuur.AGRO_LABELS l ON (l.LabProgramId=0 AND l.LabProgId=3 AND l.LabCountry=0 AND l.LabKind=205 AND l.LabId=SECONRAC.RacId)
                WHERE m.AniId = 1600519
             */
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.AniLifeNumber,a.AniIdMother,a.AniIdFather,a.AniSex, SECONRAC.* ,l.LabLabel FROM FROM ANIMAL a ");
            lQuery.Append(" LEFT JOIN SECONRAC ON a.AniId = SECONRAC.AniId ");
            if (pAnimal.AniSex == 1)
            {
                lQuery.Append(" LEFT JOIN ANIMAL m ON m.AniId = a.AniIdFather ");
            }
            else
            {
                lQuery.Append(" LEFT JOIN ANIMAL m ON m.AniId = a.AniIdMother ");
            }
            lQuery.AppendFormat(" LEFT JOIN agrofactuur.AGRO_LABELS l ON ");
            lQuery.AppendFormat(" ( l.LabProgramId={0} AND l.LabProgId={1} AND l.LabCountry=0 AND l.LabKind={2} AND l.LabId=SECONRAC.RacId )", pProgramId, pProgId, (int)VSM.RUMA.CORE.DB.LABELSConst.labKind.SECONRACRAC_LONG);

            lQuery.AppendFormat(" WHERE m.AniId = {0}", pAnimal.AniId);
            lQuery.Append(" ORDER BY SECONRAC.AniId ");

            System.Data.DataTable dtrecs = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            return dtrecs;

        }
        public STATUS GetStatus(int EventID)
        {
            STATUS lftp = new STATUS();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM STATUS");
            lQuery.AppendFormat(" WHERE  EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lftp, lQuery);
            return lftp;
        }

        public TRANSPLA GetTranspla(int EventID)
        {
            TRANSPLA lTranspla = new TRANSPLA();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM TRANSPLA");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lTranspla, lQuery);
            return lTranspla;
        }
        public TAKEEMBR getTakeEmbr(int pEventId)
        {
            TAKEEMBR lTakeembr = new TAKEEMBR();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM TAKEEMBR");
            lQuery.AppendFormat(" WHERE EventId = {0}", pEventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lTakeembr, lQuery);
            return lTakeembr;
        }
        public List<TRANSMIT> GetTransmitByAniIdFarmId(int pFarmId, int pUbnID, int pAniId)
        {
            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT TRANSMIT.* FROM TRANSMIT ");
            lQuery.AppendFormat(" WHERE (TRANSMIT.farmid ={0} OR TRANSMIT.UbnID ={1}) AND TRANSMIT.AniId={2} AND (TRANSMIT.Koppelnr>0 OR TRANSMIT.ProcesComputerId>0) ", pFarmId, pUbnID, pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new DataSet(), lQuery, "Transmit", MissingSchemaAction.Add);
            List<TRANSMIT> lResultSet = new List<TRANSMIT>();
            foreach (DataRow rw in tbl.Rows)
            {
                TRANSMIT lTrans = new TRANSMIT();
                mDatabase.FillObject(lTrans, rw);
                lResultSet.Add(lTrans);
            }
            return lResultSet;
        }
        public List<TRANSMIT> GetTransmitByAniIdFarmId2(int pFarmId, int pUbnID, int pAniId)
        {
            string qry = string.Format(" SELECT TRANSMIT.* FROM TRANSMIT WHERE (TRANSMIT.farmid ={0} OR TRANSMIT.UbnID ={1}) AND TRANSMIT.AniId={2} ", pFarmId, pUbnID, pAniId);
            return getList<TRANSMIT>(QueryData(qry));
        }
        public void getTransPorteurAndMiddel(int pTransporterThrId, out THIRD pTransporteur, out List<TRANSPRT> pLTransprt)
        {
            pTransporteur = new THIRD();
            pLTransprt = new List<TRANSPRT>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT t.*,TRANSPRT.* FROM agrofactuur.THIRD t ");
            lQuery.Append(" INNER JOIN TRANSPRT ON t.ThrId = TRANSPRT.Transporter ");
            lQuery.AppendFormat(" WHERE  t.ThrId = {0}", pTransporterThrId);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (tbl.Rows.Count > 0)
            {
                mDatabase.FillObject(pTransporteur, tbl.Rows[0]);
                foreach (DataRow drtrns in tbl.Rows)
                {
                    TRANSPRT lTransprt = new TRANSPRT();
                    if (mDatabase.FillObject(lTransprt, drtrns))
                    {
                        pLTransprt.Add(lTransprt);
                    }
                }
            }
        }
        public TRANSPRT GetTransprt(int pTransportID)
        {
            TRANSPRT ltrs = new TRANSPRT();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM TRANSPRT");
            lQuery.AppendFormat(" WHERE  TransportID = {0}", pTransportID);
            mDatabase.FillObject(mToken.getLastChildConnection(), ltrs, lQuery);
            return ltrs;
        }
        public List<TRANSPRT> GetTransprts(int pTransporter)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM TRANSPRT   WHERE Transporter = " + pTransporter.ToString() + " ORDER BY LicensePlate");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<TRANSPRT> lResultList = new List<TRANSPRT>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                TRANSPRT lTransprt = new TRANSPRT();
                if (mDatabase.FillObject(lTransprt, drtrns))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }

        public List<TRANSPRT> GetAllTransprts()
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM TRANSPRT  ORDER BY LicensePlate");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<TRANSPRT> lResultList = new List<TRANSPRT>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                TRANSPRT lTransprt = new TRANSPRT();
                if (mDatabase.FillObject(lTransprt, drtrns))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }

        public TREATMEN GetTreatmen(int EventID)
        {
            TREATMEN lftp = new TREATMEN();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM TREATMEN");
            lQuery.AppendFormat(" WHERE  EventId = {0}", EventID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lftp, lQuery);
            return lftp;
        }

        public List<TREATMEN> GetTreatmens(int TreFirstApplicationId, out List<EVENT> events)
        {
            events = new List<EVENT>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append($@" 

SELECT e.*,tr.* FROM TREATMEN tr
JOIN EVENT e ON tr.EventId=e.EventID 
WHERE   tr.TreFirstApplicationId = {TreFirstApplicationId}        
 AND e.EventId>0

");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            List<TREATMEN> lResultList = new List<TREATMEN>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                TREATMEN lTreatmen = new TREATMEN();
                EVENT lEvent = new EVENT();
                if (mDatabase.FillObject(lTreatmen, drtrns))
                {
                    lResultList.Add(lTreatmen);
                }
                if (mDatabase.FillObject(lEvent, drtrns))
                {
                    events.Add(lEvent);
                }
            }
            return lResultList;
        }

        public void GetTreatmenByTreMedPlannr(int aniid, int tremedplannr, out EVENT pevent, out TREATMEN treatmen)
        {

            treatmen = new TREATMEN();
            pevent = new EVENT();
            try
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append($@" SELECT TREATMEN.*,EVENT.* FROM TREATMEN 
                JOIN EVENT ON EVENT.EventId = TREATMEN.EventId
                WHERE EVENT.AniID={aniid} AND TREATMEN.TreMedPlannr={tremedplannr} ");

                DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery, MissingSchemaAction.Add);
                if (tbl.Rows.Count > 0)
                {
                    mDatabase.FillObject(pevent, tbl.Rows[0]);
                    mDatabase.FillObject(treatmen, tbl.Rows[0]);
                }
            }
            catch (Exception exc)
            {
                unLogger.WriteError(exc.ToString(), exc);
            }
        }

        public THIRDUBN GetThirdUBN(string pTHirdId, string pUbnId)
        {
            THIRDUBN lThirdUbn = new THIRDUBN();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRDUBN");
            lQuery.AppendFormat(" WHERE ThrId = {0} and UBNid = {1}", pTHirdId, pUbnId);
            mDatabase.FillObject(mToken, lThirdUbn, lQuery);
            return lThirdUbn;
        }
        public List<THIRDUBN> getThirdUBNs(int pUbnId)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM THIRDUBN   WHERE UBNid = " + pUbnId);
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRDUBN> lResultList = new List<THIRDUBN>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                THIRDUBN lTransprt = new THIRDUBN();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        public List<THIRD> GetThridByByUBNAndKind(int pUbnId, LABELSConst.relatieKind pRelatieKind)
        {
            List<BEDRIJF> farms = getBedrijvenByUBNId(pUbnId);
            List<int> farmids = new List<int>();
            foreach (BEDRIJF b in farms)
            {
                if (!farmids.Contains(b.FarmId))
                {
                    farmids.Add(b.FarmId);
                }
            }

            string fids = intListToString(farmids);

            StringBuilder lsb = new StringBuilder("SELECT * FROM THIRD INNER JOIN THIRDUBN ON THIRD.ThrId = THIRDUBN.ThrId  WHERE THIRDUBN.UBNid = " + pUbnId);
            lsb.AppendFormat(" AND THIRD.ThrId IN (SELECT thrId FROM THIRDKIN WHERE thkDescriptionId = {0} AND (isnull(THIRDKIN.ThkFarmID) OR THIRDKIN.ThkFarmID = 0  ", Convert.ToInt32(pRelatieKind));
            if (farmids.Count() > 0)
            {
                lsb.AppendFormat(" OR THIRDKIN.ThkFarmID in (" + fids + "))) ");
            }
            else
            {
                lsb.AppendFormat(" )) ");
            }
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {
                    lResultList.Add(lThr);
                }
            }

            return lResultList;
        }
        public List<THIRD> GetThridByByFarmIDAndKind(int pFarmID, int pRelatieKind)
        {
            StringBuilder lsb = new StringBuilder("SELECT THIRD.* FROM THIRD");
            lsb.Append(" INNER JOIN THIRDKIN ON THIRDKIN.ThrId = THIRD.ThrId");
            lsb.Append(" INNER JOIN THIRDUBN ON THIRDUBN.ThrId = THIRD.ThrId");
            lsb.Append(" INNER JOIN BEDRIJF ON BEDRIJF.UBNid = THIRDUBN.UBNid");
            lsb.Append(" WHERE THIRDKIN.thkDescriptionId = " + pRelatieKind.ToString());
            lsb.Append(" AND (isnull(THIRDKIN.ThkFarmID) OR THIRDKIN.ThkFarmID = 0  OR THIRDKIN.ThkFarmID=" + pFarmID.ToString() + ") ");
            lsb.Append(" AND BEDRIJF.FarmId = " + pFarmID.ToString());

            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {
                    lResultList.Add(lThr);
                }
            }
            return lResultList;
        }
        public List<THIRD> GetThirdsByThirdIds(List<int> pThirdIds)
        {
            List<THIRD> lResultList = new List<THIRD>();
            if (pThirdIds.Count() > 0)
            {
                StringBuilder lsb = new StringBuilder("SELECT agrofactuur.THIRD.* FROM agrofactuur.THIRD");

                lsb.Append(" WHERE THIRD.ThrId IN (" + intListToString(pThirdIds) + ") ");


                DataTable ltbl = mDatabase.QueryData(mToken, lsb);

                foreach (DataRow dr in ltbl.Rows)
                {
                    THIRD lThr = new THIRD();
                    if (mDatabase.FillObject(lThr, dr))
                    {
                        lResultList.Add(lThr);
                    }
                }
            }
            return lResultList;
        }
        public List<THIRD> GetThirdByKind(int pFarmID, LABELSConst.relatieKind pRelatieKind)
        {
            StringBuilder lsb = new StringBuilder();
            lsb.Append(@" SELECT DISTINCT(t.ThrId),t.* FROM agrofactuur.THIRD t 
                          INNER JOIN agrofactuur.THIRDKIN tk ON tk.thrId=t.thrId ");
            lsb.AppendFormat(" WHERE thkDescriptionId=" + Convert.ToInt32(pRelatieKind).ToString() + "  AND ( tk.ThkFarmID={0} )", pFarmID);
            lsb.AppendLine(" ORDER BY tk.ThkselectedKind DESC ");
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {

                    var c = from n in lResultList
                            where n.ThrId == lThr.ThrId
                            select n;
                    if (c.Count() == 0)
                    {
                        lResultList.Add(lThr);
                    }


                }
            }
            return lResultList;
        }
        public List<THIRD> GetThirdByKind(LABELSConst.relatieKind pRelatieKind)
        {
            StringBuilder lsb = new StringBuilder();
            lsb.Append("SELECT DISTINCT(t.ThrId),t.* FROM agrofactuur.THIRD t");
            lsb.Append(" INNER JOIN agrofactuur.THIRDKIN tk ON tk.thrId=t.thrId ");
            lsb.Append(" WHERE thkDescriptionId=" + Convert.ToInt32(pRelatieKind).ToString() + "  AND tk.ThkFarmID=0 ");
            lsb.AppendLine(" ORDER BY tk.ThkselectedKind DESC ");
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {

                    var c = from n in lResultList
                            where n.ThrId == lThr.ThrId
                            select n;
                    if (c.Count() == 0)
                    {
                        lResultList.Add(lThr);
                    }


                }
            }
            return lResultList;
        }
        public List<THIRD> GetThirdByKinds(List<int> pThirdKinds)
        {
            StringBuilder lsb = new StringBuilder();
            lsb.Append(
                "SELECT DISTINCT(t.ThrId),t.* FROM agrofactuur.THIRD t" +
                " INNER JOIN agrofactuur.THIRDKIN tk ON (tk.thrId=t.thrId AND thkDescriptionId IN (" + intListToString(pThirdKinds) + "))");

            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {

                    var c = from n in lResultList
                            where n.ThrId == lThr.ThrId
                            select n;
                    if (c.Count() == 0)
                    {
                        lResultList.Add(lThr);
                    }


                }
            }
            return lResultList;
        }
        public List<THIRD> GetMedeEigenaren(int pAniId)
        {
            StringBuilder lsb = new StringBuilder("SELECT  THIRD.*  FROM agrofactuur.THIRD ");
            lsb.Append(" INNER JOIN agrofactuur.UBN ON agrofactuur.UBN.ThrID = agrofactuur.THIRD.ThrId ");
            lsb.Append(" INNER JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.UbnId = agrofactuur.UBN.UbnId ");
            lsb.Append(" INNER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.FarmId = agrofactuur.BEDRIJF.FarmId ");
            lsb.Append(" WHERE ANIMALCATEGORY.Ani_Mede_Eigenaar=1 ");
            lsb.AppendFormat(" AND ANIMALCATEGORY.AniId = {0} ", pAniId);
            DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {
                    lResultList.Add(lThr);
                }
            }
            return lResultList;
        }
        public int GetAantalMedeEigenaren(int pAniId)
        {
            StringBuilder lsb = new StringBuilder("  SELECT COUNT(ANIMALCATEGORY.FarmId) AS aantal FROM ANIMALCATEGORY   ");
            lsb.Append(" WHERE ANIMALCATEGORY.Ani_Mede_Eigenaar=1 ");
            lsb.AppendFormat(" AND ANIMALCATEGORY.AniId = {0} ", pAniId);
            DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);

            if (ltbl.Rows.Count == 1)
            {
                if (ltbl.Rows[0]["aantal"] != DBNull.Value)
                {
                    int ret = 0;
                    int.TryParse(ltbl.Rows[0]["aantal"].ToString(), out ret);
                    return ret;
                }
            }
            return 0;
        }
        public THIRD GetThirdByBrs_Number(string pBrs_Number)
        {
            THIRD lThird = new THIRD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE replace(Thr_Brs_Number,\" \",\"\") = '{0}' ", pBrs_Number);
            mDatabase.FillObject(mToken, lThird, lQuery);
            return lThird;
        }
        public List<THIRD> GetThirdsByEmailAdres(string pEmailadres)
        {
            List<THIRD> lResultList = new List<THIRD>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE replace(ThrEmail,\" \",\"\") = '{0}' ", pEmailadres);
            DataTable ltbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in ltbl.Rows)
            {
                THIRD lThr = new THIRD();
                if (mDatabase.FillObject(lThr, dr))
                {
                    lResultList.Add(lThr);
                }
            }
            return lResultList;
        }
        public THIRD GetThirdBySofiNumber(string pSocialSecurity_Number)
        {
            THIRD lThird = new THIRD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE replace(ThrSocialSecurityNr,\" \",\"\") = '{0}' ", pSocialSecurity_Number);
            mDatabase.FillObject(mToken, lThird, lQuery);
            return lThird;
        }
        public List<THIRD> getThirdsByUBNid(string pUbnId)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM THIRD INNER JOIN THIRDUBN ON THIRD.ThrId = THIRDUBN.ThrId  WHERE THIRDUBN.UBNid = " + pUbnId);
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRD> lResultList = new List<THIRD>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                THIRD lTransprt = new THIRD();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        public THIRDKIN GetThirdKin(int pTHirdId, int pThkDescriptionId, int pFarmId)
        {
            THIRDKIN lThirdKin = new THIRDKIN();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRDKIN");
            if (pFarmId > 0)
            {
                lQuery.AppendFormat(" WHERE ThrId = {0} and ThkDescriptionId = {1} and ThkFarmID = {2} ", pTHirdId, pThkDescriptionId, pFarmId);
            }
            else
            {
                lQuery.AppendFormat(" WHERE ThrId = {0} and ThkDescriptionId = {1} and ( ThkFarmID = 0 OR isnull(ThkFarmID) ) ", pTHirdId, pThkDescriptionId);
            }
            mDatabase.FillObject(mToken, lThirdKin, lQuery);
            return lThirdKin;
        }

        public List<THIRDKIN> GetThirdKinds(int pGebruikersFarmId, int pTHirdId)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM agrofactuur.THIRDKIN WHERE Thrid = " + pTHirdId.ToString());
            lsb.AppendFormat(" AND (ThkFarmID = {0} OR ThkFarmID = 0 OR isnull(ThkFarmID) )", pGebruikersFarmId);
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<THIRDKIN> lResultList = new List<THIRDKIN>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                THIRDKIN lTransprt = new THIRDKIN();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        public FTPACTIO GetFtpActioByActionNumber(int pActionNumber)
        {
            FTPACTIO lftp = new FTPACTIO();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM FTPACTIO");
            lQuery.AppendFormat(" WHERE ActionNumber = {0}", pActionNumber);
            mDatabase.FillObject(mToken, lftp, lQuery);
            return lftp;
        }
        public List<MOVEMENT> GetMovements(int pAniId, int pMovKind)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE AniId = " + pAniId.ToString() + " AND MovKind= " + pMovKind.ToString() + "  AND MOVEMENT.MovId>0  ORDER BY MovDate");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }
        public List<MOVEMENT> GetMovements(List<int> pMovIds)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            if (pMovIds.Count() > 0)
            {
                StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE MOVEMENT.MovId IN (" + intListToString(pMovIds) + ")  ORDER BY MovDate");
                DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
                MOVEMENT lMovement;
                foreach (DataRow drMovement in dtMovements.Rows)
                {
                    lMovement = new MOVEMENT();
                    if (mDatabase.FillObject(lMovement, drMovement))
                    {
                        lResultValue.Add(lMovement);
                    }
                }
            }
            return lResultValue;
        }
        public List<MOVEMENT> GetMovementsByAniIdMovkindUbn(int pAniId, int pMovKind, int pUbnId)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE AniId = " + pAniId.ToString() + " AND MovKind= " + pMovKind.ToString() + " AND UbnId= " + pUbnId.ToString() + "  AND MOVEMENT.MovId>0   ORDER BY MovDate");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }

        public List<MOVEMENT> GetMovementsByUbn(int pAniId, int pUbnId)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE AniId = " + pAniId.ToString() + " AND UbnId= " + pUbnId.ToString() + "  AND MOVEMENT.MovId>0  ORDER BY MovDate DESC");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }
        public List<MOVEMENT> GetMovementsOnlyByUbn(int pUbnId)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE  UbnId= " + pUbnId.ToString() + "  AND MOVEMENT.MovId>0  ORDER BY MovDate DESC");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }

        public List<MOVEMENT> getMovementsByBedrijf(BEDRIJF pBedrijf)
        {

            StringBuilder sb = new StringBuilder(" SELECT MOVEMENT.* FROM MOVEMENT INNER JOIN ANIMALCATEGORY ON MOVEMENT.AniId=ANIMALCATEGORY.AniId");
            sb.AppendFormat(" WHERE ANIMALCATEGORY.FarmId = {0} AND", pBedrijf.FarmId);
            sb.Append(" (ANIMALCATEGORY.Anicategory>0 AND ANIMALCATEGORY.Anicategory<5 )");
            sb.AppendFormat(" AND (MOVEMENT.UbnId ={0})  AND MOVEMENT.MovId>0 ", pBedrijf.UBNid);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            List<MOVEMENT> lResultList = new List<MOVEMENT>();
            foreach (DataRow drMov in tbl.Rows)
            {
                MOVEMENT lMov = new MOVEMENT();
                if (mDatabase.FillObject(lMov, drMov))
                {
                    lResultList.Add(lMov);
                }
            }
            return lResultList;
        }
        public List<MOVEMENT> getMovementsByMovThird_UbnAndKind(int pMovThird_UBNid, int MovKind)
        {
            StringBuilder sb = new StringBuilder(" SELECT * FROM MOVEMENT");
            sb.AppendFormat(" WHERE MovThird_UBNid = {0}", pMovThird_UBNid);
            sb.AppendFormat(" AND MOVEMENT.MovId>0  AND MovKind = {0} ", MovKind);
            sb.Append(" ORDER BY MovDate");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            List<MOVEMENT> lResultList = new List<MOVEMENT>();
            foreach (DataRow drMov in tbl.Rows)
            {
                MOVEMENT lMov = new MOVEMENT();
                if (mDatabase.FillObject(lMov, drMov))
                {
                    lResultList.Add(lMov);
                }
            }
            return lResultList;
        }
        public List<MOVEMENT> GetMovementsByMovKindUbn(int pMovKind, BEDRIJF pBedrijf)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT ");
            lsb.Append(" INNER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.AniId=MOVEMENT.AniId ");
            lsb.AppendFormat(" WHERE  ANIMALCATEGORY.FarmId={0} ", pBedrijf.FarmId);
            lsb.AppendFormat(" AND MOVEMENT.MovKind={0} ", pMovKind);
            lsb.AppendFormat(" AND (MOVEMENT.UbnId={0}) ", pBedrijf.UBNid);
            lsb.Append("  AND MOVEMENT.MovId>0  ORDER BY MovDate DESC");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }

        public DataTable GetLocatiesGroupedByDate(BEDRIJF pBedrijf)
        {

            StringBuilder lsb = new StringBuilder(" SELECT MOVEMENT.MovDate AS Datum,COUNT(MOVEMENT.MovDate) AS Aantal,PLACE.CageNr    ");
            lsb.Append("  FROM MOVEMENT  ");
            lsb.Append(" INNER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.AniId=MOVEMENT.AniId ");
            lsb.Append(" INNER JOIN PLACE ON PLACE.MovId = MOVEMENT.MovId ");

            lsb.AppendFormat(" WHERE  ANIMALCATEGORY.FarmId={0} ", pBedrijf.FarmId);
            lsb.Append(" AND MOVEMENT.MovKind=8 ");
            lsb.AppendFormat(" AND (MOVEMENT.UbnId={0}) ", pBedrijf.UBNid);
            lsb.Append("  AND MOVEMENT.MovId>0 ");

            lsb.Append(" GROUP BY MOVEMENT.MovDate, PLACE.CageNr  ORDER BY MovDate DESC");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);

            return dtMovements;
        }

        public DataTable GetPlaces(int ubnid)
        {
            DataTable tbl = new DataTable();
            if (ubnid > 0)
            {
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.CommandText = $@"SELECT mov.AniId,  mov.MovDate, mov.movorder, mov.movid, mov.MovComment, mov.RemId, mov.GroupNr , 
                                mov.UbnId, mov.Ag_Id, mov.MovKind, pl.StableNr, pl.SectionNr, pl.CageNrId, pl.CageNr, pl.Groupnr AS PlaceGroupId
                            FROM MOVEMENT mov
                                JOIN PLACE pl ON mov.MovId = pl.MovId
                                JOIN agrofactuur.UBN u ON u.UbnID=mov.UbnId
                            WHERE mov.MovId > 0 AND mov.MovKind = 8 AND u.UbnID={ubnid} ";


                    var mysql = new MySql.Data.MySqlClient.MySqlConnection(mToken.getLastChildConnection().SlaveConnectionString);
                    cmd.Connection = mysql;
                    try
                    {
                        mysql.Open();
                        MySqlDataAdapter adapter = new MySqlDataAdapter(cmd);
                        DataSet places = new DataSet();
                        adapter.Fill(places, "places");
                        tbl = places.Tables[0];
                    }
                    catch (Exception exc)
                    {
                        unLogger.WriteError(exc.ToString());
                    }
                    finally
                    {
                        if (mysql.State == ConnectionState.Open)
                        {
                            mysql.Close();
                        }
                    }

                }
            }
            return tbl;
        }
        public DataTable GetCurrentPlaceByAniId(BEDRIJF pBedrijf, int pAniId)
        {

            StringBuilder lsb = new StringBuilder(" SELECT  p.CageNr FROM PLACE p  ");
            lsb.Append("  INNER JOIN MOVEMENT m  ON m.MovId = p.MovId  ");

            lsb.AppendFormat(" WHERE p.AniId = {0}", pAniId);
            lsb.AppendFormat(" AND (m.UbnId={0})  ", pBedrijf.UBNid);

            lsb.Append(" AND m.MovDate = ( ");
            lsb.Append(" SELECT MAX(MovDate) FROM MOVEMENT ");
            lsb.Append(" WHERE  AniId=p.AniId  AND UbnID=m.UbnId AND MovKind=8 ) ");

            lsb.Append("  AND m.MovId>0 ");


            DataTable dtPlace = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);

            return dtPlace;
        }
        [Obsolete("CageNr heeft niets met REMARK te maken")]
        public int DeleteHokkenByDateAndCageNr(BEDRIJF pBedrijf, DateTime pMovDate, int pCageNr)
        {
            int ret = 0;
            if (pBedrijf.FarmId > 0 && pBedrijf.UBNid > 0 && pMovDate > DateTime.MinValue && pCageNr > 0)
            {
                StringBuilder lsb = new StringBuilder(" SELECT MOVEMENT.MovId FROM PLACE");
                lsb.Append("  INNER JOIN MOVEMENT  ON MOVEMENT.MovId = PLACE.MovId");
                lsb.Append("  INNER JOIN REMARK ON REMARK.RemId=PLACE.CageNr ");
                lsb.AppendFormat("  WHERE PLACE.CageNr={0} ", pCageNr);
                lsb.AppendFormat("  AND (MOVEMENT.UbnId={0}) ", pBedrijf.UBNid);
                lsb.Append("  AND date_format(MOVEMENT.MovDate,'%Y-%m-%d %T') = '" + getDatabaseDateFormat(pMovDate) + "' ");
                lsb.AppendFormat("  AND ( REMARK.Farmid={0} AND REMARK.LabKind=400 AND REMARK.LabId=3 ) ", pBedrijf.FarmId);
                lsb.Append("  AND MOVEMENT.MovId>0 ");
                DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
                List<int> pMovids = new List<int>();
                foreach (DataRow rw in dtMovements.Rows)
                {
                    int lMovid = 0;
                    int.TryParse(rw["MovId"].ToString(), out lMovid);
                    if (!pMovids.Contains(lMovid))
                    {
                        pMovids.Add(lMovid);
                    }
                }

                StringBuilder delPLACE = new StringBuilder(" DELETE FROM PLACE WHERE MovId IN (" + intListToString(pMovids) + ") ");
                StringBuilder delMOVS = new StringBuilder(" DELETE FROM MOVEMENT WHERE MovId IN (" + intListToString(pMovids) + ") ");

                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());

                //cmd.CommandText = delPLACE.ToString();

                try
                {
                    //ret = mDatabase.ExecuteNonQueryCommand(cmd);
                    ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), delPLACE.ToString());
                    if (ret == pMovids.Count())
                    {
                        //cmd.CommandText = delMOVS.ToString();
                        //ret = mDatabase.ExecuteNonQueryCommand(cmd);
                        ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), delMOVS.ToString());
                    }
                    else { unLogger.WriteDebug("Error deleting PLACE.MovIds: " + intListToString(pMovids)); }
                }
                catch (Exception ex)
                {
                    unLogger.WriteDebug(ex.Message, ex);

                }
            }
            return ret;
        }

        public DataTable getHokkenByUbnId(int pUbnId)
        {
            if (pUbnId > 0)
            {
                StringBuilder lsb = new StringBuilder(" SELECT CageNr, IF(ISNULL(REMARK.RemLabel),CageNr,CONCAT(CageNr,' | ',REMARK.RemLabel)) AS Label ");
                lsb.Append("    FROM PLACE ");
                lsb.Append(" INNER JOIN MOVEMENT ON PLACE.MovId = MOVEMENT.MovId  ");
                lsb.Append(" JOIN ANIMALCATEGORY ac ON ac.AniId=MOVEMENT.AniId ");
                lsb.Append(" LEFT JOIN REMARK ON REMARK.RemId= PLACE.CageNr AND REMARK.FarmId=ac.FarmId AND REMARK.Labkind=400 AND REMARK.LabId=3 ");
                lsb.AppendFormat(" WHERE  MOVEMENT.UbnId ={0} AND MOVEMENT.MovId>0 ", pUbnId);
                lsb.Append(" AND NOT PLACE.CageNr = '' GROUP BY PLACE.CageNr ");
                lsb.Append(" ORDER BY PLACE.CageNr ");
                DataSet ds = new DataSet();
                DataTable dtPlace = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lsb, "Cagenr", MissingSchemaAction.Add);
                return dtPlace;
            }
            else { return new DataTable(); }
        }

        public int DeleteHokkenByDateAndCageNr(BEDRIJF pBedrijf, DateTime pMovDate, string pCageNr)
        {
            int ret = 0;
            if (pBedrijf.FarmId > 0 && pBedrijf.UBNid > 0 && pMovDate > DateTime.MinValue && pCageNr != "")
            {
                StringBuilder lsb = new StringBuilder(" SELECT MOVEMENT.MovId FROM PLACE");
                lsb.Append("  INNER JOIN MOVEMENT  ON MOVEMENT.MovId = PLACE.MovId");

                lsb.AppendFormat("  WHERE PLACE.CageNr='{0}' ", pCageNr);
                lsb.AppendFormat("  AND (MOVEMENT.UbnId={0}) ", pBedrijf.UBNid);
                lsb.Append("  AND date_format(MOVEMENT.MovDate,'%Y-%m-%d %T') = '" + getDatabaseDateFormat(pMovDate) + "' ");

                lsb.Append("  AND MOVEMENT.MovId>0 ");
                DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
                List<int> pMovids = new List<int>();
                foreach (DataRow rw in dtMovements.Rows)
                {
                    int lMovid = 0;
                    int.TryParse(rw["MovId"].ToString(), out lMovid);
                    if (!pMovids.Contains(lMovid))
                    {
                        pMovids.Add(lMovid);
                    }
                }

                StringBuilder delPLACE = new StringBuilder();//" DELETE FROM PLACE WHERE MovId IN (" + intListToString(pMovids) + ") ");
                StringBuilder delMOVS = new StringBuilder();
                foreach (int movid in pMovids)
                {
                    delPLACE.Append(" UPDATE PLACE SET PLACE.MovId=-" + movid.ToString() + " WHERE PLACE.MovId=" + movid.ToString() + " ; ");
                    delMOVS.Append(" UPDATE MOVEMENT SET MOVEMENT.MovId=-" + movid.ToString() + " WHERE MOVEMENT.MovId=" + movid.ToString() + " ; ");
                }


                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());

                //cmd.CommandText = delPLACE.ToString();

                try
                {
                    //ret = mDatabase.ExecuteNonQueryCommand(cmd);
                    ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), delPLACE.ToString());
                    if (ret == pMovids.Count())
                    {
                        //cmd.CommandText = delMOVS.ToString();
                        //ret = mDatabase.ExecuteNonQueryCommand(cmd);
                        ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), delMOVS.ToString());
                    }
                    else { unLogger.WriteDebug("Error deleting PLACE.MovIds: " + intListToString(pMovids)); }
                }
                catch (Exception ex)
                {
                    unLogger.WriteDebug(ex.Message, ex);

                }
            }
            return ret;
        }
        public List<MOVEMENT> GetMovementsByAniId(int pAniId)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE AniId = " + pAniId.ToString() + "  AND MOVEMENT.MovId>0  ORDER BY MovDate DESC");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }

        public List<MOVEMENT> GetMovementsByDateKind(int pMovKind, int pUbnId, int pProgId, DateTime pDate)
        {
            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT ");
            lsb.AppendFormat(" WHERE MovKind = {0}", pMovKind);
            lsb.AppendFormat(" AND UbnId = {0}", pUbnId);
            lsb.AppendFormat(" AND ProgId = {0}  AND MovId>0 ", pProgId);
            lsb.AppendFormat(" AND date_format(MovDate,'%Y-%m-%d %T') = '" + getDatabaseDateFormat(pDate) + "'");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }


        //TODO verwijderen foutieve Obsolete tag
        [Obsolete("LET OP Het tijd deel wordt altijd omgezet naar 00:00:00 gebruik anders getDatabaseFormatDateTimeFormat or  getDatabaseDateDateFormat")]
        /// <summary>
        /// getDatabaseDateFormat
        /// </summary>
        /// <remarks>
        /// 	<para>LET OP Het tijd deel wordt altijd omgezet naar 00:00:00 gebruik anders getDatabaseFormatDateTimeFormat</para>
        /// </remarks>
        /// 
        private string getDatabaseDateFormat(DateTime pDatum)
        {
            string datum = pDatum.Year.ToString() + "-" + addleadingzero(pDatum.Month.ToString()) + "-" + addleadingzero(pDatum.Day.ToString()) + " 00:00:00";
            return datum;
        }

        private string getDatabaseDateTimeFormat(DateTime pDatum)
        {
            string datum = pDatum.Year.ToString() + "-" + addleadingzero(pDatum.Month.ToString()) + "-" + addleadingzero(pDatum.Day.ToString()) + " " + addleadingzero(pDatum.Hour.ToString()) + ":" + addleadingzero(pDatum.Minute.ToString()) + ":" + addleadingzero(pDatum.Second.ToString());
            return datum;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pDatum"></param>
        /// <returns> Date as '2016-09-12' whitout time component</returns>
        private string getDatabaseDateDateFormat(DateTime pDatum)
        {
            string datum = pDatum.Year.ToString() + "-" + addleadingzero(pDatum.Month.ToString()) + "-" + addleadingzero(pDatum.Day.ToString());// +" 00:00:00";
            return datum;
        }

        public List<MOVEMENT> GetTransfers()
        {
            /*  getMovementsByDate
                SELECT *
                FROM MOVEMENT
                ORDER BY MovDate;
             */
            //List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getMovementsByDate";
            //System.Data.DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), cmd);
            //MOVEMENT lMovement;
            //foreach (DataRow drMovement in dtMovements.Rows)
            //{
            //    lMovement = new MOVEMENT();
            //    if (mDatabase.FillObject(lMovement, drMovement))
            //    {
            //        lResultValue.Add(lMovement);
            //    }
            //}
            //return lResultValue;

            List<MOVEMENT> lResultValue = new List<MOVEMENT>();
            StringBuilder lsb = new StringBuilder("SELECT MOVEMENT.* FROM MOVEMENT WHERE MOVEMENT.MovId>0 LIMIT 1000 ORDER BY MovDate ");
            DataTable dtMovements = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            MOVEMENT lMovement;
            foreach (DataRow drMovement in dtMovements.Rows)
            {
                lMovement = new MOVEMENT();
                if (mDatabase.FillObject(lMovement, drMovement))
                {
                    lResultValue.Add(lMovement);
                }
            }
            return lResultValue;
        }
        public List<FEEDBUY> GetFeedbuyByFarmId(int farmId)
        {
            List<FEEDBUY> lResultValue = new List<FEEDBUY>();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandText = "SELECT * FROM FEEDBUY WHERE FarmID=" + farmId;
            ////cmd.CommandText = "SELECT BuyDate AS Datum, BuyTime AS Tijd, FeedNr AS Voer, AmountKg AS Hoeveelheid, STORAGE AS Silo"
            ////								+ " FROM FEEDBUY WHERE FarmId=" + farmId;
            //System.Data.DataTable dtFeedbuy = mDatabase.QueryData(mToken.getLastChildConnection(), cmd);

            System.Data.DataTable dtFeedbuy = QueryData("SELECT * FROM FEEDBUY WHERE FarmID=" + farmId);
            FEEDBUY lFeedbuy;
            foreach (DataRow drFeedBuy in dtFeedbuy.Rows)
            {
                lFeedbuy = new FEEDBUY();
                if (mDatabase.FillObject(lFeedbuy, drFeedBuy))
                {
                    lResultValue.Add(lFeedbuy);
                }
            }
            return lResultValue;

        }
        public bool InsertFeedBuy(FEEDBUY pFeedBuy)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedBuy);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pFeedBuy);
            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 

                if (WriteActions.SaveObject(pFeedBuy) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateFeedBuy(FEEDBUY pFeedBuy)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedBuy);
            String[] UpdateParams = new String[]
            {
                            "BuyDate",
                            "BuyTime",
                            "Feednr",
                            "Amountkg",
                            "Storage"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pFeedBuy, "Internalnr", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;

            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedBuy, mDatabase.CreateUpdateCommandText(pFeedBuy, "Internalnr", UpdateParams)) == 1;
        }
        public bool DeleteFeedBuy(FEEDBUY pFeedBuy)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedBuy);
            String[] DeleteParams = new String[]
             {
                 "Internalnr"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedBuy, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedBuy, mDatabase.CreateDeleteCommandText(pFeedBuy, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public DataTable getRestVoerByFarmIdAndOrAniId(int pFarmId, int pAniId)
        {
            if (pFarmId > 0)
            {
                StringBuilder lsb = new StringBuilder(" SELECT fr.FR_ID,  fr.FR_DateTime ,fr.AniID, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=1  ");
                lsb.Append(" ) AS ART1, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=2  ");
                lsb.Append(" ) AS ART2, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=3  ");
                lsb.Append(" ) AS ART3, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=4  ");
                lsb.Append(" ) AS ART4, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=5  ");
                lsb.Append(" ) AS ART5, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=6  ");
                lsb.Append(" ) AS ART6, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=7  ");
                lsb.Append(" ) AS ART7, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=8  ");
                lsb.Append(" ) AS ART8, ");
                lsb.Append(" (  ");
                lsb.Append(" SELECT CAST(CONCAT(frd2.FRD_KG_Advice,'|',frd2.FRD_KG_Rest,'|',frd2.FRD_KG_Total) AS CHAR) FROM agrodata.FEED_REST_DETAIL frd2 WHERE frd2.FR_ID=frd.FR_ID AND frd2.FRD_AB_Feednr=9  ");
                lsb.Append(" ) AS ART9 ");

                lsb.Append(" FROM agrodata.FEED_REST_DETAIL frd ");
                lsb.Append(" JOIN agrodata.FEED_REST fr ON fr.FR_ID=frd.FR_ID ");

                lsb.AppendFormat(" WHERE fr.FarmID={0}", pFarmId);
                if (pAniId > 0)
                {
                    lsb.AppendFormat(" AND fr.AniID={0} ", pAniId);
                }
                lsb.Append(" GROUP BY FR_DateTime DESC ");
                DataSet ds = new DataSet();
                DataTable tblRestvoer = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lsb, "restvoer", MissingSchemaAction.Add);
                return tblRestvoer;
            }
            else { return new DataTable(); }

        }

        public DataTable getFeed_AdvicesByAniId(int pAniId, DateTime pFrom, DateTime pTo, out List<FEED_ADVICE> pFeedAdvices, out List<FEED_ADVICE_DETAIL> pFeedAdviceDetails)
        {
            pFeedAdvices = new List<FEED_ADVICE>();
            pFeedAdviceDetails = new List<FEED_ADVICE_DETAIL>();
            if (pAniId > 0 && pFrom > DateTime.MinValue && pTo > DateTime.MinValue)
            {
                StringBuilder lsb = new StringBuilder(@"
                  SELECT fa.*, fad.*  
                  FROM FEED_ADVICE_DETAIL  fad  
                  JOIN FEED_ADVICE fa ON fa.FA_ID=fad.FA_ID  
                  WHERE fa.AniID=" + pAniId.ToString() +
                @" AND fa.FA_ID>0 
                    AND ( fa.FA_DateTime>=" + MySQL_Datum(pFrom, 1) + @" AND fa.FA_DateTime<=" + MySQL_Datum(pTo, 1) + @")");

                DataSet ds = new DataSet();
                DataTable tblFeedAdvicevoer = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lsb, "feedadvice", MissingSchemaAction.Add);
                foreach (DataRow drFeedAdvice in tblFeedAdvicevoer.Rows)
                {

                    FEED_ADVICE_DETAIL lFeedadvicedetail = new FEED_ADVICE_DETAIL();
                    if (mDatabase.FillObject(lFeedadvicedetail, drFeedAdvice))
                    {
                        pFeedAdviceDetails.Add(lFeedadvicedetail);
                    }
                    var checkAdvice = from n in pFeedAdvices
                                      where n.FA_ID == lFeedadvicedetail.FA_ID
                                      select n;
                    if (checkAdvice.Count() == 0)
                    {
                        FEED_ADVICE pFeedAdvice = new FEED_ADVICE();

                        if (mDatabase.FillObject(pFeedAdvice, drFeedAdvice))
                        {
                            pFeedAdvices.Add(pFeedAdvice);
                        }
                    }
                }
                return tblFeedAdvicevoer;
            }
            else { return new DataTable(); }
        }

        public bool saveFeedAdvice(FEED_ADVICE pFeedAdvice, List<FEED_ADVICE_DETAIL> pFeedAdviceDetails, int changedBy, int sourceId)
        {
            try
            {
                if (pFeedAdvice.AniID > 0 && pFeedAdvice.FA_DateTime.Year > 2009)
                {
                    if (changedBy > 0 || sourceId > 0)
                    {
                        pFeedAdvice.Changed_By = changedBy;
                        pFeedAdvice.SourceID = sourceId;
                    }

                    int LastRowId = WriteActions.SaveObject(pFeedAdvice);

                    if (pFeedAdvice.FA_ID > 0 && LastRowId > 0)
                    {
                        foreach (FEED_ADVICE_DETAIL fDetail in pFeedAdviceDetails)
                        {
                            fDetail.FA_ID = pFeedAdvice.FA_ID;

                            if (changedBy > 0 || sourceId > 0)
                            {
                                fDetail.Changed_By = changedBy;
                                fDetail.SourceID = sourceId;
                            }

                            if (WriteActions.SaveObject(fDetail) < 0)
                                return false;
                        }
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("saveFeedAdvice", ex);
                return false;
            }
        }
        public bool deleteFeedAdvice(FEED_ADVICE pFeedAdvice, List<FEED_ADVICE_DETAIL> pFeedAdviceDetails)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedAdvice);
            String[] DeleteParams = new String[]
             {
                 "FA_ID"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedAdvice, DeleteParams);

            try
            {
                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedAdvice, mDatabase.CreateDeleteCommandText(pFeedAdvice, DeleteParams)) == 1)
                {
                    if (pFeedAdviceDetails.Count() > 0)
                    {
                        FEED_ADVICE_DETAIL lFeedAdviceDetails = pFeedAdviceDetails.ElementAt(0);
                        //cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), lFeedAdviceDetails);

                        //cmd.CommandText = mDatabase.CreateDeleteCommandText(lFeedAdviceDetails, DeleteParams);
                        //if (mDatabase.ExecuteNonQueryCommand(cmd) > 0)
                        if (mDatabase.ModifyObject(mToken.getLastChildConnection(), lFeedAdviceDetails, mDatabase.CreateDeleteCommandText(lFeedAdviceDetails, DeleteParams)) > 0)
                        {
                            return true;
                        }
                        else { return false; }
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
            return false;
        }
        public bool deleteFeedAdviceDetail(FEED_ADVICE_DETAIL pFeedAdviceDetail)
        {

            // DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedAdviceDetail);
            String[] DeleteParams = new String[]
             {
                 "FA_ID",
                 "FAD_AB_Feednr"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedAdviceDetail, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedAdviceDetail, mDatabase.CreateDeleteCommandText(pFeedAdviceDetail, DeleteParams)) == 1;
                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                //{

                //    return true;
                //}
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
            //return false;
        }
        private List<FEED_ADVICE> getFeed_AdvicesFromNow(int pAniId)
        {
            List<FEED_ADVICE> pFeedAdvices = new List<FEED_ADVICE>();

            if (pAniId > 0)
            {
                StringBuilder lsb = new StringBuilder(@"
                  SELECT fa.*, fad.*  
                  FROM FEED_ADVICE_DETAIL  fad  
                  JOIN FEED_ADVICE fa ON fa.FA_ID=fad.FA_ID  
                  WHERE fa.AniID=" + pAniId.ToString() +
                @" AND fa.FA_ID>0 
                    AND ( fa.FA_DateTime>=" + MySQL_Datum(DateTime.Now, 1) + @")");//+ @" AND fa.FA_DateTime<=" + MySQL_Datum(pTo, 1) + @")");

                DataSet ds = new DataSet();
                DataTable tblFeedAdvicevoer = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lsb, "feedadvice", MissingSchemaAction.Add);
                foreach (DataRow drFeedAdvice in tblFeedAdvicevoer.Rows)
                {

                    FEED_ADVICE_DETAIL lFeedadvicedetail = new FEED_ADVICE_DETAIL();
                    if (mDatabase.FillObject(lFeedadvicedetail, drFeedAdvice))
                    {

                    }
                    var checkAdvice = from n in pFeedAdvices
                                      where n.FA_ID == lFeedadvicedetail.FA_ID
                                      select n;
                    if (checkAdvice.Count() == 0)
                    {
                        FEED_ADVICE pFeedAdvice = new FEED_ADVICE();

                        if (mDatabase.FillObject(pFeedAdvice, drFeedAdvice))
                        {
                            pFeedAdvices.Add(pFeedAdvice);
                        }
                    }
                }

            }
            return pFeedAdvices;
        }
        public bool deleteFeedAdviceDetails(int pAniID, List<int> pFA_IDs, int pFAD_AB_Feednr)
        {
            if (pAniID > 0 && pFA_IDs.Count() > 0 && pFAD_AB_Feednr > 0)
            {
                List<FEED_ADVICE> feeds = getFeed_AdvicesFromNow(pAniID);
                var check = from n in feeds where pFA_IDs.Contains(n.FA_ID) select n;
                if (check.Count() > 0)
                {
                    List<int> deleteIds = (from n in check select n.FA_ID).ToList();
                    //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());

                    String CommandText = "DELETE FROM FEED_ADVICE_DETAIL WHERE FA_ID IN(" + EnumerableToCommaSeperatedString(deleteIds) + ") AND FAD_AB_Feednr=" + pFAD_AB_Feednr.ToString();

                    try
                    {
                        //if (mDatabase.ExecuteNonQueryCommand(cmd) > 1)
                        if (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), CommandText) > 1)
                        {
                            //cmd.CommandText = "SELECT * FROM FEED_ADVICE_DETAIL WHERE FA_ID IN(" + EnumerableToCommaSeperatedString(deleteIds) + ")  ";
                            //DataTable dtrestFeedAdvices = mDatabase.QueryData(mToken.getLastChildConnection(), cmd);
                            DataTable dtrestFeedAdvices = QueryData("SELECT * FROM FEED_ADVICE_DETAIL WHERE FA_ID IN(" + EnumerableToCommaSeperatedString(deleteIds) + ")  ");
                            if (dtrestFeedAdvices.Rows.Count == 0)
                            {

                                String CommandText2 = "DELETE FROM FEED_ADVICE WHERE FA_ID IN(" + EnumerableToCommaSeperatedString(deleteIds) + ") ";
                                if (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), CommandText2) > 1)
                                {

                                }
                            }
                            return true;
                        }
                    }
                    catch (Exception ex)
                    {
                        unLogger.WriteError(ex.Message, ex);
                        return false;
                    }
                }
            }
            return false;
        }
        public List<STORAGE> GetSilosByFarmId(int farmId)
        {
            List<STORAGE> lResultValue = new List<STORAGE>();
            DataTable dtStorage = QueryData("SELECT * FROM STORAGE WHERE FarmId=" + farmId + " ORDER BY SiloNr");
            STORAGE lStorage;
            foreach (DataRow drStorage in dtStorage.Rows)
            {
                lStorage = new STORAGE();
                if (mDatabase.FillObject(lStorage, drStorage))
                {
                    lResultValue.Add(lStorage);
                }
            }
            return lResultValue;
        }
        private string getFemaleProductieQuery(int pAniId, DateTime pDatum, List<int> pProgramids)
        {

            StringBuilder bld = new StringBuilder();

            bld.Append($@"  SELECT 
                      e.AniId 
                      , 
                      IF( 
                     		(SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId)>0 
                     		, 
                     		(SELECT  COUNT(DISTINCT(e1.EveDate)) FROM  EVENT e1 WHERE  e1.AniId=e.AniId AND e1.EveKind=5 AND (e1.EveDate>(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e1.AniId)   )) 

                     		+ 
                     		(SELECT ap.AP_Birth_Times FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=e.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId) ) 

                     		, 

                       COUNT(DISTINCT(b.BirNumber)) 
                       ) AS maxBirNumber 
                     ,  IF( 
                     		(SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId)>0 
                     		,(SELECT  COUNT(b1.EventId) FROM BIRTH b1 JOIN EVENT e1 ON e1.EventId=b1.EventId WHERE (b1.BornDead=0 OR ISNULL(b1.BornDead)) AND e1.AniId=e.AniId AND (e1.EveDate>(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e1.AniId)   )) 
                     		+ 
                     		(SELECT ap.AP_Birth_Alive_Offspring FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=e.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId) ) 
           
                     		,COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead=0 OR ISNULL(BornDead)))) 
                     		) AS aantLam 
                       , 
                         IF( 
                     		(SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId)>0 
                     		,(SELECT  COUNT(b1.EventId) FROM BIRTH b1 JOIN EVENT e1 ON e1.EventId=b1.EventId WHERE (BornDead>0) AND e1.AniId=e.AniId AND (e1.EveDate>(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e1.AniId)   )) 
                     		+ 
                     		(SELECT ap.AP_Birth_Dead_Offspring FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=e.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId) ) 

                     		,COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead>0))) 
                     		) AS aantdoodLam 


                      ,    IF( ISNULL((SELECT MAX(EveDate) AS maxWorpDatum FROM EVENT
              WHERE EveDate <= {MySQL_Datum(pDatum, 1)} AND AniId=e.AniId AND EveKind=5 AND EventId>0))
             , TIMESTAMPDIFF(
             	YEAR, a.AniBirthDate,
             	(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId)
             )
             , TIMESTAMPDIFF(
                 YEAR, a.AniBirthDate,
                (SELECT MAX(EveDate) AS maxWorpDatum FROM EVENT
                WHERE EveDate <= {MySQL_Datum(pDatum, 1)} AND AniId=e.AniId AND EveKind=5 AND EventId>0)
             )
             )AS leeftijd_exact 

                      ,     IF(ISNULL((SELECT MAX(EveDate) AS maxWorpDatum FROM EVENT 
              WHERE EveDate <= {MySQL_Datum(pDatum, 1)} AND AniId=e.AniId AND EveKind=5 AND EventId>0))
              ,YEAR((SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId)
              )
              -YEAR(a.AniBirthDate)
             ,
             YEAR((SELECT MAX(EveDate) AS maxWorpDatum FROM EVENT
                 WHERE EveDate <= {MySQL_Datum(pDatum, 1)} 
                 AND AniId=e.AniId AND EveKind=5 AND EventId>0))
              -YEAR(a.AniBirthDate)
             ) AS leeftijd_afgerond 

                      , 
                       IF( 
                       (SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId)>0 
                       , 
                       (SELECT ap.AP_Birth_Yearling FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=e.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=e.AniId) ) 
                       , 
                       (SELECT COUNT(a_1.AniId)>0 
                         FROM ANIMAL a_1 
                         LEFT JOIN EVENT e_1 ON (e_1.AniId=a_1.AniId) 
                         WHERE a_1.AniId=a.AniId 
                         AND e_1.EveDate=(SELECT MIN(EveDate) FROM EVENT WHERE aniId=a_1.AniId AND EveKind=5 AND EventId>0) 

                         AND (YEAR(e_1.EveDate) <= YEAR(a_1.AniBirthDate) + 1) 
                         AND e_1.EventId>0
                      )) AS jaarling
              ,IF((SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)>0,1,0)AS Fictief 
                       FROM BIRTH b
                       RIGHT JOIN EVENT e ON (e.EventId=b.EventId)
                      RIGHT JOIN ANIMAL a ON (a.AniId=e.AniId)
                       WHERE (e.EveDate <= { MySQL_Datum(pDatum, 1)})
                       AND (e.AniId={ pAniId})
                       AND (a.AniSex=2) 
                       AND (e.EventId>0) ");
            if (pProgramids.Count() > 0)
            {
                bld.AppendLine("           AND (e.UBNid=0 OR e.UbnId IN(select  Distinct(b.Ubnid) from agrofactuur.BEDRIJF b WHERE b.programid IN (" + EnumerableToCommaSeperatedString(pProgramids) + ") AND b.UbnId>0 AND b.FarmId>0 )) ");
            }
            bld.Append($@"
                    # uitzondering(geen EVENTS) dan alleen in ANIMALPRODUCTION kijken
                    # deze alleen in dit bestand als info
                                UNION

                                  SELECT ap.AniId, ap.AP_Birth_Times AS maxBirNumber,  
                     (ap.AP_Birth_Alive_Offspring)AS aantLam,  
                      ap.AP_Birth_Dead_Offspring AS aantdoodLam, 
                      TIMESTAMPDIFF(YEAR, a.AniBirthDate, (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= {MySQL_Datum(pDatum, 1)} AND ANIMAL_PRODUCTION.AniID = a.AniId))AS leeftijd_exact,
                      YEAR((SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= {MySQL_Datum(pDatum, 1)} AND ANIMAL_PRODUCTION.AniID = a.AniId)) -YEAR(a.AniBirthDate) AS leeftijd_afgerond,

                        AP_Birth_Yearling AS jaarling
                      ,1 As Fictief
                        FROM ANIMAL_PRODUCTION ap
                         RIGHT JOIN ANIMAL a ON(a.AniId= ap.AniId)
                       WHERE ap.AniID = {pAniId}
                       AND ap.AP_Production_Date = (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= {MySQL_Datum(pDatum, 1)} AND ANIMAL_PRODUCTION.AniID = a.AniId) 
                    ");
            return bld.ToString();
        }
        private string getMaleProductieQuery(int pAniId, DateTime pDatum, List<int> pProgramids)
        {

            StringBuilder bld = new StringBuilder();

            bld.AppendLine(" SELECT a.AniId ,  ");
            bld.AppendLine(" IF(  ");
            bld.AppendLine(" 	(SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)>0  ");
            bld.AppendLine(" 	,  ");

            bld.AppendLine(" 	(SELECT  COUNT(DISTINCT(e1.EveDate)) FROM  EVENT e1 JOIN BIRTH b1 ON b1.EventId=e1.EventId WHERE  b1.AniFatherId=a.AniId AND  (e1.EveDate>(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)   ))  ");

            bld.AppendLine(" 	+  ");
            bld.AppendLine(" 	(SELECT ap.AP_Birth_Times FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=a.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId) )  ");


            bld.AppendLine(" 	,  ");
            bld.AppendLine("    (SELECT COUNT(*) FROM  ");
            bld.AppendLine("      (SELECT AniId, BirNumber FROM BIRTH RIGHT JOIN EVENT USING(EventId)  ");
            bld.AppendLine("      WHERE AniFatherId=" + pAniId.ToString() + " AND EveDate <= " + MySQL_Datum(pDatum, 1) + " AND EventId>0 GROUP BY AniId, BirNumber) AS worpen  ");
            bld.AppendLine("  )   ");
            bld.AppendLine("  )  ");
            bld.AppendLine("  AS aantWorpen  ");

            bld.AppendLine("  ,   ");
            bld.AppendLine("   IF(  ");
            bld.AppendLine("        (SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)>0  ");
            bld.AppendLine(" 		,  ");
            bld.AppendLine(" 		(  ");
            bld.AppendLine(" 		(SELECT ap.AP_Birth_Alive_Offspring FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=a.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId) )  ");
            bld.AppendLine(" 	    +   ");
            bld.AppendLine(" 		(   ");
            bld.AppendLine(" 		  SELECT COUNT(b2.EventId)   ");
            bld.AppendLine(" 		  FROM BIRTH b2 JOIN EVENT e2 ON e2.EventId=b2.EventID   ");
            bld.AppendLine(" 		  WHERE (b2.AniFatherId=a.AniId)   ");
            bld.AppendLine(" 		  AND ( e2.EveDate>(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId  ) )  ");
            bld.AppendLine(" 		  AND (b2.BornDead=0 OR ISNULL(b2.BornDead)))  ");
            bld.AppendLine(" 			)  ");
            bld.AppendLine(" 			,  ");
            bld.AppendLine(" 		COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead=0 OR ISNULL(BornDead)) ))   ");
            bld.AppendLine(" 	)  ");
            bld.AppendLine(" 	AS aantLam  ");


            bld.AppendLine(" ,   ");
            bld.AppendLine(" IF(  (SELECT MAX(ANIMAL_PRODUCTION.AniID) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)>0  ");
            bld.AppendLine("  ,  ");

            bld.AppendLine("  (  ");
            bld.AppendLine(" 	(SELECT ap.AP_Birth_Dead_Offspring FROM ANIMAL_PRODUCTION ap WHERE ap.AniID=a.AniId AND ap.AP_Production_Date= (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId) )  ");
            bld.AppendLine("     +   ");
            bld.AppendLine(" 	(   ");
            bld.AppendLine(" 	  SELECT COUNT(b2.EventId)   ");
            bld.AppendLine(" 	  FROM BIRTH b2 JOIN EVENT e2 ON e2.EventId=b2.EventID   ");
            bld.AppendLine(" 	  WHERE (b2.AniFatherId=a.AniId)   ");
            bld.AppendLine(" 	  AND ( e2.EveDate>(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId  ) )  ");
            bld.AppendLine(" 	  AND (b2.BornDead=1))  ");
            bld.AppendLine(" 		)  ");
            bld.AppendLine(" ,  ");
            bld.AppendLine("  COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead>0) ))   ");
            bld.AppendLine("  )  ");
            bld.AppendLine("  AS aantdoodLam  ");

            bld.AppendLine("  ,(IF( ISNULL((SELECT MAX(EveDate) AS maxWorpDatum FROM BIRTH RIGHT JOIN EVENT USING(EventId) ");
            bld.AppendLine("  WHERE AniFatherId=a.AniId AND EveDate <= " + MySQL_Datum(pDatum, 1) + " AND EventId>0)) ");
            bld.AppendLine(" , TIMESTAMPDIFF(YEAR, a.AniBirthDate,(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)) ");
            bld.AppendLine(" , TIMESTAMPDIFF( ");
            bld.AppendLine("  YEAR, a.AniBirthDate, ");
            bld.AppendLine("  (SELECT MAX(EveDate) AS maxWorpDatum FROM BIRTH RIGHT JOIN EVENT USING(EventId) ");
            bld.AppendLine(" WHERE AniFatherId=a.AniId AND EveDate <= " + MySQL_Datum(pDatum, 1) + " AND EventId>0) ");
            bld.AppendLine("   )  ");
            bld.AppendLine(" ))  AS leeftijd_exact  ");

            bld.AppendLine(" ,  (IF( ISNULL((SELECT MAX(EveDate) AS maxWorpDatum FROM BIRTH RIGHT JOIN EVENT USING(EventId) ");
            bld.AppendLine("  WHERE AniFatherId=a.AniId AND EveDate <= " + MySQL_Datum(pDatum, 1) + " AND EventId>0)) ");
            bld.AppendLine(",  YEAR( ");
            bld.AppendLine("(SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId) ");
            bld.AppendLine(") ");
            bld.AppendLine("         -YEAR(a.AniBirthDate) ");
            bld.AppendLine(",  YEAR((SELECT MAX(EveDate) AS maxWorpDatum FROM BIRTH RIGHT JOIN EVENT USING(EventId) ");
            bld.AppendLine("                 WHERE AniFatherId=a.AniId AND EveDate <= " + MySQL_Datum(pDatum, 1) + " AND EventId>0)) ");
            bld.AppendLine("         -YEAR(a.AniBirthDate)  ");
            bld.AppendLine(")) AS leeftijd_afgerond  ");


            bld.AppendLine("  ,IF((SELECT ANIMAL_PRODUCTION.AniID FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AniID=a.AniId)>0,1,0)AS Fictief  ");
            bld.AppendLine("  FROM BIRTH bi  ");
            bld.AppendLine("  RIGHT JOIN EVENT e ON (e.EventId=bi.EventId)  ");
            bld.AppendLine("  RIGHT JOIN ANIMAL a ON (a.AniId=bi.AniFatherId)  ");
            bld.AppendLine("  WHERE (bi.AniFatherId=a.AniId)  ");
            bld.AppendLine("  AND (a.AniSex=1)  ");
            bld.AppendLine("   AND (a.AniId=" + pAniId.ToString() + ")  ");
            bld.AppendLine("   AND (e.EveDate <= " + MySQL_Datum(pDatum, 1) + " )  ");
            bld.AppendLine("   AND (e.EventId>0)  ");
            if (pProgramids.Count() > 0)
            {
                bld.AppendLine("           AND (e.UBNid=0 OR e.UbnId IN(select  Distinct(b.Ubnid) from agrofactuur.BEDRIJF b WHERE b.programid IN (" + EnumerableToCommaSeperatedString(pProgramids) + ") AND b.UbnId>0 AND b.FarmId>0 )) ");
            }
            bld.Append($@"
                        UNION

                         SELECT ap.AniId, ap.AP_Birth_Times AS maxBirNumber,  
                          (ap.AP_Birth_Alive_Offspring) AS aantLam,  
                          ap.AP_Birth_Dead_Offspring AS aantdoodLam, 
                          TIMESTAMPDIFF( YEAR, a.AniBirthDate, (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= {MySQL_Datum(pDatum, 1)} AND ANIMAL_PRODUCTION.AniID=a.AniId ))AS leeftijd_exact, 
                         YEAR((SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= {MySQL_Datum(pDatum, 1)} AND ANIMAL_PRODUCTION.AniID=a.AniId)) -YEAR(a.AniBirthDate) AS leeftijd_afgerond  
                        ,1 AS Fictief
                           FROM ANIMAL_PRODUCTION ap  
                             RIGHT JOIN ANIMAL a ON (a.AniId=ap.AniId)  
                           WHERE ap.AniID = {pAniId}
                          AND ap.AP_Production_Date = (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= {MySQL_Datum(pDatum, 1)} AND ANIMAL_PRODUCTION.AniID=a.AniId)
                         ");

            return bld.ToString();
        }
        public bool animal_getProductieGegevens(int pAniId, int pAniSex, DateTime datum, List<int> pProgramids,
                                                         out int leeftijd, out int worpnr, out int aantLam, out int aantdoodLam, out bool jaarling, out bool pFictief)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)
            //functie animal_getProductieGegevens
            // JOIN ANIMAL_PRODUCTION 19-9-2013


            leeftijd = 0;
            worpnr = 0;
            aantLam = 0;
            aantdoodLam = 0;
            jaarling = false;
            pFictief = false;
            if (pAniId <= 0)
                return false;

            //ANIMAL animal = GetAnimalById(aniId);
            if (pAniSex == 1)
            {
                //rammen: check AANTAL WORPEN waar de ram voor gezorgd heeft

                StringBuilder sb = new StringBuilder(
                    "SELECT" +
                    " a.AniId" +
                    ", (SELECT COUNT(*) FROM" +
                        " (SELECT AniId, BirNumber FROM BIRTH RIGHT JOIN EVENT USING(EventId)" +
                        " WHERE AniFatherId=" + pAniId.ToString() + " AND EveDate <= " + MySQL_Datum(datum, 1) + " AND EventId>0 GROUP BY AniId, BirNumber) as worpen" +
                    ") as aantWorpen" +

                    ", COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead=0 OR ISNULL(BornDead)) )) AS aantLam" +
                    ", COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead>0) )) AS aantdoodLam" +

                    ", TIMESTAMPDIFF(" +
                        " YEAR, a.AniBirthDate," +
                        " (SELECT MAX(EveDate) as maxWorpDatum FROM BIRTH RIGHT JOIN EVENT USING(EventId)" +
                        " WHERE AniFatherId=a.AniId AND EveDate <= " + MySQL_Datum(datum, 1) + " AND EventId>0)" +
                    ") as leeftijd_exact" +

                    ", YEAR((SELECT MAX(EveDate) as maxWorpDatum FROM BIRTH RIGHT JOIN EVENT USING(EventId)" +
                            " WHERE AniFatherId=a.AniId AND EveDate <= " + MySQL_Datum(datum, 1) + " AND EventId>0))" +
                    " -YEAR(a.AniBirthDate) as leeftijd_afgerond" +

                    " FROM BIRTH bi" +
                    " RIGHT JOIN EVENT e ON (e.EventId=bi.EventId)" +
                    " RIGHT JOIN ANIMAL a ON (a.AniId=bi.AniFatherId)" +
                    " WHERE (bi.AniFatherId=a.AniId)" +
                    " AND (a.AniSex=1)" +
                    " AND (a.AniId=" + pAniId.ToString() + ")" +
                    " AND (e.EveDate <= " + MySQL_Datum(datum, 1) + ")" +
                    " AND (e.EventId>0)");
                StringBuilder bldProduction = new StringBuilder();
                bldProduction.Append(" UNION ");
                bldProduction.Append("  SELECT ap.AniId, ap.AP_Birth_Times AS maxBirNumber,  ");
                bldProduction.Append("  (ap.AP_Birth_Alive_Offspring) AS aantLam,  ");
                bldProduction.Append("  ap.AP_Birth_Dead_Offspring AS aantdoodLam, ");
                bldProduction.Append("  TIMESTAMPDIFF( YEAR, a.AniBirthDate, (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= " + MySQL_Datum(datum, 1) + " AND ANIMAL_PRODUCTION.AniID=a.AniId ))AS leeftijd_exact, ");
                bldProduction.Append("  YEAR((SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= " + MySQL_Datum(datum, 1) + " AND ANIMAL_PRODUCTION.AniID=a.AniId)) -YEAR(a.AniBirthDate) AS leeftijd_afgerond  ");



                bldProduction.Append("    FROM ANIMAL_PRODUCTION ap  ");
                bldProduction.Append("     RIGHT JOIN ANIMAL a ON (a.AniId=ap.AniId)  ");
                bldProduction.Append("   WHERE ap.AniID = " + pAniId.ToString() + "   ");
                bldProduction.Append("   AND ap.AP_Production_Date = (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= " + MySQL_Datum(datum, 1) + " AND ANIMAL_PRODUCTION.AniID=a.AniId) ");

                sb.Append(bldProduction.ToString());

                StringBuilder bTest = new StringBuilder();
                bTest.Append(" SELECT b.* FROM BIRTH b ");
                bTest.Append("     RIGHT JOIN EVENT e ON (e.EventId=b.EventId) ");
                bTest.Append("     RIGHT JOIN ANIMAL a ON (a.AniId=e.AniId) ");
                bTest.AppendFormat("     WHERE b.AniFatherId={0} LIMIT 1 ", pAniId);
                DataTable dtest = mDatabase.QueryData(mToken.getLastChildConnection(), bTest, MissingSchemaAction.Add);
                if (dtest.Rows.Count > 0)
                {
                    sb = new StringBuilder();//BUG 1722 onderin
                    sb.Append(getMaleProductieQuery(pAniId, datum, pProgramids));
                }
                DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

                if (dt.Rows.Count > 0)
                {
                    int lRowindex = 0;
                    if (dt.Rows.Count > 1)
                    {
                        int.TryParse(dt.Rows[lRowindex]["aantLam"].ToString(), out aantLam);
                        if (aantLam == 0)
                        {
                            lRowindex = 1;
                            pFictief = true;
                        }
                    }
                    try
                    {
                        if (dt.Columns["Fictief"] != null)
                        {
                            if (dt.Rows[lRowindex]["Fictief"] != DBNull.Value)
                            {
                                int lFictief = 0;
                                int.TryParse(dt.Rows[lRowindex]["Fictief"].ToString(), out lFictief);
                                pFictief = (lFictief == 1);
                            }
                        }
                    }
                    catch { }
                    int.TryParse(dt.Rows[lRowindex]["aantWorpen"].ToString(), out worpnr);
                    int.TryParse(dt.Rows[lRowindex]["aantLam"].ToString(), out aantLam);
                    int.TryParse(dt.Rows[lRowindex]["aantdoodLam"].ToString(), out aantdoodLam);
                    int.TryParse(dt.Rows[lRowindex]["leeftijd_afgerond"].ToString(), out leeftijd);
                    jaarling = false;
                }
            }
            else if (pAniSex == 2)
            {
                //ooien: check geboortes waarvan aniId de moeder is

                StringBuilder sb = new StringBuilder(
                    "SELECT" +
                    " e.AniId" +
                    ", MAX(b.BirNumber) AS maxBirNumber" +
                    ", COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead=0 OR ISNULL(BornDead)) )) AS aantLam" +
                    ", COUNT((SELECT EventId FROM BIRTH WHERE (EventId=e.EventId) AND (BornDead>0) )) AS aantdoodLam" +

                    ", TIMESTAMPDIFF(" +
                        " YEAR, a.AniBirthDate," +
                        " (SELECT MAX(EveDate) as maxWorpDatum FROM EVENT" +
                        " WHERE EveDate <= " + MySQL_Datum(datum, 1) + " AND AniId=e.AniId AND EveKind=5 AND EventId>0)" +
                    ")as leeftijd_exact" +

                    ", YEAR((SELECT MAX(EveDate) as maxWorpDatum FROM EVENT" +
                        " WHERE EveDate <= " + MySQL_Datum(datum, 1) + " AND AniId=e.AniId AND EveKind=5 AND EventId>0))" +
                    " -YEAR(a.AniBirthDate) as leeftijd_afgerond" +

                    ", (SELECT COUNT(a_1.AniId)>0" +
                      " FROM ANIMAL a_1" +
                      " LEFT JOIN EVENT e_1 ON (e_1.AniId=a_1.AniId)" +
                      " WHERE a_1.AniId=a.AniId" +
                      " AND e_1.EveDate=(SELECT MIN(EveDate) FROM EVENT WHERE aniId=a_1.AniId AND EveKind=5 AND EventId>0)" +
                      // AND (DATEDIFF(e_1.EveDate, a_1.AniBirthDate) <= 465)" +
                      // Nieuwe manier jaarling
                      " AND (YEAR(e_1.EveDate) <= YEAR(a_1.AniBirthDate) + 1)" +
                      " AND e_1.EventId>0" +
                    ") as jaarling" +

                    " FROM BIRTH b" +
                    " RIGHT JOIN EVENT e ON (e.EventId=b.EventId)" +
                    " RIGHT JOIN ANIMAL a ON (a.AniId=e.AniId)" +
                    " WHERE (e.EveDate <= " + MySQL_Datum(datum, 1) + ")" +
                    " AND (e.AniId=" + pAniId.ToString() + ")" +
                    " AND (a.AniSex=2) " +
                    " AND (e.EventId>0)");

                StringBuilder bldProduction = new StringBuilder();
                bldProduction.Append(" UNION ");
                bldProduction.Append("  SELECT ap.AniId, ap.AP_Birth_Times AS maxBirNumber,  ");
                bldProduction.Append("  (ap.AP_Birth_Alive_Offspring) AS aantLam,  ");
                bldProduction.Append("  ap.AP_Birth_Dead_Offspring AS aantdoodLam, ");
                bldProduction.Append("  TIMESTAMPDIFF( YEAR, a.AniBirthDate, (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= " + MySQL_Datum(datum, 1) + " AND ANIMAL_PRODUCTION.AniID=a.AniId ))AS leeftijd_exact, ");
                bldProduction.Append("  YEAR((SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= " + MySQL_Datum(datum, 1) + " AND ANIMAL_PRODUCTION.AniID=a.AniId)) -YEAR(a.AniBirthDate) AS leeftijd_afgerond,  ");

                bldProduction.Append("  AP_Birth_Yearling AS jaarling ");

                bldProduction.Append("    FROM ANIMAL_PRODUCTION ap  ");
                bldProduction.Append("     RIGHT JOIN ANIMAL a ON (a.AniId=ap.AniId)  ");
                bldProduction.Append("   WHERE ap.AniID = " + pAniId.ToString() + "   ");
                bldProduction.Append("   AND ap.AP_Production_Date = (SELECT MAX(ANIMAL_PRODUCTION.AP_Production_Date) AS maxWorpDatum FROM ANIMAL_PRODUCTION WHERE ANIMAL_PRODUCTION.AP_Production_Date <= " + MySQL_Datum(datum, 1) + " AND ANIMAL_PRODUCTION.AniID=a.AniId) ");

                sb.Append(bldProduction.ToString());

                StringBuilder bTest = new StringBuilder();
                bTest.Append(" SELECT b.* FROM BIRTH b ");
                bTest.Append("     RIGHT JOIN EVENT e ON (e.EventId=b.EventId) ");
                bTest.Append("     RIGHT JOIN ANIMAL a ON (a.AniId=e.AniId) ");
                bTest.AppendFormat("     WHERE e.AniId={0} AND e.EveKind=5 LIMIT 1 ", pAniId);
                DataTable dtest = mDatabase.QueryData(mToken.getLastChildConnection(), bTest, MissingSchemaAction.Add);
                if (dtest.Rows.Count > 0)
                {
                    sb = new StringBuilder();//BUG 1722 onderin
                    sb.Append(getFemaleProductieQuery(pAniId, datum, pProgramids));
                }

                DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

                if (dt.Rows.Count > 0)
                {
                    int lRowindex = 0;
                    try
                    {
                        //als de eerste row fictief is, dan nemen we die
                        if (dt.Columns["Fictief"] != null)
                        {
                            if (dt.Rows[lRowindex]["Fictief"] != DBNull.Value)
                            {
                                int lFictief = 0;
                                int.TryParse(dt.Rows[lRowindex]["Fictief"].ToString(), out lFictief);
                                pFictief = (lFictief == 1);
                                if (dt.Rows.Count > 1)
                                {

                                    int.TryParse(dt.Rows[1]["Fictief"].ToString(), out lFictief);
                                    pFictief = (lFictief == 1);
                                    if (pFictief)
                                    { lRowindex = 1; }
                                }
                            }
                        }
                    }
                    catch { }
                    if (dt.Rows.Count > 1 && pFictief == false)
                    {
                        int.TryParse(dt.Rows[1]["aantLam"].ToString(), out aantLam);
                        if (aantLam > 0)
                        {
                            lRowindex = 1;
                            pFictief = true;
                        }
                    }
                    try
                    {
                        if (dt.Columns["Fictief"] != null)
                        {
                            if (dt.Rows[lRowindex]["Fictief"] != DBNull.Value)
                            {
                                int lFictief = 0;
                                int.TryParse(dt.Rows[lRowindex]["Fictief"].ToString(), out lFictief);
                                pFictief = (lFictief == 1);
                            }
                        }
                    }
                    catch { }
                    int.TryParse(dt.Rows[lRowindex]["maxBirNumber"].ToString(), out worpnr);
                    int.TryParse(dt.Rows[lRowindex]["aantLam"].ToString(), out aantLam);
                    int.TryParse(dt.Rows[lRowindex]["aantdoodLam"].ToString(), out aantdoodLam);
                    int.TryParse(dt.Rows[lRowindex]["leeftijd_afgerond"].ToString(), out leeftijd);

                    int iJaarling = 0;
                    int.TryParse(dt.Rows[lRowindex]["jaarling"].ToString(), out iJaarling);

                    jaarling = (iJaarling > 0);
                }
            }

            return true;
        }

        public bool isJaarling(int pAniId)
        {
            StringBuilder sb = new StringBuilder(
                "SELECT COUNT(a.AniId) as c" +
                " FROM ANIMAL a" +
                " LEFT JOIN EVENT e ON (a.AniId=e.AniId)" +
                " WHERE (a.AniId=" + pAniId.ToString() + ")" +
                " AND (e.EveDate=(SELECT MIN(EveDate) FROM EVENT WHERE aniId=a.AniId AND EveKind=5))" +
                " AND (DATEDIFF(e.EveDate, a.AniBirthDate) <= 465)" +
                " AND a.AniSex=2" +
                " AND a.AniId>0 AND e.EventId>0");

            DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

            bool jaarling = false;
            if (dt.Rows.Count == 1)
            {
                int iJaarling = 0;
                int.TryParse(dt.Rows[0]["c"].ToString(), out iJaarling);

                jaarling = (iJaarling > 0);
            }

            return jaarling;
        }

        public int animal_getMaxBirNumber(int aniId, DateTime datum)
        {
            int res = 0;

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT MAX(b.BirNumber) AS res" +
                " FROM BIRTH b" +
                " RIGHT JOIN EVENT e ON (e.EventId = b.EventId)" +
                " WHERE (e.EveDate <= " + MySQL_Datum(datum, 0) + ")" +
                " AND (e.AniId = " + aniId.ToString() + ")" +
                " AND (e.EveKind=5)");

            try
            {
                DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

                if (dt.Rows.Count == 1)
                {
                    String s = dt.Rows[0]["res"].ToString();
                    int.TryParse(s, out res);
                }
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            return res;
        }

        public int animal_ram_getAantalDochtersMetWorp(int aniId)
        {
            int res = 0;

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT COUNT(a.AniId) as cnt" +
                " FROM ANIMAL a" +
                " WHERE a.AniIdFather=" + aniId.ToString() +
                " AND a.AniSex=2" +
                " AND ((SELECT COUNT(AniId) FROM ANIMAL WHERE aniIdMother=a.AniId)>0)");

            try
            {
                DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

                if (dt.Rows.Count == 1)
                {
                    String s = dt.Rows[0]["cnt"].ToString();
                    int.TryParse(s, out res);
                }
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            return res;
        }

        public int ophalenLeeftijd(int pAniId)
        {
            ANIMAL a = GetAnimalById(pAniId);
            if (a == null)
                return -1;

            DateTime birthDate = a.AniBirthDate;
            DateTime now = DateTime.Today;
            int years = now.Year - birthDate.Year;
            if (now.Month < birthDate.Month || (now.Month == birthDate.Month && now.Day < birthDate.Day))
                --years;

            return years;
        }

        public int ophalenLeeftijdLaatsteWorp(ANIMAL pAnimal)
        {
            //ANIMAL a = GetAnimalById(pAniId);
            if (pAnimal == null) { return -1; }

            StringBuilder sbQuery = new StringBuilder();

            sbQuery.Append("SELECT MAX(e.EveDate) AS maxDat");
            sbQuery.Append(" FROM EVENT e");
            sbQuery.Append(" RIGHT JOIN BIRTH b ON (b.EventId=e.EventId)");
            sbQuery.Append(" WHERE (e.EveKind = 5)");

            if (pAnimal.AniSex == 1)
            {
                sbQuery.AppendFormat(" AND (b.AniFatherId = {0});", pAnimal.AniId);
            }
            else
            {
                sbQuery.AppendFormat(" AND (e.AniId = {0});", pAnimal.AniId);
            }

            //DbCommand dbcmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //dbcmd.CommandType = System.Data.CommandType.Text;
            //dbcmd.CommandText = sbQuery.ToString();

            //DbDataReader reader = dbcmd.ExecuteReader();
            //reader.Read();
            object maxevedate = mDatabase.GetSingleValue(mToken.getLastChildConnection(), sbQuery.ToString());
            DateTime maxDat; // = Convert.ToDateTime(reader.GetValue(0));
            //DateTime.TryParse(reader.GetValue(0).ToString(), out maxDat);
            DateTime.TryParse(maxevedate.ToString(), out maxDat);

            //reader.Close();

            int leeftijd = 0;

            if (maxDat != DateTime.MinValue)
            {
                DateTime birthDate = pAnimal.AniBirthDate;
                int years = maxDat.Year - birthDate.Year;

                //Erik; onderstaande code heb ik uitgecomment. 
                //De leeftijd voor de productietelling wordt met jaartallen berekend (en niet de exacte data).

                //if (maxDat.Month < birthDate.Month || (maxDat.Month == birthDate.Month && maxDat.Day < birthDate.Day))
                //    --years;

                leeftijd = years;
            }

            return leeftijd;
        }

        [Obsolete("VOEDERS is herschreven naar ARTIKEL")]
        public List<VOEDERS> GetVoeders()
        {
            List<VOEDERS> lResultValue = new List<VOEDERS>();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandText = "SELECT * FROM VOEDERS";
            DataTable dtVoeders = QueryData("SELECT * FROM VOEDERS");
            VOEDERS voed;
            foreach (DataRow drVoeders in dtVoeders.Rows)
            {
                voed = new VOEDERS();
                if (mDatabase.FillObject(voed, drVoeders))
                    lResultValue.Add(voed);
            }
            return lResultValue;
        }
        [Obsolete("VOEDERS is herschreven naar ARTIKEL")]
        public VOEDERS GetVoedersByArtikelCode(string ArtCode)
        {
            VOEDERS voed = new VOEDERS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM VOEDERS ")
                        .Append(" WHERE Artikelcode='" + ArtCode + "'");
            mDatabase.FillObject(mToken.getLastChildConnection(), voed, lQuery);
            return voed;
        }
        [Obsolete("VOEDERS is herschreven naar ARTIKEL")]
        public VOEDERS getFeedNameByFeedNr(int feednr)
        {
            VOEDERS voed = new VOEDERS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM VOEDERS ");
            lQuery.AppendFormat(" WHERE CodeFeed={0} ", feednr);
            mDatabase.FillObject(mToken.getLastChildConnection(), voed, lQuery);
            return voed;
        }

        public WGCURVE GetWgcurve(int pCurvenr)
        {
            WGCURVE wgcurve = new WGCURVE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM WGCURVE ")
                        .Append(" WHERE Curvenr=" + pCurvenr.ToString());
            mDatabase.FillObject(mToken.getLastChildConnection(), wgcurve, lQuery);
            return wgcurve;
        }
        public List<WGCURVE> GetWgcurveListByFarmId(int pFarmId)
        {
            List<WGCURVE> lResultValue = new List<WGCURVE>();
            DataTable dtCurve = QueryData("SELECT * FROM WGCURVE INNER JOIN WGCURVEFARM ON WGCURVEFARM.Curvenr=WGCURVE.Curvenr WHERE WGCURVEFARM.FarmId=" + pFarmId.ToString());
            WGCURVE wcrvd;
            foreach (DataRow drCurve in dtCurve.Rows)
            {
                wcrvd = new WGCURVE();
                if (mDatabase.FillObject(wcrvd, drCurve))
                    lResultValue.Add(wcrvd);
            }
            return lResultValue;
        }
        public WGCURVED GetWgcurveD(int pCurvenr, int pfd_Day)
        {
            WGCURVED wgcurved = new WGCURVED();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM WGCURVED ")
                        .Append(" WHERE Curvenr=" + pCurvenr.ToString() + " AND fd_Day=" + pfd_Day.ToString());
            mDatabase.FillObject(mToken.getLastChildConnection(), wgcurved, lQuery);
            return wgcurved;
        }
        public List<WGCURVED> GetWgcurveDList(int pCurvenr)
        {
            List<WGCURVED> lResultValue = new List<WGCURVED>();
            DataTable dtCurved = QueryData("SELECT * FROM WGCURVED WHERE Curvenr=" + pCurvenr.ToString() + " ORDER BY fd_Day");
            WGCURVED wcrvd;
            foreach (DataRow drCurved in dtCurved.Rows)
            {
                wcrvd = new WGCURVED();
                if (mDatabase.FillObject(wcrvd, drCurved))
                    lResultValue.Add(wcrvd);
            }
            return lResultValue;
        }
        public WGCURVEFARM getWGCurveFarm(int pCurvenr, int pFarmId)
        {
            WGCURVEFARM wgcurveF = new WGCURVEFARM();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM WGCURVEFARM ")
                        .Append(" WHERE Curvenr=" + pCurvenr.ToString() + " AND FarmId=" + pFarmId.ToString());
            mDatabase.FillObject(mToken.getLastChildConnection(), wgcurveF, lQuery);
            return wgcurveF;
        }
        public List<WGCURVEFARM> getWGCurveFarms(int pFarmId)
        {
            List<WGCURVEFARM> lResultValue = new List<WGCURVEFARM>();
            DataTable dtCurveF = QueryData("SELECT * FROM WGCURVEFARM WHERE  FarmId=" + pFarmId.ToString());
            WGCURVEFARM wcrvf;
            foreach (DataRow drCurvef in dtCurveF.Rows)
            {
                wcrvf = new WGCURVEFARM();
                if (mDatabase.FillObject(wcrvf, drCurvef))
                    lResultValue.Add(wcrvf);
            }
            return lResultValue;
        }

        [Obsolete("VOEDERS is herschreven naar ARTIKEL")]
        public bool InsertVoeders(VOEDERS pVoeders)
        {
            try
            {
                if (WriteActions.SaveObject(pVoeders) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        [Obsolete("VOEDERS is herschreven naar ARTIKEL")]
        public bool UpdateVoeders(VOEDERS pVoeders)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVoeders);
            String[] UpdateParams = new String[]
            {
                            "FeedName",
                            "Feedprice",
                            "Remarks",
                            "CalculationKind",
                            "DryMatter",
                            "VEM",
                            "DVE",
                            "OEB",
                            "Calcium",
                            "Fosfor",
                            "Natrium",
                            "Magnesium",
                            "Structuur",
                            "RoughProtein",
                            "Kalium",
                            "Chloor",
                            "Zwavel",
                            "Deb",
                            "HarvestDate",
                            "FeedKind",
                            "FeedGroupCode",
                            "ArtikelCode"
            };//"DefaultSilonr" //field not needed in agrobase
            string CommandText = mDatabase.CreateUpdateCommandText(pVoeders, "CodeFeed", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
            return mDatabase.ModifyObject(mToken, pVoeders, CommandText) == 1;
        }
        [Obsolete("VOEDERS is herschreven naar ARTIKEL")]
        public bool DeleteVoeders(VOEDERS pVoeders)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVoeders);
            String[] DeleteParams = new String[]
             {
                 "CodeFeed"
             };
            string CommandText = mDatabase.CreateDeleteCommandText(pVoeders, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pVoeders, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public List<FSTOCK> getFstockByFarmId(int farmId)
        {
            List<FSTOCK> lResultValue = new List<FSTOCK>();
            DataTable dtFstock = QueryData("SELECT * FROM FSTOCK WHERE FarmId=" + farmId.ToString());
            FSTOCK stock;
            foreach (DataRow drStock in dtFstock.Rows)
            {
                stock = new FSTOCK();
                if (mDatabase.FillObject(stock, drStock))
                    lResultValue.Add(stock);
            }
            return lResultValue;
        }
        public bool InsertFStock(FSTOCK pFstock)
        {
            try
            {
                if (WriteActions.SaveObject(pFstock) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateFStock(FSTOCK pFstock)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFstock);

            String[] UpdateParams = new String[]
            {
                            "StoKind",
                            "StoDate",
                            "StoTime",
                            "GroupNr"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pFstock, "StockId", UpdateParams);

            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pFstock, mDatabase.CreateUpdateCommandText(pFstock, "StockId", UpdateParams)) != 1) return false;
            return true;
        }
        public bool DeleteFstock(FSTOCK pFstock)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFstock);
            String[] DeleteParams = new String[]
             {
                 "StockId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFstock, DeleteParams);
            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFstock, mDatabase.CreateDeleteCommandText(pFstock, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertFeedStc3(FEEDSTC3 pFeedStc3)
        {
            try
            {
                if (WriteActions.SaveObject(pFeedStc3) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateFeedStc3(FEEDSTC3 pFeedStc3)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedStc3);
            String[] UpdateParams = new String[]
            {
                            //"StockId",
                            "FSQuantity",
                            "FSStorage",
                            "FSFeedCode",
                            "FSFeedKind",
                            "FSFeedUnit",
                            "FSFeedDryMatter",
                            "FSFeedVEM",
                            "FSFeedDVE",
                            "FSFeedOEB",
                            "FSFeedStructure",
                            "FSFeedCalcium",
                            "FSFeedFosfaat",
                            "FSFeedNatrium",
                            "FSFeedKalium",
                            "FSFeedRawProtein",
                            "FSFeedMagnesium"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pFeedStc3, "FeedStockId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedStc3, mDatabase.CreateUpdateCommandText(pFeedStc3, "FeedStockId", UpdateParams)) != 1) return false;
            return true;
        }
        public bool DeleteFeedStc3(FEEDSTC3 pFeedStc3)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedStc3);
            String[] DeleteParams = new String[]
             {
                 "FeedStockId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedStc3, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedStc3, mDatabase.CreateDeleteCommandText(pFeedStc3, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public List<FEEDSTC3> getFeedstc3ByFarmId(int farmId)
        {
            List<FEEDSTC3> lResultValue = new List<FEEDSTC3>();
            DataTable dtFeedstc3 = QueryData("SELECT * FROM FEEDSTC3 WHERE FarmId=" + farmId.ToString());
            FEEDSTC3 Feedstc3;
            foreach (DataRow drFeedstc3 in dtFeedstc3.Rows)
            {
                Feedstc3 = new FEEDSTC3();
                if (mDatabase.FillObject(Feedstc3, drFeedstc3))
                    lResultValue.Add(Feedstc3);
            }
            return lResultValue;
        }
        public List<LABELS> GetLabels(int pLabkind, int pLabCountry)
        {
            List<LABELS> lResultValue = new List<LABELS>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT LABELS.* FROM LABELS");
            lQuery.AppendFormat(" WHERE LabKind = {0} AND LabCountry = {1} ORDER BY LabId", pLabkind, pLabCountry);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                LABELS lbls = new LABELS();
                if (mDatabase.FillObject(lbls, drwLabels))
                {
                    lResultValue.Add(lbls);
                }
            }

            return lResultValue;
        }

        public LABELS GetLabel(int pLabkind, int pLabCountry, int pLabId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT LABELS.* FROM LABELS");
            lQuery.AppendFormat(" WHERE LabKind = {0} AND LabCountry = {1} AND LabId={2} ", pLabkind, pLabCountry, pLabId);

            LABELS lLabel = new LABELS();
            mDatabase.FillObject(mToken, lLabel, lQuery);
            return lLabel;

        }

        public List<LABELS> getMultipleLabels(string[] pLabkinds, int pLabCountry)
        {
            List<LABELS> lResultValue = new List<LABELS>();
            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT LABELS.* FROM LABELS");
            lQuery.AppendFormat(" WHERE LabKind in ({0}) AND LabCountry = {1} ORDER BY LabId", string.Join(",", pLabkinds), pLabCountry);

            DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                LABELS lbls = new LABELS();
                if (mDatabase.FillObject(lbls, drwLabels))
                {
                    lResultValue.Add(lbls);
                }
            }

            return lResultValue;
        }


        //private DbCommand AnimalCheck(String pAniLifeNumber)
        //{
        //    /*BEGIN
        //        SELECT * FROM ANIMAL WHERE aniLifeNumber = lifeNumber  
        //     * AND AniId>0 ;
        //    END*/
        //    DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
        //    cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //    cmd.CommandText = "getAnimalByLifeNumber";
        //    mDatabase.AddParameter(cmd, "lifeNumber", pAniLifeNumber);
        //    return cmd;
        //}

        public int getNumberofAnimals(int pFarmId)
        {

            string sql = "SELECT COUNT(AniId) as aantal from ANIMALCATEGORY where ANIMALCATEGORY.FarmId = " + pFarmId.ToString();
            //unLogger.WriteInfo("getNumberofAnimals  query start");
            DataTable tbl = GetDataBase().QueryData(mToken.getLastChildConnection(), new StringBuilder(sql));
            //unLogger.WriteInfo("getNumberofAnimals  query end");
            int aantal = 0;
            int.TryParse(tbl.Rows[0][0].ToString(), out aantal);

            return aantal;
        }

        public List<FTPINFO> GetFTPINFO(int pUBNId)
        {
            /*
             * GetFTPInfo
             * BEGIN
                SELECT agrofactuur.FTPLIST.FtpHostName, 
						                 FTPUSER.UserName, 
						                 FTPUSER.Password, 
		                 agrofactuur.FTPACTIO.DirectoryFrom, 
		                 agrofactuur.FTPACTIO.DirectoryTo , 
		                 agrofactuur.FTPACTIO.direction , 
		                 agrofactuur.FTPLIST.PassiveMode, 
		                 agrofactuur.FTPACTIO.UseExtention, 
		                 agrofactuur.FTPACTIO.AfterTransfer
                FROM agrofactuur.FTPLIST
                JOIN agrofactuur.FTPACTIO
                ON  agrofactuur.FTPLIST.FtpNumber = agrofactuur.FTPACTIO.FtpNumber
                JOIN FTPUSER
                ON agrofactuur.FTPLIST.FtpNumber = FTPUSER.FtpNumber
                WHERE FTPUSER.UbnId = UBNid;
             * 
                END*/
            //List<DataObject> lFTPlist = new List<DataObject>();
            ////FTPINFO lFtpInfo = new FTPINFO();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "GetFTPInfo";
            //mDatabase.AddParameter(cmd, "UBNId", pUBNId);

            //if (!mDatabase.FillObject(mToken.getLastChildConnection(), lFTPlist, cmd, (new FTPINFO())))
            //{
            //    //throw new AccessViolationException(" FTP not found");
            //}
            ////lFTPlist.Add(lFtpInfo);
            //return lFTPlist.ConvertAll<FTPINFO>(Record => (FTPINFO)Record);

            List<FTPINFO> lResultValue = new List<FTPINFO>();
            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT agrofactuur.FTPLIST.FtpHostName, ");
            lQuery.Append(" 			                 FTPUSER.UserName, ");
            lQuery.Append(" 			                 FTPUSER.Password, ");
            lQuery.Append("              agrofactuur.FTPACTIO.DirectoryFrom, ");
            lQuery.Append("              agrofactuur.FTPACTIO.DirectoryTo , ");
            lQuery.Append("              agrofactuur.FTPACTIO.direction , ");
            lQuery.Append("              agrofactuur.FTPLIST.PassiveMode, ");
            lQuery.Append("              agrofactuur.FTPACTIO.UseExtention, ");
            lQuery.Append("              agrofactuur.FTPACTIO.AfterTransfer");
            lQuery.Append("     FROM agrofactuur.FTPLIST");
            lQuery.Append("     JOIN agrofactuur.FTPACTIO");
            lQuery.Append("     ON  agrofactuur.FTPLIST.FtpNumber = agrofactuur.FTPACTIO.FtpNumber");
            lQuery.Append("     JOIN FTPUSER");
            lQuery.Append("     ON agrofactuur.FTPLIST.FtpNumber = FTPUSER.FtpNumber");
            lQuery.AppendFormat("     WHERE FTPUSER.UbnId = {0};", pUBNId);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                FTPINFO lbls = new FTPINFO();
                if (mDatabase.FillObject(mToken, lbls, drwLabels))
                {
                    SettingsDecrypter Decrypt = new SettingsDecrypter();
                    Decrypt.DecryptFtpInfo(ref lbls);
                    lResultValue.Add(lbls);
                }
            }


            return lResultValue;

        }

        public ANALYSE GetAnalyseByKey(int pAnimalId, DateTime pMilkDate)
        {
            /*  getAnalyse
                BEGIN
	                SELECT *
	                FROM ANALYSE 
	                WHERE AnaMilkDate = MilkDate
	                AND AniId = AnimalId;
                END
             */
            //ANALYSE lAnalyse = new ANALYSE();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getAnalyse";
            //mDatabase.AddParameter(cmd, "AnimalId", pAnimalId);
            //mDatabase.AddParameter(cmd, "MilkDate", pMilkDate);
            //mDatabase.FillObject(mToken, lAnalyse, cmd);
            //return lAnalyse;
            ANALYSE lAnalyse = new ANALYSE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT * FROM ANALYSE ");
            lQuery.AppendFormat(" WHERE AniId = {0} ", pAnimalId);
            lQuery.Append(" AND  date_format(AnaMilkDate,'%Y-%m-%d')= '" + pMilkDate.ToString("yyyy-MM-dd") + "' ");
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnalyse, lQuery);
            return lAnalyse;
        }

        public ANALYSE GetAnalyseByKeyAndTypeOfControl(int pAnimalId, DateTime pMilkDateTime, int AnaTypeOfControl)
        {
            ANALYSE lAnalyse = new ANALYSE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT * FROM ANALYSE ");
            lQuery.AppendFormat(" WHERE AniId = {0} ", pAnimalId);
            lQuery.AppendFormat(" AND AnaMilkDate = '{0}' ", pMilkDateTime.ToString("yyyy-MM-dd HH:mm:ss"));
            lQuery.AppendFormat(" AND AnaTypeOfControl = {0} ", AnaTypeOfControl);
            mDatabase.FillObject(mToken.getLastChildConnection(), lAnalyse, lQuery);
            return lAnalyse;
        }

        public List<ANALYSE> GetAnalyseByAnimal(int pAnimalId, int pUbnId)
        {

            List<ANALYSE> lResultList = new List<ANALYSE>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT * FROM ANALYSE ");
            lQuery.AppendFormat(" WHERE AniId = {0} AND UbnID={1}", pAnimalId, pUbnId);
            lQuery.Append(" ORDER BY  AnaMilkDate DESC ");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow dr in tbl.Rows)
            {
                var l = new ANALYSE();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }

        public BEDRIJF GetBedrijfById(int pFarmId)
        {
            BEDRIJF lBedrijf = new BEDRIJF();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BEDRIJF");
            lQuery.AppendFormat(" WHERE FarmId = {0}", pFarmId);
            mDatabase.FillObject(mToken, lBedrijf, lQuery);
            return lBedrijf;
        }
        public LABELS GetLabelByIdAndKindAndCountry(int pLabId, int pLabkind, int pLabCountry)
        {
            LABELS lab = new LABELS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM LABELS");
            lQuery.AppendFormat(" WHERE LabKind = {0} AND LabCountry = {1} AND LabId = {2}", pLabkind, pLabCountry, pLabId);
            mDatabase.FillObject(mToken, lab, lQuery);
            return lab;
        }

        [Obsolete("Verplaatst naar Bedrijf")]
        public List<BEDRIJF> getBedrijvenByUBNId(int pUBNId)
        {
            return Bedrijf.getBedrijvenByUBNId(pUBNId);
        }

        public List<BEDRIJF> getBedrijvenByProgramId(int pProgramId)
        {
            var lResultList = new List<BEDRIJF>();
            if (pProgramId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * ");
                lQuery.Append(" FROM BEDRIJF WHERE Programid = " + pProgramId.ToString() + " AND FarmId>0 AND UbnId>0");

                DataTable tbl = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new BEDRIJF();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            return lResultList;
        }
        public List<BEDRIJF> getBedrijvenByProgramIds(List<int> pProgramIds)
        {
            var lResultList = new List<BEDRIJF>();
            if (pProgramIds.Count() > 0)
            {
                StringBuilder sql = new StringBuilder();
                sql.Append(" SELECT * FROM BEDRIJF  ");

                sql.Append(" WHERE  ProgramId IN (" + intListToString(pProgramIds) + ") ");
                sql.Append(" AND FarmId>0 AND UbnId>0 ");

                DataSet ds = new DataSet();
                DataTable tbl = mDatabase.QueryData(mToken, ds, sql, "Bedrijven", MissingSchemaAction.Add);

                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new BEDRIJF();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            return lResultList;
        }
        public List<BEDRIJF> getBedrijvenByProgId(int pProgId)
        {
            var lResultList = new List<BEDRIJF>();
            if (pProgId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * ");
                lQuery.Append(" FROM BEDRIJF WHERE ProgId = " + pProgId.ToString() + " AND FarmId>0 AND UbnId>0");

                DataTable tbl = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new BEDRIJF();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            return lResultList;
        }

        public List<BEDRIJF> getBedrijven()
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM BEDRIJF ");
            lQuery.Append(" WHERE FarmId > 0 ");

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            var lResultList = new List<BEDRIJF>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new BEDRIJF();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }

        public List<BEDRIJF> getBedrijvenByFarmId(int pFarmId)
        {
            var lResultList = new List<BEDRIJF>();
            if (pFarmId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM BEDRIJF ");
                lQuery.Append(" WHERE BEDRIJF.UBNid =  ");

                lQuery.AppendFormat(" ( SELECT UbnId FROM BEDRIJF WHERE BEDRIJF.FarmId ={0} ) ", pFarmId);
                lQuery.Append(" AND FarmId>0 ");
                DataTable tbl = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new BEDRIJF();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            if (lResultList.Count == 0)
                return null;
            return lResultList;
        }

        public List<BEDRIJF> getBedrijvenByThrId(int pThrId)
        {
            var lResultList = new List<BEDRIJF>();
            if (pThrId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM BEDRIJF JOIN UBN ON UBN.UbnId=BEDRIJF.UbnId ");
                lQuery.AppendFormat(" WHERE UBN.ThrId = {0} ", pThrId);


                lQuery.Append(" AND BEDRIJF.FarmId>0 AND UBN.UbnID>0 ");

                DataSet ds = new DataSet();
                DataTable tbl = mDatabase.QueryData(mToken, ds, lQuery, "bedijvn", MissingSchemaAction.Add);


                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new BEDRIJF();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            if (lResultList.Count == 0)
                return null;
            return lResultList;
        }

        public List<BEDRIJF> getBedrijvenPositiveProgramIdWithProgId(List<int> progIds)
        {
            var lResultList = new List<BEDRIJF>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM BEDRIJF ");
            lQuery.Append(" WHERE ProgramId > 0 ");
            lQuery.AppendFormat(" AND ProgId IN ({0})", string.Join(", ", progIds.Select(i => i.ToString()).ToArray()));


            DataTable tbl = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow dr in tbl.Rows)
            {
                var l = new BEDRIJF();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }

            return lResultList;
        }

        public BEDRIJF GetBedrijfByUbnIdProgIdProgramid(int pUbnId, int pProgId, int pProgramid)
        {
            BEDRIJF lBedrijf = new BEDRIJF();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BEDRIJF");
            lQuery.AppendFormat(" WHERE UbnId = {0}", pUbnId);
            lQuery.AppendFormat(" AND ProgId = {0}", pProgId);
            lQuery.AppendFormat(" AND Programid = {0}", pProgramid);
            lQuery.Append(" AND FarmId>0 ");
            mDatabase.FillObject(mToken, lBedrijf, lQuery);
            return lBedrijf;
        }

        public BEDRIJF GetBedrijfByUbnIdProgramid(int pUbnId, int pProgramid)
        {
            BEDRIJF lBedrijf = new BEDRIJF();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BEDRIJF");
            lQuery.AppendFormat(" WHERE UbnId = {0}", pUbnId);
            lQuery.AppendFormat(" AND Programid = {0}", pProgramid);
            lQuery.Append(" AND FarmId>0 ");
            mDatabase.FillObject(mToken, lBedrijf, lQuery);
            return lBedrijf;
        }

        public IEnumerable<BEDRIJF> GetBedrijfByUbnIdProgId(int ubnId, int progId)
        {
            string sql =
                string.Format(@"SELECT b.*
                    FROM agrofactuur.BEDRIJF b
                    JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId
                    WHERE u.UbnId = {0}
                    AND b.ProgId = {1} AND b.FarmId > 0", ubnId, progId);

            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<BEDRIJF>(tbl);
        }

        //TODO refactor
        public void getAnimalCurrentOwner(int pAniId, int pProgId, out BEDRIJF pBedrijf, out UBN pUbn, out THIRD pThird)
        {
            string db = getDbPrefix(pProgId);




            pBedrijf = new BEDRIJF();
            pUbn = new UBN();
            pThird = new THIRD();
            if (pAniId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT ANIMALCATEGORY.Anicategory AS AnicatAniCategory, agrofactuur.BEDRIJF.*,  agrofactuur.UBN.*, agrofactuur.THIRD.* FROM " + db + "ANIMALCATEGORY ");
                lQuery.Append(" JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.FarmId=ANIMALCATEGORY.FarmId ");
                lQuery.Append(" JOIN agrofactuur.UBN ON agrofactuur.UBN.UBNid=agrofactuur.BEDRIJF.UBNid ");
                lQuery.Append(" JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID ");
                lQuery.Append(" WHERE ANIMALCATEGORY.Anicategory >0 AND  ANIMALCATEGORY.Anicategory < 4 ");
                lQuery.AppendFormat(" AND ANIMALCATEGORY.AniId={0} ", pAniId);
                lQuery.Append(" AND  (ANIMALCATEGORY.Ani_Mede_Eigenaar = 0 OR ANIMALCATEGORY.Ani_Mede_Eigenaar is null)");
                lQuery.Append(" ORDER BY AnicatAniCategory ");
                DataSet ds = new DataSet();
                System.Data.DataTable dtOwners = mDatabase.QueryData(mToken, ds, lQuery, "owner", MissingSchemaAction.Add);
                foreach (DataRow drwOwner in dtOwners.Rows)
                {
                    if (drwOwner["AnicatAniCategory"] != DBNull.Value)
                    {
                        int lAnicategory = int.Parse(drwOwner["AnicatAniCategory"].ToString());
                        if (lAnicategory > 0 && lAnicategory < 4)
                        {
                            mDatabase.FillObject(pBedrijf, drwOwner);
                            mDatabase.FillObject(pUbn, drwOwner);
                            mDatabase.FillObject(pThird, drwOwner);
                            if (pThird.ThrCountry.Trim() == "")
                            {
                                pThird.ThrCountry = "151";
                            }
                            break;
                        }
                    }
                }
            }

        }

        public void getAnimalCurrentOwner(int pAniId, out BEDRIJF pBedrijf, out UBN pUbn, out THIRD pThird)
        {
            pBedrijf = new BEDRIJF();
            pUbn = new UBN();
            pThird = new THIRD();
            if (pAniId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT ANIMALCATEGORY.Anicategory AS AnicatAniCategory, agrofactuur.BEDRIJF.*,  agrofactuur.UBN.*, agrofactuur.THIRD.* FROM ANIMALCATEGORY ");
                lQuery.Append(" JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.FarmId=ANIMALCATEGORY.FarmId ");
                lQuery.Append(" JOIN agrofactuur.UBN ON agrofactuur.UBN.UBNid=agrofactuur.BEDRIJF.UBNid ");
                lQuery.Append(" JOIN agrofactuur.THIRD ON agrofactuur.THIRD.ThrId=agrofactuur.UBN.ThrID ");
                lQuery.Append(" WHERE ANIMALCATEGORY.Anicategory >0 AND  ANIMALCATEGORY.Anicategory < 4 ");
                lQuery.AppendFormat(" AND ANIMALCATEGORY.AniId={0} ", pAniId);
                lQuery.Append(" AND  (ANIMALCATEGORY.Ani_Mede_Eigenaar = 0 OR ANIMALCATEGORY.Ani_Mede_Eigenaar is null)");
                lQuery.Append(" ORDER BY AnicatAniCategory ");
                DataSet ds = new DataSet();
                System.Data.DataTable dtOwners = mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "owner", MissingSchemaAction.Add);
                foreach (DataRow drwOwner in dtOwners.Rows)
                {
                    if (drwOwner["AnicatAniCategory"] != DBNull.Value)
                    {
                        int lAnicategory = int.Parse(drwOwner["AnicatAniCategory"].ToString());
                        if (lAnicategory > 0 && lAnicategory < 4)
                        {
                            mDatabase.FillObject(pBedrijf, drwOwner);
                            mDatabase.FillObject(pUbn, drwOwner);
                            mDatabase.FillObject(pThird, drwOwner);
                            if (pThird.ThrCountry.Trim() == "")
                            {
                                pThird.ThrCountry = "151";
                            }
                            break;
                        }
                    }
                }
            }

        }


        public UBN getUBNByBedrijfsnummer(String pBedrijfsnummer)
        {
            UBN lUbn = new UBN();
            if (!string.IsNullOrEmpty(pBedrijfsnummer))
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM UBN");
                lQuery.AppendFormat(" WHERE Bedrijfsnummer = '{0}' AND UBN.UBNid>0 ", pBedrijfsnummer);
                mDatabase.FillObject(mToken, lUbn, lQuery);
            }
            return lUbn;
        }
        public UBN getUBNByBedrijfsnummer(String pBedrijfsnummer, out THIRD pThird)
        {
            UBN lUbn = new UBN();
            pThird = new THIRD();
            if (!string.IsNullOrEmpty(pBedrijfsnummer))
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT UBN.*,THIRD.* FROM UBN");
                lQuery.Append(" LEFT JOIN THIRD ON THIRD.ThrId =UBN.ThrId ");
                lQuery.AppendFormat(" WHERE Bedrijfsnummer = '{0}' AND UBN.UBNid>0 ", pBedrijfsnummer);
                System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, lQuery);

                if (dtUBN.Rows.Count > 0)
                {
                    mDatabase.FillObject(lUbn, dtUBN.Rows[0]);
                    mDatabase.FillObject(pThird, dtUBN.Rows[0]);
                    if (pThird.ThrCountry.Trim() == "")
                    {
                        pThird.ThrCountry = "151";
                    }
                }
            }
            return lUbn;
        }
        [Obsolete("Query zonder join naar THIRD tabel", true)] //TODO
        public UBN getUBNByThirdID(int pThrID)
        {
            UBN lUbn = new UBN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM UBN");
            lQuery.AppendFormat(" WHERE ThrID = {0} ", pThrID);
            mDatabase.FillObject(mToken, lUbn, lQuery);
            return lUbn;
        }

        public UBN getUBNByFarmId(int pFarmId)
        {
            UBN lUbn = new UBN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT UBN.* FROM UBN ");
            lQuery.Append(" JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid ");
            lQuery.AppendFormat(" WHERE BEDRIJF.FarmId = {0} AND UBN.UBNid>0 ", pFarmId);
            mDatabase.FillObject(mToken, lUbn, lQuery);
            return lUbn;
        }

        public string getBedrijfsnummer(int pUbnId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT Bedrijfsnummer FROM UBN");
            lQuery.AppendFormat(" WHERE UbnId = {0} ", pUbnId);

            System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, lQuery);
            if (dtUBN.Rows.Count > 0)
            {
                if (dtUBN.Rows[0][0] != DBNull.Value)
                {
                    return dtUBN.Rows[0][0].ToString();
                }
            }
            return "";
        }

        public List<UBN> getUBNsByThirdID(int pThrID)
        {
            List<UBN> lResultValue = new List<UBN>();
            StringBuilder lQuery = new StringBuilder();
            //lQuery.Append(" SELECT * FROM UBN");
            lQuery.Append($@" SELECT * FROM UBN WHERE ThrID = {pThrID} AND UBN.UBNid > 0 ");

            System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drwUBN in dtUBN.Rows)
            {
                UBN lbls = new UBN();
                if (mDatabase.FillObject(lbls, drwUBN))
                { lResultValue.Add(lbls); }
            }

            return lResultValue;
        }

        public List<UBN> getUBNsByThirdIDs(List<int> thirdids)
        {
            List<UBN> lResultValue = new List<UBN>();
            if (thirdids.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder(
                $@" SELECT * FROM UBN  WHERE ThrID IN ({string.Join(", ", thirdids)}) AND UBN.UBNid>0 ");

                System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow drwUBN in dtUBN.Rows)
                {
                    UBN lbls = new UBN();
                    if (mDatabase.FillObject(lbls, drwUBN))
                    { lResultValue.Add(lbls); }
                }
            }
            return lResultValue;
        }

        public List<UBN> getUBNsByProgId(int pProgId)
        {
            List<UBN> lResultValue = new List<UBN>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT u.* FROM UBN u LEFT JOIN BEDRIJF b ON (u.UBNid=b.UBNid)");
            lQuery.AppendFormat(" WHERE (b.ProgId={0})", pProgId);
            lQuery.Append(" GROUP BY u.Bedrijfsnummer");

            System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drwUBN in dtUBN.Rows)
            {
                UBN data = new UBN();
                if (mDatabase.FillObject(data, drwUBN)) { lResultValue.Add(data); }
            }

            return lResultValue;
        }

        public List<UBN> getUBNsByProgramId(int pProgramId)
        {
            List<UBN> lResultValue = new List<UBN>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT u.* FROM UBN u LEFT JOIN BEDRIJF b ON (u.UBNid=b.UBNid)");
            lQuery.AppendFormat(" WHERE (b.ProgramId={0})", pProgramId);
            lQuery.Append(" GROUP BY u.Bedrijfsnummer");

            System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drwUBN in dtUBN.Rows)
            {
                UBN data = new UBN();
                if (mDatabase.FillObject(data, drwUBN)) { lResultValue.Add(data); }
            }

            return lResultValue;
        }

        public List<UBN> GetUBNsByProgramId(List<int> pProgramIdList)
        {
            if (pProgramIdList.Count == 0)
            {
                return null;
            }
            else
            {
                List<UBN> lResultValue = new List<UBN>();

                String sProgramIds = intListToString(pProgramIdList);

                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT u.*");
                sb.Append(" FROM UBN u");
                sb.Append(" RIGHT JOIN BEDRIJF b ON (u.UBNid=b.UBNid)");
                sb.Append(" WHERE (b.ProgramId IN (" + sProgramIds + "))");
                sb.Append(" AND (u.UbnId>0)");
                sb.Append(" GROUP BY u.Bedrijfsnummer");
                sb.Append(" ORDER BY u.Bedrijfsnummer");

                System.Data.DataTable dtUBN = mDatabase.QueryData(mToken, sb);

                foreach (DataRow drwUBN in dtUBN.Rows)
                {
                    UBN data = new UBN();
                    if (mDatabase.FillObject(data, drwUBN)) { lResultValue.Add(data); }
                }

                return lResultValue;
            }
        }

        public BUYING GetBuyingByMovId(int pMovId)
        {
            BUYING lBuying = new BUYING();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BUYING");
            lQuery.AppendFormat(" WHERE MovId = {0}", pMovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lBuying, lQuery);
            return lBuying;
        }

        public List<BUYING> GetBuyingsByMovIds(List<int> pMovIds)
        {
            List<BUYING> lResultValue = new List<BUYING>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BUYING");
            lQuery.AppendFormat(" WHERE MovId IN ({0})", intListToString(pMovIds));
            System.Data.DataTable dtBUYS = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwBUY in dtBUYS.Rows)
            {
                BUYING bu = new BUYING();
                if (mDatabase.FillObject(bu, drwBUY))
                {
                    lResultValue.Add(bu);
                }
            }

            return lResultValue;

        }

        public GROUPID GetGroupid(int AniId)
        {
            GROUPID lgroupId = new GROUPID();
            //Dit moet gewoon 1 record opleveren (of geen natuurlijk)
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GROUPID");
            lQuery.AppendFormat(" WHERE  AniId = {0} ", AniId.ToString());
            mDatabase.FillObject(mToken.getLastChildConnection(), lgroupId, lQuery);
            return lgroupId;
        }

        public int GetGroupnr(int aniId, DateTime datum)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)

            int groupnr = 0;
            string strDate = datum.ToString("yyyy-MM-dd HH:mm:ss");

            StringBuilder sql = new StringBuilder(
                "SELECT m.Groupnr FROM MOVEMENT m WHERE (m.AniId=" + aniId.ToString() + ")" +
                " AND (m.MovDate = (SELECT MAX(MovDate) FROM MOVEMENT WHERE AniId=m.AniId AND Groupnr <> 0 AND MOVEMENT.MovId>0 AND MovDate <= '" + strDate + "'))" +
                " LIMIT 1");

            DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), sql);

            if (dtResults.Rows.Count == 1)
            {
                int.TryParse(dtResults.Rows[0]["Groupnr"].ToString(), out groupnr);
            }

            return groupnr;
        }

        public List<GROUPID> GetGroupids(int pGroupid, int pFarmId)
        {
            List<GROUPID> lResultValue = new List<GROUPID>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" select * from GROUPID INNER JOIN ANIMALCATEGORY ON ANIMALCATEGORY.AniId = GROUPID.AniId ");
            lQuery.AppendFormat(" WHERE Groupid = {0} AND ANIMALCATEGORY.FarmId = {1}  AND ANIMALCATEGORY.Anicategory IN (1,2,3) ", pGroupid, pFarmId);
            // 
            System.Data.DataTable dtGroupids = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwGroups in dtGroupids.Rows)
            {
                GROUPID lbls = new GROUPID();
                if (mDatabase.FillObject(lbls, drwGroups))
                {
                    lResultValue.Add(lbls);
                }
            }

            return lResultValue;
        }
        public GROUPID GetGroupid(int Groupid, int AniId)
        {
            GROUPID lgroupId = new GROUPID();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GROUPID");
            lQuery.AppendFormat(" WHERE GroupId = {0} AND AniId = {1} ", Groupid.ToString(), AniId.ToString());
            mDatabase.FillObject(mToken.getLastChildConnection(), lgroupId, lQuery);
            return lgroupId;
        }
        public GROUPS GetGroupsAndlabel(int FarmId, int Groupid, int pLabCountry, out LABELS pLabels)
        {
            GROUPS lgroups = new GROUPS();
            pLabels = new LABELS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GROUPS");
            lQuery.Append(" INNER JOIN agrofactuur.LABELS ON agrofactuur.LABELS.LabID = GROUPS.Groupkind ");
            lQuery.AppendFormat(" WHERE FarmId = {0} AND GroupId={1} AND agrofactuur.LABELS.LabKind=28 AND agrofactuur.LABELS.LabCountry = {2} ", FarmId, Groupid, pLabCountry);
            System.Data.DataTable dtGroups = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (dtGroups.Rows.Count > 0)
            {
                mDatabase.FillObject(lgroups, dtGroups.Rows[0]);
                mDatabase.FillObject(pLabels, dtGroups.Rows[0]);
            }
            return lgroups;
        }
        public GROUPS GetGroups(int FarmId, int Groupid)
        {
            GROUPS lgroups = new GROUPS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GROUPS ");
            lQuery.AppendFormat(" WHERE FarmId = {0} AND GroupId={1} ", FarmId, Groupid);
            System.Data.DataTable dtGroups = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (dtGroups.Rows.Count > 0)
            {
                mDatabase.FillObject(lgroups, dtGroups.Rows[0]);
            }
            return lgroups;
        }
        public List<GROUPS> GetGroupsList(int pFarmId)
        {
            List<GROUPS> lResultValue = new List<GROUPS>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GROUPS");
            lQuery.AppendFormat(" WHERE FarmId = {0} ORDER BY GroupId DESC ", pFarmId);

            System.Data.DataTable dtGroups = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwGroups in dtGroups.Rows)
            {
                GROUPS lbls = new GROUPS();
                if (mDatabase.FillObject(lbls, drwGroups))
                {
                    lResultValue.Add(lbls);
                }
            }

            return lResultValue;
        }
        public UBN GetubnById(int pUBNId)
        {
            UBN lubn = new UBN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM UBN");
            lQuery.AppendFormat(" WHERE UBNId = {0}", pUBNId);
            mDatabase.FillObject(mToken, lubn, lQuery);
            return lubn;
        }
        [Obsolete("gebruik :  List<THIRD> GetThirdsByHouseNrAndZipCode ")]
        public THIRD GetThirdByHouseNrAndZipCode(string pHouseNr, string pZipCode)
        {
            pHouseNr = pHouseNr.ToUpper().Replace(" ", "");
            pZipCode = pZipCode.ToUpper().Replace(" ", "");
            THIRD lThird = new THIRD();
            if (pHouseNr.Length > 0 && pZipCode.Length > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM THIRD");
                lQuery.AppendFormat(" WHERE ThrExt= '{0}' ", pHouseNr);
                // luc 6-7-16 nav AA-1 replace functie weghalen
                lQuery.AppendFormat(" AND ThrZipcode = '{0}' AND ThrId>0 ", pZipCode);
                //lQuery.AppendFormat(" AND replace(ThrZipcode,\" \",\"\") = '{0}' AND ThrId>0 ", pZipCode);
                mDatabase.FillObject(mToken, lThird, lQuery);
                if (lThird.ThrCountry.Trim() == "")
                {
                    lThird.ThrCountry = "151";
                }
            }
            return lThird;
        }

        public THIRD GetThirdByVatNo(String vatNumber)
        {
            THIRD lThird = new THIRD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE ThrVATNumber= '{0}' ", vatNumber);
            mDatabase.FillObject(mToken, lThird, lQuery);

            return lThird;
        }
        public List<THIRD> GetThirdsByHouseNrAndZipCode(string pHouseNr, string pZipCode)
        {
            pHouseNr = pHouseNr.ToUpper().Replace(" ", "");
            pZipCode = pZipCode.ToUpper().Replace(" ", "");
            List<THIRD> lThirds = new List<THIRD>();
            if (pHouseNr.Length > 0 && pZipCode.Length > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM THIRD");
                lQuery.AppendFormat(" WHERE ThrExt= '{0}' ", pHouseNr);

                // luc 6-7-16 nav AA-1 replace functie weghalen
                lQuery.AppendFormat(" AND ThrZipcode = '{0}' AND ThrId>0 ", pZipCode);
                System.Data.DataTable dtThirds = mDatabase.QueryData(mToken, lQuery);
                foreach (DataRow drwThr in dtThirds.Rows)
                {
                    THIRD lThird = new THIRD();
                    if (mDatabase.FillObject(lThird, drwThr))
                    {
                        if (lThird.ThrCountry.Trim() == "")
                        {
                            lThird.ThrCountry = "151";
                        }
                        lThirds.Add(lThird);
                    }
                }

            }
            return lThirds;
        }

        public THIRD GetThirdByAddressZIPCity(String address, String zip, String city)
        {
            THIRD lThird = new THIRD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE ThrStreet1  = '{0}'  AND ThrId>0  ", address.Replace("'","''"));
            lQuery.AppendFormat(" AND ThrZipCode = '{0}' ", zip);
            lQuery.AppendFormat(" AND ThrCity = '{0}' ", city.Replace("'", "''"));
            mDatabase.FillObject(mToken, lThird, lQuery);

            return lThird;
        }

        public THIRD GetThirdByKvKnr(string pThrKvKNummer)
        {
            THIRD lThird = new THIRD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE ThrKvKNummer  = '{0}'  AND ThrId>0  ", pThrKvKNummer);
            mDatabase.FillObject(mToken, lThird, lQuery);
            if (lThird.ThrCountry.Trim() == "")
            {
                lThird.ThrCountry = "151";
            }
            return lThird;
        }

        public THIRD GetThirdByStamboeknr(string pThrStamboeknr)
        {
            THIRD lThird = new THIRD();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD");
            lQuery.AppendFormat(" WHERE replace(ThrStamboeknr,\" \",\"\") = '{0}'  AND ThrId>0  ", pThrStamboeknr);
            mDatabase.FillObject(mToken, lThird, lQuery);
            if (lThird.ThrCountry.Trim() == "")
            {
                lThird.ThrCountry = "151";
            }
            return lThird;
        }

        public THIRD_NOTES GetThirdNotesByNo_ID(int pNo_ID)
        {
            THIRD_NOTES tn = new THIRD_NOTES();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM THIRD_NOTES");
            lQuery.AppendFormat(" WHERE No_ID={0}", pNo_ID);
            mDatabase.FillObject(mToken, tn, lQuery);
            return tn;
        }


        public int GetThirdIdByDescriptionIdAndRegistrationNr(int descriptionId, string registrationNr)
        {
            THIRDKIN tk = new THIRDKIN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat("SELECT ThrId FROM THIRDKIN WHERE ThkDescriptionId = {0} AND ThrRegistrationNr = '{1}'", descriptionId, registrationNr);
            bool hasresults = mDatabase.FillObject(mToken, tk, lQuery);
            return hasresults ? tk.ThrId : 0;
        }

        public THIRD GetThirdByUBN(string pThrFarmNumber)
        {
            THIRD lThird = new THIRD();
            if (pThrFarmNumber != String.Empty)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT THIRD.* FROM UBN");
                lQuery.Append(" JOIN THIRD");
                lQuery.Append(" ON UBN.ThrID = THIRD.ThrId");
                lQuery.AppendFormat(" WHERE Bedrijfsnummer = '{0}' ", pThrFarmNumber);
                mDatabase.FillObject(mToken, lThird, lQuery);
                if (lThird.ThrCountry.Trim() == "")
                {
                    lThird.ThrCountry = "151";
                }
            }
            return lThird;
        }
        [Obsolete("Omschrijven naar zelfde functie met integer svp")]
        public THIRD GetThirdByThirId(string pTHirdId)
        {
            THIRD lThird = new THIRD();
            if (!string.IsNullOrEmpty(pTHirdId))
            {
                int lThrIdID = 0;
                if (int.TryParse(pTHirdId, out lThrIdID))
                {
                    return GetThirdByThirId(lThrIdID);
                }

            }
            return lThird;
        }
        public THIRD GetThirdByThirId(int pTHirdId)
        {
            THIRD lThird = new THIRD();
            if (pTHirdId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM agrofactuur.THIRD");
                lQuery.AppendFormat(" WHERE ThrId = {0}", pTHirdId);
                mDatabase.FillObject(mToken, lThird, lQuery);
                lThird.ThrCountry = lThird.ThrCountry.Trim();
                if (lThird.ThrCountry == "")
                {
                    lThird.ThrCountry = "151";
                }
            }
            return lThird;
        }
        public List<THIRD> GetThirdsByAdMinProgramId(int pProgramId)
        {
            List<THIRD> lResultValue = new List<THIRD>();
            if (pProgramId > 0)
            {
                StringBuilder lQuery = new StringBuilder();

                lQuery.Append(" SELECT THIRD.*  ");
                lQuery.Append(" FROM THIRD  ");
                lQuery.Append(" RIGHT JOIN ADMINISTRATIE ON ADMINISTRATIE.ThrID =THIRD.ThrId  ");
                lQuery.AppendFormat(" WHERE ADMINISTRATIE.ProgramID={0} ", pProgramId);

                lQuery.Append(" UNION ");

                lQuery.Append(" SELECT THIRD.*  ");
                lQuery.Append(" FROM THIRD  ");
                lQuery.Append(" RIGHT JOIN UBN ON UBN.ThrID=THIRD.ThrId  ");
                lQuery.Append(" LEFT JOIN BEDRIJF ON BEDRIJF.UBNid = UBN.UBNid  ");
                lQuery.AppendFormat(" WHERE BEDRIJF.Programid={0} ", pProgramId);
                lQuery.Append(" GROUP BY THIRD.ThrId ");

                DataTable dtderden = mDatabase.QueryData(mToken, lQuery);
                THIRD sderde;
                foreach (DataRow drderde in dtderden.Rows)
                {
                    sderde = new THIRD();
                    if (mDatabase.FillObject(sderde, drderde))
                    {
                        if (sderde.ThrCountry.Trim() == "")
                        {
                            sderde.ThrCountry = "151";
                        }
                        lResultValue.Add(sderde);
                    }
                }

            }
            return lResultValue;
        }
        public List<THIRD> searchTHIRDS(string pNaamThird)
        {
            if (pNaamThird.Contains("'"))
            {
                pNaamThird = pNaamThird.Replace("'", " ");
            }
            List<THIRD> lResultValue = new List<THIRD>();
            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            string CommandText = "SELECT * FROM agrofactuur.THIRD WHERE ThrSecondName like '%" + pNaamThird + "%' OR ThrCompanyName like '%" + pNaamThird + "%'";
            //unLogger.WriteDebug("searchTHIRDS :" + cmd.CommandText);
            //DataTable dtderden = mDatabase.QueryData(mToken, cmd);
            DataTable dtderden = QueryData(CommandText);
            THIRD sderde;
            foreach (DataRow drderde in dtderden.Rows)
            {
                sderde = new THIRD();
                if (mDatabase.FillObject(sderde, drderde))
                {
                    if (sderde.ThrCountry.Trim() == "")
                    {
                        sderde.ThrCountry = "151";
                    }
                    lResultValue.Add(sderde);
                }
            }
            return lResultValue;
        }
        public List<THIRD> searchThirdsByCompanyAndCity(string pCompany, string pCity)
        {
            if (pCompany.Contains("'"))
            {
                pCompany = pCompany.Replace("'", " ");
            }
            if (pCity.Contains("'"))
            {
                pCity = pCity.Replace("'", " ");
            }
            List<THIRD> lResultValue = new List<THIRD>();
            //unLogger.WriteDebug("searchTHIRDS :" + cmd.CommandText);
            DataTable dtderden = QueryData("SELECT * FROM THIRD WHERE ThrCompanyName like '%" + pCompany + "%' AND ThrCity like '%" + pCity + "%'");
            THIRD sderde;
            foreach (DataRow drderde in dtderden.Rows)
            {
                sderde = new THIRD();
                if (mDatabase.FillObject(sderde, drderde))
                {
                    if (sderde.ThrCountry.Trim() == "")
                    {
                        sderde.ThrCountry = "151";
                    }
                    lResultValue.Add(sderde);
                }
            }
            return lResultValue;
        }
        public THIRDTHIRD GetThirdThirdByThrId1AndProgramId(int pThrId1, int pProgramId)
        {
            THIRDTHIRD ThirdThird = new THIRDTHIRD();
            if (pThrId1 > 0 && pProgramId != 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM agrolink.THIRDTHIRD WHERE TtThrId1=" + pThrId1 + " AND TtProgramId=" + pProgramId.ToString());
                mDatabase.FillObject(mToken, ThirdThird, lQuery);
            }
            return ThirdThird;
        }
        public THIRDTHIRD GetThirdThirdByTtId(int pTtId)
        {
            THIRDTHIRD ThirdThird = new THIRDTHIRD();
            if (pTtId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM agrolink.THIRDTHIRD WHERE TtId=" + pTtId);
                mDatabase.FillObject(mToken, ThirdThird, lQuery);
            }
            return ThirdThird;
        }
        public EVENT GetEventdByEventId(int EventId)
        {
            EVENT lEvent = new EVENT();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM EVENT");
            lQuery.AppendFormat(" WHERE EventId = {0}", EventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lEvent, lQuery);
            return lEvent;
        }
        public GRZTOGTH GetGRZTOGTHByEventId(int pEventId)
        {
            GRZTOGTH lGrztgth = new GRZTOGTH();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GRZTOGTH");
            lQuery.AppendFormat(" WHERE EventId = {0}", pEventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lGrztgth, lQuery);
            return lGrztgth;
        }
        public List<GRZTOGTH> GetGRZTOGTHByAniIdFather(int pAniIdFather)
        {
            List<GRZTOGTH> lResultValue = new List<GRZTOGTH>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM GRZTOGTH");
            lQuery.AppendFormat(" WHERE AniIdFather = {0}", pAniIdFather);
            DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwthr in ltbl.Rows)
            {
                GRZTOGTH lTransprt = new GRZTOGTH();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultValue.Add(lTransprt);
                }
            }

            return lResultValue;
        }
        public LIFENR GetLifenrByLifenr(int pFarmId, string Lifenr)
        {
            BEDRIJF bDeze = GetBedrijfById(pFarmId);
            UBN uDeze = GetubnById(bDeze.UBNid);
            THIRD tDeze = GetThirdByThirId(uDeze.ThrID);
            LIFENR lLifenr = new LIFENR();

            if (bDeze.ProgId == 3 || bDeze.ProgId == 5)
            {

                StringBuilder lQuery = new StringBuilder();
                lQuery.Append("SELECT * FROM agrobase_sheep.LIFENR ");
                lQuery.AppendFormat(" WHERE LifLifenr = '{0}'", Lifenr);
                mDatabase.FillObject(mToken, lLifenr, lQuery);
                if (lLifenr.LifLifenr == "" || lLifenr.LifCountrycode == "")
                {
                    try
                    {
                        StringBuilder lQuery2 = new StringBuilder();
                        lQuery2.Append("SELECT * FROM agrobase_goat.LIFENR ");
                        lQuery2.AppendFormat(" WHERE LifLifenr = '{0}'", Lifenr);
                        mDatabase.FillObject(mToken, lLifenr, lQuery2);
                    }
                    catch (Exception exc)
                    {
                        unLogger.WriteInfo($@"Bedrijf:{bDeze.Omschrijving} query op agrobase_goat.LIFENR");
                    }

                }
                return lLifenr;
            }
            else
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM LIFENR");
                lQuery.AppendFormat(" WHERE LifLifenr = '{0}'", Lifenr);
                mDatabase.FillObject(mToken.getLastChildConnection(), lLifenr, lQuery);
                return lLifenr;
            }

        }
        public LIFENR GetLifenrByLifenrOwnerThrID(int pOwner_ThrID, string Lifenr)
        {

            LIFENR lLifenr = new LIFENR();


            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM LIFENR");
            lQuery.AppendFormat(" WHERE LifLifenr = '{0}' AND owner_ThrID={1} ", Lifenr, pOwner_ThrID);
            mDatabase.FillObject(mToken.getLastChildConnection(), lLifenr, lQuery);
            return lLifenr;


        }
        public List<LIFENR> GetLifenummersBy_owner_ThrID(int pOwner_ThrID)
        {
            List<LIFENR> lLifenrs = new List<LIFENR>();
            if (pOwner_ThrID > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT LIFENR.*  ");
                lQuery.Append(" FROM LIFENR  ");
                lQuery.AppendFormat(" WHERE LIFENR.owner_ThrID={0} ORDER BY LifCountrycode,SUBSTRING(LifLifenr FROM 8 ) ", pOwner_ThrID);
                DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                foreach (DataRow drwthr in ltbl.Rows)
                {
                    LIFENR lTransprt = new LIFENR();

                    if (mDatabase.FillObject(lTransprt, drwthr))
                    {
                        var check = from n in lLifenrs
                                    where n.LifLifenr == lTransprt.LifLifenr
                                    select n;
                        if (check.Count() == 0)
                        {
                            lLifenrs.Add(lTransprt);
                        }
                    }
                }

            }
            return lLifenrs;
        }
        public List<LIFENR> GetLifenummersByFarmId(int pFarmId)
        {
            BEDRIJF bDeze = GetBedrijfById(pFarmId);
            UBN uDeze = GetubnById(bDeze.UBNid);
            THIRD tDeze = GetThirdByThirId(uDeze.ThrID);



            List<LIFENR> lLifenrs = new List<LIFENR>();
            if (bDeze.ProgId == 3 || bDeze.ProgId == 5)
            {
                List<UBN> ubns = getUBNsByThirdID(uDeze.ThrID);

                List<string> Querys = new List<string>();
                foreach (UBN lUbn in ubns)
                {
                    List<BEDRIJF> bedrijven = getBedrijvenByUBNId(lUbn.UBNid);

                    foreach (BEDRIJF lBedr in bedrijven)
                    {
                        if (lBedr.ProgId == 3 || lBedr.ProgId == 5)
                        {
                            string lAndNot = " AND NOT l.LifLifenr IN " +
                                            " (  " +
                                            " SELECT l.LifLifenr FROM agrobase_sheep.LIFENR l " +
                                            " JOIN agrobase_sheep.ANIMAL a ON ( " +
                                            " a.AniAlternateNumber= concat(l.LifCountrycode,' ',l.LifLifenr) " +
                                            "  OR " +
                                            " a.AniAlternateNumber= concat(l.LifCountrycode,' ',SUBSTRING(l.LifLifenr,2)) " +
                                            " ) " +
                                            " WHERE l.FarmNumber='" + lUbn.Bedrijfsnummer + "' AND a.AniId>0 " +
                                            " ) ";

                            if (lBedr.ProgId == 3)
                            {

                                Querys.Add(" SELECT l.* FROM agrobase_sheep.LIFENR l WHERE l.FarmNumber = '" + lUbn.Bedrijfsnummer + "'   AND NOT l.LifLifenr IN " +
                                            " (  " +
                                            " SELECT l.LifLifenr FROM agrobase_sheep.LIFENR l " +
                                            " JOIN agrobase_sheep.ANIMAL a ON ( " +
                                            " a.AniAlternateNumber= concat(l.LifCountrycode,' ',l.LifLifenr) " +
                                            "  OR " +
                                            " a.AniAlternateNumber= concat(l.LifCountrycode,' ',SUBSTRING(l.LifLifenr,2)) " +
                                            " ) " +
                                            " WHERE l.FarmNumber='" + lUbn.Bedrijfsnummer + "' AND a.AniId>0 " +
                                            " ) ");
                            }
                            else if (lBedr.ProgId == 5)
                            {

                                Querys.Add(" SELECT l.* FROM agrobase_goat.LIFENR l WHERE l.FarmNumber = '" + lUbn.Bedrijfsnummer + "'   AND NOT l.LifLifenr IN " +
                                            " (  " +
                                            " SELECT l.LifLifenr FROM agrobase_goat.LIFENR l " +
                                            " JOIN agrobase_goat.ANIMAL a ON ( " +
                                            " a.AniAlternateNumber= concat(l.LifCountrycode,' ',l.LifLifenr) " +
                                            "  OR " +
                                            " a.AniAlternateNumber= concat(l.LifCountrycode,' ',SUBSTRING(l.LifLifenr,2)) " +
                                            " ) " +
                                            " WHERE l.FarmNumber='" + lUbn.Bedrijfsnummer + "' AND a.AniId>0 " +
                                            " ) ");
                            }



                        }
                    }

                }
                if (Querys.Count() > 0)
                {

                    StringBuilder lQuery = new StringBuilder();

                    if (Querys.Count() > 1)
                    {
                        int teller = 1;
                        foreach (string q in Querys)
                        {
                            if (teller < Querys.Count())
                            {
                                lQuery.Append(q + " UNION ");
                            }
                            else { lQuery.Append(q); }
                            teller += 1;
                        }
                    }
                    else { lQuery.Append(Querys[0]); }

                    if (tDeze.ThrCountry.Trim() == "" || tDeze.ThrCountry == "0" || tDeze.ThrCountry == "151")
                    {
                        lQuery.Append("  ORDER BY LifCountrycode,SUBSTRING(LifLifenr FROM 8 )");
                    }
                    else
                    {
                        lQuery.Append(" ORDER BY LifCountrycode,SUBSTRING(LifLifenr FROM 4 )");
                    }

                    DataTable ltbl = new DataTable();
                    if (bDeze.ProgId == 3 || bDeze.ProgId == 5)
                    {
                        //unLogger.WriteInfo(lQuery.ToString());
                        ltbl = mDatabase.QueryData(mToken, lQuery);
                    }
                    foreach (DataRow drwthr in ltbl.Rows)
                    {
                        LIFENR lTransprt = new LIFENR();

                        if (mDatabase.FillObject(lTransprt, drwthr))
                        {
                            var check = from n in lLifenrs
                                        where n.LifLifenr == lTransprt.LifLifenr
                                        select n;
                            if (check.Count() == 0)
                            {
                                lLifenrs.Add(lTransprt);
                            }
                        }
                    }
                }
            }
            else
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append("SELECT * FROM LIFENR ");
                if (tDeze.ThrCountry.Trim() == "" || tDeze.ThrCountry == "0" || tDeze.ThrCountry == "151")
                {
                    lQuery.AppendFormat(" WHERE FarmNumber LIKE '{0}'  ORDER BY LifCountrycode,SUBSTRING(LifLifenr FROM 8 )", uDeze.Bedrijfsnummer);
                }
                else
                {
                    lQuery.AppendFormat(" WHERE FarmNumber LIKE '{0}'  ORDER BY LifCountrycode,SUBSTRING(LifLifenr FROM 4 )", uDeze.Bedrijfsnummer);
                }
                DataTable ltbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                foreach (DataRow drwthr in ltbl.Rows)
                {
                    LIFENR lTransprt = new LIFENR();
                    if (mDatabase.FillObject(lTransprt, drwthr))
                    {
                        lLifenrs.Add(lTransprt);
                    }
                }
            }
            return lLifenrs;
        }
        [Obsolete("gebruik :  getMedicijnArtikel ")]
        public MEDICINE GetMedicineByMedId(int MedId)
        {
            MEDICINE lMed = new MEDICINE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDICINE");
            lQuery.AppendFormat(" WHERE MedId = {0}", MedId);
            mDatabase.FillObject(mToken, lMed, lQuery);
            return lMed;
        }
        [Obsolete("gebruik :  ARTIKEL ARTIKELMEDIC ")]
        public MEDICINE getMedicineByMedCode(string MedCode)
        {
            MEDICINE lMed = new MEDICINE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDICINE");
            lQuery.AppendFormat(" WHERE MedCode like '%{0}%' AND  MEDICINE.MedId>0 ", MedCode);
            mDatabase.FillObject(mToken, lMed, lQuery);
            return lMed;
        }
        [Obsolete("gebruik :  ARTIKEL ARTIKELMEDIC ")]
        public MEDICINE getMedicineByMedName(string pMedName)
        {
            MEDICINE lMed = new MEDICINE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDICINE");
            lQuery.AppendFormat(" WHERE MedName like '%{0}%'  AND  MEDICINE.MedId>0  ", pMedName);
            mDatabase.FillObject(mToken, lMed, lQuery);
            return lMed;
        }
        [Obsolete("gebruik :  ARTIKEL ARTIKELMEDIC ")]
        public List<MEDICINE> GetAllMedicines()
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM MEDICINE  WHERE  MEDICINE.MedId>0 ");
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<MEDICINE> lResultList = new List<MEDICINE>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                MEDICINE lTransprt = new MEDICINE();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        [Obsolete("gebruik :  ARTIKEL ARTIKELMEDIC ")]
        public List<MEDICINE> GetMedicinesByMedIds(List<int> pMedIds)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM MEDICINE WHERE MedId IN (" + intListToString(pMedIds) + ") ");
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<MEDICINE> lResultList = new List<MEDICINE>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                MEDICINE lTransprt = new MEDICINE();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        [Obsolete("gebruik :  ARTIKEL ARTIKELMEDIC ")]
        public List<MEDICINE> GetMedicinesByUbn(int pUBNId)
        {
            StringBuilder lsb = new StringBuilder($@"SELECT * FROM MEDICINE INNER JOIN MEDICINEUBN ON MEDICINE.MedId=MEDICINEUBN.MedId WHERE MEDICINEUBN.UbnId={pUBNId} AND  MEDICINE.MedId>0  ORDER BY MEDICINE.MedName");
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<MEDICINE> lResultList = new List<MEDICINE>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                MEDICINE lTransprt = new MEDICINE();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        [Obsolete("gebruik : ARTIKELUBN ")]
        public MEDICINEUBN GetMedicineUbn(int MedId, int UBNId)
        {
            MEDICINEUBN lmeddubbie = new MEDICINEUBN();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDICINEUBN");
            lQuery.AppendFormat(" WHERE MedId = {0} and UBNId = {1}", MedId, UBNId);
            mDatabase.FillObject(mToken, lmeddubbie, lQuery);
            return lmeddubbie;
        }

        [Obsolete("gebruik deze niet: medicijnen worden via ARTIKEL ingelezen")]
        public List<MEDICINEUBN> GetMedicineUbns(int pUbnId)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM MEDICINEUBN   WHERE UBNid = " + pUbnId.ToString());
            DataTable ltbl = mDatabase.QueryData(mToken, lsb);
            List<MEDICINEUBN> lResultList = new List<MEDICINEUBN>();
            foreach (DataRow drwthr in ltbl.Rows)
            {
                MEDICINEUBN lTransprt = new MEDICINEUBN();
                if (mDatabase.FillObject(lTransprt, drwthr))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }
        public MEDPLANM GetMedPlanM(int pInternalnr)
        {
            MEDPLANM lMedPlanM = new MEDPLANM();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLANM");
            lQuery.AppendFormat(" WHERE Internalnr = {0}", pInternalnr);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMedPlanM, lQuery);
            return lMedPlanM;
        }
        public MEDPLANM GetMedPlanM(int pFarmID, int pPlanNummer)
        {
            MEDPLANM lMedPlanM = new MEDPLANM();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLANM");
            lQuery.AppendFormat(" WHERE FarmID = {0} AND  PlanNummer = {1}  ", pFarmID, pPlanNummer);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMedPlanM, lQuery);
            return lMedPlanM;
        }
        public MEDPLANM GetMedPlanM(int pFarmID, int pPlanNummer, int pPlanSoort)
        {
            MEDPLANM lMedPlanM = new MEDPLANM();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLANM");
            lQuery.AppendFormat(" WHERE FarmID = {0} AND  PlanNummer = {1} AND  PlanSoort = {2} ", pFarmID, pPlanNummer, pPlanSoort);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMedPlanM, lQuery);
            return lMedPlanM;
        }
        public List<MEDPLANM> GetMedPlanMMen(int pFarmId)
        {
            List<MEDPLANM> lResultValue = new List<MEDPLANM>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLANM");
            lQuery.AppendFormat(" WHERE FarmId = {0} ", pFarmId);

            System.Data.DataTable dtMedplans = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drMedplanm in dtMedplans.Rows)
            {
                MEDPLANM mp = new MEDPLANM();
                if (mDatabase.FillObject(mp, drMedplanm))
                {
                    lResultValue.Add(mp);
                }
            }

            return lResultValue;

        }
        public List<MEDPLANM> GetMedPlanMMen(int pFarmId, bool pIndividueel)
        {
            List<MEDPLANM> lResultValue = new List<MEDPLANM>();
            List<int> extraplans = new List<int>();
            string Qkoortsplan1 = GetFarmConfigValue(pFarmId, "Qkoortsplan1", "");
            if (Qkoortsplan1 != "")
            {
                int intQkoortsplan1 = 0;
                int.TryParse(Qkoortsplan1, out intQkoortsplan1);
                if (intQkoortsplan1 > 0)
                {
                    extraplans.Add(intQkoortsplan1);
                }
            }
            string Qkoortsplan2 = GetFarmConfigValue(pFarmId, "Qkoortsplan2", "");
            if (Qkoortsplan2 != "")
            {
                int intQkoortsplan2 = 0;
                int.TryParse(Qkoortsplan2, out intQkoortsplan2);
                if (intQkoortsplan2 > 0)
                {
                    extraplans.Add(intQkoortsplan2);
                }
            }
            string QkoortsplanHerh = GetFarmConfigValue(pFarmId, "Qkoortsplanherh", "");
            if (QkoortsplanHerh != "")
            {
                int intQkoortsplanHerh = 0;
                int.TryParse(QkoortsplanHerh, out intQkoortsplanHerh);
                if (intQkoortsplanHerh > 0)
                {
                    extraplans.Add(intQkoortsplanHerh);
                }
            }
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLANM");
            lQuery.AppendFormat(" WHERE FarmId = {0} ", pFarmId);
            if (pIndividueel)
            {
                lQuery.Append(" AND PlanIndividueel= 1  ");
            }
            else
            {
                lQuery.Append("  AND ( PlanIndividueel is null OR  NOT (PlanIndividueel = 1)) ");
            }
            if (extraplans.Count() > 0)
            {
                lQuery.Append(" OR (Internalnr IN (" + intListToString(extraplans) + ")) ");
            }
            System.Data.DataTable dtMedplans = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drMedplanm in dtMedplans.Rows)
            {
                MEDPLANM mp = new MEDPLANM();
                if (mDatabase.FillObject(mp, drMedplanm))
                {
                    lResultValue.Add(mp);
                }
            }

            return lResultValue;

        }

        public MEDPLAND GetMedPlanD(int pInternalnr, int MedId)
        {
            MEDPLAND lMedPlanD = new MEDPLAND();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLAND");
            lQuery.AppendFormat(" WHERE Internalnr = {0} AND MedId = {1}", pInternalnr, MedId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMedPlanD, lQuery);
            return lMedPlanD;
        }
        public List<MEDPLAND> GetMedPlanDDen(string pInternalnr)
        {
            List<MEDPLAND> lResultValue = new List<MEDPLAND>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MEDPLAND");
            lQuery.AppendFormat(" WHERE internalnr = {0} ", pInternalnr);

            System.Data.DataTable dtMedplansD = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drMedplanD in dtMedplansD.Rows)
            {
                MEDPLAND mpd = new MEDPLAND();
                if (mDatabase.FillObject(mpd, drMedplanD))
                {
                    lResultValue.Add(mpd);
                }
            }

            return lResultValue;

        }
        public MOVEMENT GetMovementByDateAniIdKind(DateTime Date, int AniId, int MovKind, int UbnId)
        {

            /*  
             * getMovement
             * BEGIN
                 SELECT * FROM MOVEMENT 
                 WHERE MOVEMENT.AniId = AniId 
                 AND MOVEMENT.UBNId = UBNid 
                 AND MOVEMENT.MovDate = MovementDate 
                 AND MOVEMENT.MovKind = Kind;
                END
             */
            MOVEMENT lMovement = new MOVEMENT();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getMovement";
            //mDatabase.AddParameter(cmd, "AniId", AniId);
            //mDatabase.AddParameter(cmd, "UBNid", UbnId);
            //mDatabase.AddParameter(cmd, "MovementDate", Date);
            //mDatabase.AddParameter(cmd, "Kind", MovKind);
            //mDatabase.FillObject(mToken.getLastChildConnection(), lMovement, cmd);

            //return lMovement;
            StringBuilder lQuery = new StringBuilder(@" SELECT * FROM MOVEMENT ");//  WHERE MOVEMENT.AniId = " + AniId.ToString() + "  AND MOVEMENT.UBNId = " + UbnId.ToString() + " AND  date_format(MOVEMENT.MovDate,'%Y-%m-%d %T')= '" + Date.ToString("yyyy-MM-dd HH:mm:ss") + "' AND MOVEMENT.MovKind = " + MovKind.ToString());
            lQuery.AppendFormat(" WHERE MOVEMENT.AniId = {0} ", AniId);
            lQuery.AppendFormat(" AND MOVEMENT.UBNId  = {0} ", UbnId);
            lQuery.Append(" AND  date_format(MOVEMENT.MovDate,'%Y-%m-%d')='" + getDatabaseDateDateFormat(Date) + "' ");
            lQuery.AppendFormat(" AND MOVEMENT.MovKind =  {0} AND MOVEMENT.MovId>0 ", MovKind);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMovement, lQuery);
            //if (lMovement.MovId == 0)
            //{
            //    lMovement.UbnId = UbnId;
            //    lMovement.MovDate = Date;
            //    lMovement.AniId = AniId;
            //    lMovement.MovKind = MovKind;
            //}
            return lMovement;
        }
        public MOVEMENT GetMovementByMovId(int MovId)
        {
            MOVEMENT lMovement = new MOVEMENT();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MOVEMENT");
            lQuery.AppendFormat(" WHERE MovId = {0}", MovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMovement, lQuery);
            return lMovement;
        }
        public void getMovsAndBuyingsByGroep(int pFarmId, int pAanvoergroepnr, out List<MOVEMENT> pAanvoerMovs, out List<BUYING> pAanvoerBuys)
        {
            pAanvoerBuys = new List<BUYING>();
            pAanvoerMovs = new List<MOVEMENT>();
            StringBuilder sb = new StringBuilder();
            sb.Append(" SELECT m1.*,BUYING.* FROM MOVEMENT m1");
            sb.Append(" LEFT OUTER JOIN ANIMALCATEGORY ");
            sb.Append(" ON ANIMALCATEGORY.AniId = m1.AniId");
            sb.Append(" INNER JOIN ANIMAL ");
            sb.Append(" ON ANIMAL.aniid = ANIMALCATEGORY.AniId ");
            sb.Append(" LEFT OUTER JOIN BUYING ON BUYING.MovId=m1.MovId");
            sb.AppendFormat(" WHERE ANIMALCATEGORY.FarmId = {0}", pFarmId);
            sb.Append(" AND ANIMALCATEGORY.Anicategory < 5");
            sb.Append(" AND ANIMALCATEGORY.Anicategory > 0 ");
            sb.Append(" AND m1.MovKind=1");
            sb.Append(" AND m1.MovDate = (SELECT MAX(MovDate)");
            sb.Append("                     FROM MOVEMENT m2");
            sb.Append("                    WHERE m2.AniId = m1.AniId AND m2.MovKind=1)");
            if (pAanvoergroepnr > 0)
            {
                sb.AppendFormat(" AND m1.Groupnr={0} ", pAanvoergroepnr);
            }
            else
            {
                sb.Append(" AND ((m1.Groupnr NOT IN ");
                sb.Append(" (SELECT GROUPID FROM GROUPS WHERE FarmId = ANIMALCATEGORY.FarmId");
                sb.Append(" AND GROUPS.Groupkind  = 1 ORDER BY GroupId DESC)) ");
                sb.Append(" OR (m1.Groupnr IS NULL)) ");
            }
            sb.Append(" ORDER BY m1.AniId,m1.MovDate ");
            System.Data.DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb);

            foreach (DataRow drw in dt.Rows)
            {
                MOVEMENT mv = new MOVEMENT();
                if (mDatabase.FillObject(mv, drw))
                {
                    pAanvoerMovs.Add(mv);
                }
                BUYING bu = new BUYING();
                if (mDatabase.FillObject(bu, drw))
                {
                    pAanvoerBuys.Add(bu);
                }
            }

        }
        public MOVEOUT getMoveOut(int pMovId)
        {
            MOVEOUT lMoveout = new MOVEOUT();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MOVEOUT");
            lQuery.AppendFormat(" WHERE  MovId = {0}", pMovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMoveout, lQuery);
            return lMoveout;
        }
        public MUTATION GetMutationById(int InternalId)
        {
            MUTATION lMutation = new MUTATION();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MUTATION");
            lQuery.AppendFormat(" WHERE Internalnr = {0}", InternalId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMutation, lQuery);
            return lMutation;

        }
        public MUTATION GetMutationByEventId(int pEventId)
        {
            MUTATION lMutation = new MUTATION();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MUTATION");
            lQuery.AppendFormat(" WHERE EventId = {0}  AND Internalnr>0 ", pEventId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMutation, lQuery);
            return lMutation;
        }
        public MUTATION GetMutationByMovId(int pMovId)
        {
            MUTATION lMutation = new MUTATION();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MUTATION");
            lQuery.AppendFormat(" WHERE MovId = {0} AND Internalnr>0 ", pMovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lMutation, lQuery);
            return lMutation;
        }
        public List<MUTATION> GetMutationsByUbn(int pUbnId)
        {
            List<MUTATION> lResultValue = new List<MUTATION>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MUTATION ");
            lQuery.AppendFormat(" WHERE UbnId= {0}  AND Internalnr>0 ", pUbnId);

            System.Data.DataTable dtMedplans = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drMedplanm in dtMedplans.Rows)
            {
                MUTATION mp = new MUTATION();
                if (mDatabase.FillObject(mp, drMedplanm))
                {
                    lResultValue.Add(mp);
                }
            }

            return lResultValue;
        }
        public MUTALOG GetMutaLogById(int InternalId)
        {
            MUTALOG lMutalog = new MUTALOG();
            if (InternalId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTALOG ");
                lQuery.AppendFormat(" WHERE Internalnr = {0}", InternalId);
                mDatabase.FillObject(mToken.getLastChildConnection(), lMutalog, lQuery);
            }
            return lMutalog;

        }
        public MUTALOG GetMutaLogByLifeNumberMeldingNr(string pLifeNumber, string pMeldingNummer)
        {
            MUTALOG lMutalog = new MUTALOG();
            if (pLifeNumber != "" && pMeldingNummer != "")
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTALOG ");
                lQuery.AppendFormat(" WHERE Lifenumber = {0} AND MeldingNummer={1}  AND Internalnr>0 ", pLifeNumber, pMeldingNummer);
                mDatabase.FillObject(mToken.getLastChildConnection(), lMutalog, lQuery);
            }
            return lMutalog;
        }

        public MUTALOG GetMutaLogByEventId(int pEventId)
        {
            MUTALOG lMutalog = new MUTALOG();
            if (pEventId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTALOG ");
                lQuery.AppendFormat(" WHERE EventId = {0} AND Internalnr>0 ", pEventId);
                mDatabase.FillObject(mToken.getLastChildConnection(), lMutalog, lQuery);
            }
            return lMutalog;
        }
        public MUTALOG GetMutaLogByMovId(int pMovId)
        {
            MUTALOG lMutalog = new MUTALOG();
            if (pMovId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTALOG ");
                lQuery.AppendFormat(" WHERE MovId = {0} AND Internalnr>0 ", pMovId);
                mDatabase.FillObject(mToken.getLastChildConnection(), lMutalog, lQuery);
            }
            return lMutalog;
        }
        public List<MUTALOG> GetMutaLogsByUbn(int pUbnId)
        {
            List<MUTALOG> lResultValue = new List<MUTALOG>();
            if (pUbnId > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTALOG ");
                lQuery.AppendFormat(" WHERE UbnId= {0}  AND Internalnr>0  ", pUbnId);
                System.Data.DataTable dtMedplans = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow drMedplanm in dtMedplans.Rows)
                {
                    MUTALOG mp = new MUTALOG();
                    if (mDatabase.FillObject(mp, drMedplanm))
                    {
                        lResultValue.Add(mp);
                    }
                }
            }

            return lResultValue;
        }
        public List<MUTALOG> GetMutaLogsByLifeNumber(string pLifeNumber)
        {
            List<MUTALOG> lResultValue = new List<MUTALOG>();
            if (pLifeNumber != null && pLifeNumber.Length > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTALOG ");
                lQuery.AppendFormat(" WHERE Lifenumber= '{0}'  AND Internalnr>0  ", pLifeNumber);
                System.Data.DataTable dtMutaLogs = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow drMutaLog in dtMutaLogs.Rows)
                {
                    MUTALOG mtl = new MUTALOG();
                    if (mDatabase.FillObject(mtl, drMutaLog))
                    {
                        lResultValue.Add(mtl);
                    }
                }
            }

            return lResultValue;
        }
        public List<MUTATION> GetMutationsByLifeNumber(string pLifeNumber)
        {
            List<MUTATION> lResultValue = new List<MUTATION>();
            if (pLifeNumber != null && pLifeNumber.Length > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * FROM MUTATION ");
                lQuery.AppendFormat(" WHERE Lifenumber= '{0}'  AND Internalnr>0  ", pLifeNumber);
                System.Data.DataTable dtMutaLogs = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow drMutaLog in dtMutaLogs.Rows)
                {
                    MUTATION mtl = new MUTATION();
                    if (mDatabase.FillObject(mtl, drMutaLog))
                    {
                        lResultValue.Add(mtl);
                    }
                }
            }

            return lResultValue;
        }
        public DataTable getMutaVoeren(int pLeverancierThrID, DateTime pYear)
        {
            //List<MUTA_VOER> lResultValue = new List<MUTA_VOER>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT mv.*  ");
            //lQuery.Append(" (SELECT UBN.Bedrijfsnummer FROM UBN WHERE UBN.ThrID =mv.mv_Afnemer_ThrID LIMIT 1)AS Bedrijfsnummer, ");
            //lQuery.Append(" (SELECT THIRD.ThrCompanyName FROM THIRD WHERE THIRD.ThrID =mv.mv_Afnemer_ThrID LIMIT 1)AS ThrCompanyName ");
            lQuery.Append(" FROM MUTA_VOER mv ");
            lQuery.AppendFormat(" WHERE mv_ThrID= {0}  ", pLeverancierThrID);
            lQuery.AppendFormat(" AND date_format(mv_datum,'%Y')= {0}  ", pYear.Year);
            DataSet ds = new DataSet();
            System.Data.DataTable dtMedplans = mDatabase.QueryData(mToken, ds, lQuery, "Mutavoeren", MissingSchemaAction.Add);
            return dtMedplans;
            //foreach (DataRow drMedplanm in dtMedplans.Rows)
            //{
            //    MUTA_VOER mp = new MUTA_VOER();
            //    if (mDatabase.FillObject(mp, drMedplanm))
            //    {
            //        lResultValue.Add(mp);
            //    }
            //}

            //return lResultValue;

        }
        public bool updateMutaVoer(MUTA_VOER pMutaVoer)
        {
            try
            {
                StringBuilder qry = new StringBuilder("UPDATE MUTA_VOER ");
                qry.AppendFormat("SET Mv_Afnemer_Adres='{0}' , Mv_Afnemer_City='{1}' ", pMutaVoer.Mv_Afnemer_Adres, pMutaVoer.Mv_Afnemer_City);
                qry.AppendFormat(", Mv_Afnemer_Companyname='{0}' , Mv_Afnemer_Huisnr='{1}' ", pMutaVoer.Mv_Afnemer_Companyname, pMutaVoer.Mv_Afnemer_Huisnr);
                qry.AppendFormat(", Mv_Afnemer_KvK='{0}' , Mv_Afnemer_ZipCode='{1}' ", pMutaVoer.Mv_Afnemer_KvK, pMutaVoer.Mv_Afnemer_ZipCode);
                qry.AppendFormat(", Mv_Afnemer_BRS='{0}' ", pMutaVoer.Mv_Afnemer_BRS);
                qry.AppendFormat(" WHERE mv_ThrID = {0} AND mv_Afnemer_ThrID = {1} AND mv_Diersoort = {2} AND date_format(mv_datum,'%Y')= {3} ", pMutaVoer.Mv_ThrID, pMutaVoer.Mv_Afnemer_ThrID, pMutaVoer.Mv_Diersoort, pMutaVoer.Mv_datum.Year);

                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry.ToString();

                //bool ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                //return ret;
                return mDatabase.ExecuteNonQuery(mToken, qry.ToString()) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("updateMutaVoer", ex);
                return false;
            }
        }
        public bool insertMutaVoer(MUTA_VOER pMutaVoer)
        {
            try
            {
                if (WriteActions.SaveObject(pMutaVoer) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool deleteMutaVoer(MUTA_VOER pMutaVoer)
        {
            try
            {

                String qry = String.Format("DELETE FROM MUTA_VOER WHERE mv_ThrID = {0} AND mv_Afnemer_ThrID = {1} AND mv_Diersoort = {2} AND date_format(mv_datum,'%Y')= {3} ", pMutaVoer.Mv_ThrID, pMutaVoer.Mv_Afnemer_ThrID, pMutaVoer.Mv_Diersoort, pMutaVoer.Mv_datum.Year);

                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //bool ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                //return ret;
                return mDatabase.ExecuteNonQuery(mToken, qry) == 1;


            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<MUTA_VOER_LOG> getMutaVoerenLoggen(int pLeverancierThrID, DateTime pYear)
        {
            List<MUTA_VOER_LOG> lResultValue = new List<MUTA_VOER_LOG>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM MUTA_VOER_LOG ");
            lQuery.AppendFormat(" WHERE mv_ThrID= {0}  ", pLeverancierThrID);
            lQuery.AppendFormat(" AND date_format(mv_datum,'%Y')= {0}  ", pYear.Year);
            System.Data.DataTable dtMedplans = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drMedplanm in dtMedplans.Rows)
            {
                MUTA_VOER_LOG mp = new MUTA_VOER_LOG();
                if (mDatabase.FillObject(mp, drMedplanm))
                {
                    lResultValue.Add(mp);
                }
            }

            return lResultValue;

        }

        public bool insertMutaVoerLog(MUTA_VOER_LOG pMutaVoerLog)
        {
            try
            {

                if (WriteActions.SaveObject(pMutaVoerLog) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool deleteMutaVoerLog(MUTA_VOER_LOG pMutaVoerLog)
        {
            try
            {

                String qry = String.Format("DELETE FROM MUTA_VOER_LOG WHERE mv_ThrID = {0} AND mv_Afnemer_ThrID = {1} AND mv_Diersoort = {2} AND date_format(mv_datum,'%Y')= {3} ", pMutaVoerLog.Mv_ThrID, pMutaVoerLog.Mv_Afnemer_ThrID, pMutaVoerLog.Mv_Diersoort, pMutaVoerLog.Mv_datum.Year);

                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                bool ret = mDatabase.ExecuteNonQuery(mToken, qry) == 1;
                return ret;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }


        public List<int> getNlingCheckEventIds(int pUBNId, int pAniId, int pBirNumber)
        {
            StringBuilder sbNlingcheck = new StringBuilder();
            sbNlingcheck.Append("select EVENT.EventId from EVENT inner join BIRTH on EVENT.EventId = BIRTH.EventId where (EVENT.UbnId=" + pUBNId.ToString() + " OR EVENT.UbnId=0) AND EVENT.AniId=" + pAniId.ToString() + " AND EVENT.EveKind=5  AND EVENT.EventId>0  AND BIRTH.BirNumber=" + pBirNumber.ToString());
            DataTable ltblBirnr = mDatabase.QueryData(mToken.getLastChildConnection(), sbNlingcheck);
            List<int> lretList = new List<int>();
            if (ltblBirnr.Rows.Count > 0)
            {
                foreach (DataRow nLingrow in ltblBirnr.Rows)
                {
                    lretList.Add(int.Parse(nLingrow["EventId"].ToString()));
                }
            }
            return lretList;
        }

        public PLACE GetPlace(int MovId)
        {
            PLACE lplace = new PLACE();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PLACE");
            lQuery.AppendFormat(" WHERE Movid = {0}", MovId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lplace, lQuery);
            return lplace;
        }

        public REMARK getRemarkByEverything(string pFarmId, string pLabKind, string pLabId, string pRemId)
        {
            REMARK lRemark = new REMARK();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM REMARK");
            lQuery.AppendFormat(" WHERE FarmId = {0} and LabKind = {1} and LabId = {2} and RemId = {3}", pFarmId, pLabKind, pLabId, pRemId);
            mDatabase.FillObject(mToken.getLastChildConnection(), lRemark, lQuery);
            return lRemark;
        }
        public List<REMARK> getFarmRemarks(int pFarmid, int pLabkind, int pLabId)
        {
            List<REMARK> lResultValue = new List<REMARK>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM REMARK ");
            lQuery.AppendFormat(" WHERE FarmId = {0} and LabKind = {1} and LabId = {2}  ", pFarmid, pLabkind, pLabId);

            System.Data.DataTable dtRemarks = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwRemarks in dtRemarks.Rows)
            {
                REMARK rem = new REMARK();
                if (mDatabase.FillObject(rem, drwRemarks))
                {
                    lResultValue.Add(rem);
                }
            }

            return lResultValue;
        }
        public List<REMARK> getFarmRemarks(int pFarmid)
        {
            List<REMARK> lResultValue = new List<REMARK>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM REMARK ");
            lQuery.AppendFormat(" WHERE FarmId = {0}  ", pFarmid);

            System.Data.DataTable dtRemarks = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwRemarks in dtRemarks.Rows)
            {
                REMARK rem = new REMARK();
                if (mDatabase.FillObject(rem, drwRemarks))
                {
                    lResultValue.Add(rem);
                }
            }

            return lResultValue;
        }

        public List<REMARK> getFarmRemarksByUbnId(int ubnid)
        {
            List<REMARK> lResultValue = new List<REMARK>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM REMARK r ");
            lQuery.Append(" JOIN agrofactuur.BEDRIJF b ON b.FarmId=r.FarmId ");
            lQuery.AppendFormat(" WHERE b.UbnId = {0}  ", ubnid);

            System.Data.DataTable dtRemarks = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwRemarks in dtRemarks.Rows)
            {
                REMARK rem = new REMARK();
                if (mDatabase.FillObject(rem, drwRemarks))
                {
                    lResultValue.Add(rem);
                }
            }

            return lResultValue;
        }

        public SCORE getScore(int AniId, DateTime pScDate)
        {
            /*
             *  getScore
                BEGIN
	                SELECT * FROM SCORE
	                WHERE SCORE.AniId = pAniId
	                AND SCORE.ScDate=pScDate;
                END
             */
            SCORE pScore = new SCORE();

            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getScore";

            //mDatabase.AddParameter(cmd, "pAniId", AniId);
            //mDatabase.AddParameter(cmd, "pScDate", pScDate);

            //mDatabase.FillObject(mToken.getLastChildConnection(), pScore, cmd);
            //if (isFilledByDb(pScore) != true)
            //{

            //}

            //return pScore;
            StringBuilder lQuery = new StringBuilder(@" SELECT * FROM SCORE ");
            lQuery.AppendFormat(" WHERE SCORE.AniId = {0} ", AniId);
            lQuery.Append(" AND  date_format(SCORE.ScDate,'%Y-%m-%d %T')= '" + pScDate.Date.ToString("yyyy-MM-dd HH:mm:ss") + "' ");
            mDatabase.FillObject(mToken.getLastChildConnection(), pScore, lQuery);
            return pScore;
        }
        public EVENT GetEventByDateAniIdKind(DateTime Date, int AniId, int EveKind)
        {
            EVENT lEveRet = new EVENT();
            List<EVENT> lResultValue = getEventsByDateAniIdKind(Date, AniId, EveKind);
            if (lResultValue.Count() > 0)
            { lEveRet = lResultValue.ElementAt(0); }
            return lEveRet;
        }

        public EVENT GetEventByDateAniIdKindInteval(DateTime Date, int AniId, int EveKind, int Interval)
        {
            EVENT lEveRet = new EVENT();
            List<EVENT> lResultValue = GetEventsByDateAniIdKindInteval(Date, AniId, EveKind, Interval);
            if (lResultValue.Count() > 0)
            { lEveRet = lResultValue.ElementAt(0); }
            return lEveRet;
        }

        public List<EVENT> GetAllEventsForAniIds(IEnumerable<int> AniIds)
        {
            if (!AniIds.Any())
                return new List<EVENT>();

            string sql =
               $@"SELECT e.*
                
                FROM EVENT e
                WHERE e.EventId > 0
                AND e.AniId IN ({string.Join(", ", AniIds)})";
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(sql));
            return getList<EVENT>(tbl);
        }

        public Dictionary<int, DataObject> GetAllEventDetailssForAniIds(List<EventEvekind> eventIdsAndEveKinds, bool debugEventCache = false)
        {
            var retDict = new Dictionary<int, DataObject>(eventIdsAndEveKinds.Count());

            var invalidEvekindCount = eventIdsAndEveKinds.Count(x => x.EveKind <= 0 || x.EveKind >= 14);
            if (invalidEvekindCount > 0)
            {
                unLogger.WriteDebug($"DBMasterQueries - GetAllEventDetailssForAniIds - Filtering {invalidEvekindCount} Invalid EveKinds (  =< 0 or >= 14)");
                eventIdsAndEveKinds.RemoveAll(x => x.EveKind <= 0 || x.EveKind >= 14);
            }

            string qry;
            DataTable tbl;
            IEnumerable<int> evIds;

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.TOCHTIG).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM INHEAT WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<INHEAT>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.INSEMINEREN).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM INSEMIN WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<INSEMIN>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.DRACHTIGHEID).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM GESTATIO WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<GESTATIO>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.DROOGZETTEN).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM DRYOFF WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<DRYOFF>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.AFKALVEN).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM BIRTH WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<BIRTH>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.ZIEKTE).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM DISEASE WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<DISEASE>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.SPOELEN_EMBRYO).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM TAKEEMBR WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<TAKEEMBR>(tbl))
                    retDict.Add(i.EventId, i);
            };


            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.INPLANTEREN).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM TRANSPLA WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<TRANSPLA>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.SPENEN).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM WEAN WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<WEAN>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.BLOEDONDERZOEK).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM BLOOD WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<BLOOD>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.SAMENWEIDEN).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM GRZTOGTH WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<GRZTOGTH>(tbl))
                    retDict.Add(i.EventId, i);
            };

            evIds = eventIdsAndEveKinds.Where(x => x.EveKind == (int)LABELSConst.EventKind.STATUS).Select(x => x.EventId);
            if (evIds.Any())
            {
                qry = $"SELECT * FROM STATUS WHERE EventId IN ({string.Join(", ", evIds)})";
                tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(qry));
                foreach (var i in getList<STATUS>(tbl))
                    retDict.Add(i.EventId, i);
            };

            if (debugEventCache)
            {
                foreach (var x in retDict)
                {
                    if (!eventIdsAndEveKinds.Any(eek => eek.EventId == x.Key))
                        unLogger.WriteDebug($"DBMasterQueries - GetAllEventDetailssForAniIds - EventId: {x.Key} in return list, not in input.");
                }
                foreach (var x in eventIdsAndEveKinds)
                {
                    if (!retDict.ContainsKey(x.EventId))
                        unLogger.WriteDebug($"DBMasterQueries - GetAllEventDetailssForAniIds - EventId: {x.EventId} not in return list. (EveKind: {x.EveKind})");
                }
                unLogger.WriteDebug($"DBMasterQueries - GetAllEventDetailssForAniIds: Events IN: {eventIdsAndEveKinds.Count()} OUT: {retDict.Count}");
                unLogger.WriteDebug($"DBMasterQueries - GetAllEventDetailssForAniIds: Debug Cache done.");
            }

            return retDict;
        }

        public List<EVENT> GetEventsByDateAniIdKindInteval(DateTime Date, int AniId, int EveKind, int Interval)
        {

            List<EVENT> lResultValue = new List<EVENT>();
            StringBuilder lQuery = new StringBuilder(@" SELECT * FROM EVENT ");
            lQuery.AppendFormat(" WHERE EVENT.AniId = {0} ", AniId);
            lQuery.AppendFormat(" AND EVENT.EveKind = {0} AND EVENT.EventId>0 ", EveKind);
            lQuery.AppendFormat(" AND EVENT.EveDate <  DATE_ADD('{0}',INTERVAL {1} DAY)", Date.ToString("yyyy-MM-dd"), Interval);
            lQuery.AppendFormat(" AND EVENT.EveDate >  DATE_SUB('{0}',INTERVAL {1} DAY)", Date.ToString("yyyy-MM-dd"), Interval);
            System.Data.DataTable dtEvents = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwEvent in dtEvents.Rows)
            {
                EVENT lEvent = new EVENT();
                if (mDatabase.FillObject(lEvent, drwEvent))
                {
                    lResultValue.Add(lEvent);
                }
            }
            return lResultValue;

        }


        public BEDRPROD getBedrProd(int UbnId, DateTime DatumProduktie)
        {
            BEDRPROD BedrProd = new BEDRPROD();

            /*
             * getBedrProd
                BEGIN
	                SELECT * FROM BEDRPROD
	                WHERE BEDRPROD.UbnId = pUbnId
	                AND BEDRPROD.ProductionDate=pProductionDate;
                END
             */
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getBedrProd";

            //mDatabase.AddParameter(cmd, "pUbnId", UbnId);
            //mDatabase.AddParameter(cmd, "pProductionDate", DatumProduktie);

            //mDatabase.FillObject(mToken.getLastChildConnection(), BedrProd, cmd);
            //if (isFilledByDb(BedrProd) != true)
            //{

            //}

            //return BedrProd;


            StringBuilder lQuery = new StringBuilder(@" SELECT * FROM BEDRPROD ");
            lQuery.AppendFormat(" WHERE BEDRPROD.UbnId = {0} ", UbnId);
            lQuery.Append(" AND  date_format(BEDRPROD.ProductionDate,'%Y-%m-%d %T')= '" + DatumProduktie.Date.ToString("yyyy-MM-dd HH:mm:ss") + "' ");
            mDatabase.FillObject(mToken.getLastChildConnection(), BedrProd, lQuery);
            return BedrProd;
        }
        public List<WEIGHT> getWeights(int pAniId)
        {
            List<WEIGHT> lResultValue = new List<WEIGHT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM WEIGHT ");
            lQuery.AppendFormat(" WHERE WEIGHT.AniId = {0} ", pAniId);
            System.Data.DataTable dtWeights = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwWeights in dtWeights.Rows)
            {
                WEIGHT rem = new WEIGHT();
                if (mDatabase.FillObject(rem, drwWeights))
                {
                    lResultValue.Add(rem);
                }
            }

            return lResultValue;
        }
        public List<WEIGHT> getWeights(List<int> pAniIds)
        {
            List<WEIGHT> lResultValue = new List<WEIGHT>();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM WEIGHT ");
            lQuery.AppendFormat(" WHERE WEIGHT.AniId IN ({0}) ", intListToString(pAniIds));
            System.Data.DataTable dtWeights = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drwWeights in dtWeights.Rows)
            {
                WEIGHT rem = new WEIGHT();
                if (mDatabase.FillObject(rem, drwWeights))
                {
                    lResultValue.Add(rem);
                }
            }

            return lResultValue;
        }
        public WEIGHT getWeight(int AniId, DateTime Datum)
        {
            WEIGHT pWeight = new WEIGHT();
            /*
                BEGIN
	                SELECT * FROM WEIGHT
	                WHERE WEIGHT.AniId = pAniId
	                AND WEIGHT.WeightDate=pWeightDate;
                END
             */
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "getWeight";

            //mDatabase.AddParameter(cmd, "pAniId", AniId);
            //mDatabase.AddParameter(cmd, "pWeightDate", Datum);

            //mDatabase.FillObject(mToken.getLastChildConnection(), pWeight, cmd);
            //if (isFilledByDb(pWeight) != true)
            //{

            //}

            //return pWeight;

            StringBuilder lQuery = new StringBuilder(@" SELECT * FROM WEIGHT ");
            lQuery.AppendFormat(" WHERE WEIGHT.AniId = {0} ", AniId);
            lQuery.Append(" AND  date_format(WEIGHT.WeightDate,'%Y-%m-%d %T')= '" + Datum.Date.ToString("yyyy-MM-dd HH:mm:ss") + "' ");
            mDatabase.FillObject(mToken.getLastChildConnection(), pWeight, lQuery);
            return pWeight;
        }

        public double getGemiddeldGewicht(int pProgramId)
        { return 0; }

        public DataTable getFarmWeights(int pFarmId, int pProgramId)
        {
            if (pProgramId > 0)
            {
                StringBuilder lQuery = new StringBuilder();

                if (pFarmId > 0)
                {
                    lQuery.Append(" SELECT DATEDIFF( WEIGHT.WeightDate, ANIMAL.AniBirthDate ) AS Aantal_Dagen, AVG( ");
                    lQuery.Append(" WEIGHT.WeightKg ) AS GEMIDDELD_GEWICHT, COUNT(WEIGHT.AniId) AS AANTAL FROM  WEIGHT ");


                    lQuery.Append(" INNER JOIN ANIMALCATEGORY ");
                    lQuery.Append(" ON ANIMALCATEGORY.AniId = WEIGHT.AniId ");
                    lQuery.Append(" INNER JOIN agrofactuur.BEDRIJF ");
                    lQuery.Append(" ON agrofactuur.BEDRIJF.farmid = ANIMALCATEGORY.farmid ");


                    lQuery.Append(" INNER JOIN ANIMAL ");
                    lQuery.Append(" ON ANIMAL.aniid = WEIGHT.AniId ");
                    lQuery.AppendFormat(" WHERE agrofactuur.BEDRIJF.farmid = {0} ", pFarmId);
                    lQuery.AppendFormat(" AND agrofactuur.BEDRIJF.programid = {0} ", pProgramId);
                    lQuery.Append(" AND (ANIMALCATEGORY.Anicategory BETWEEN 0 AND 3) ");
                    lQuery.Append(" GROUP BY Aantal_Dagen ");
                    lQuery.Append(" HAVING AANTAL >= 2 AND aantal_dagen >= 0 ");
                }
                else
                {
                    lQuery.Append(" SELECT DATEDIFF( WEIGHT.WeightDate, ANIMAL.AniBirthDate ) AS Aantal_Dagen, ");
                    lQuery.Append(" Round( AVG( WEIGHT.WeightKg ) , 2) AS GEMIDDELD_GEWICHT, COUNT(WEIGHT.AniId) AS AANTAL  FROM WEIGHT  ");

                    lQuery.Append(" INNER JOIN ANIMAL ON ANIMAL.aniid = WEIGHT.AniId  ");
                    lQuery.Append(" WHERE WEIGHT.aniid IN ( ");
                    lQuery.Append(" SELECT ANIMALCATEGORY.aniid FROM ANIMALCATEGORY ");
                    lQuery.Append(" INNER JOIN agrofactuur.BEDRIJF ON ");
                    lQuery.Append(" agrofactuur.BEDRIJF.farmid = ANIMALCATEGORY.farmid ");
                    lQuery.AppendFormat(" WHERE ANIMALCATEGORY.AniId = WEIGHT.AniId AND agrofactuur.BEDRIJF.programid = {0} AND ANIMALCATEGORY.AniId>0   AND WEIGHT.AniId>0 AND agrofactuur.BEDRIJF.farmid>0  )  ", pProgramId);

                    lQuery.Append(" GROUP BY Aantal_Dagen  ");
                    lQuery.Append(" HAVING AANTAL >= 5 AND Aantal_Dagen >= 0 ");

                    //oude pProgramId
                    //lQuery.AppendFormat(" WHERE agrofactuur.BEDRIJF.programid = {0} ", pProgramId);
                    //lQuery.Append(" GROUP BY Aantal_Dagen ");
                    //lQuery.Append(" HAVING AANTAL >= 5 AND aantal_dagen >= 0 ");
                }





                System.Data.DataTable dtWeights = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                return dtWeights;
            }
            return new DataTable();
        }

        public DataTable getFarmWeightsDeviation(int pProgramId)
        {
            if (pProgramId > 0)
            {
                StringBuilder lQuery = new StringBuilder();


                lQuery.Append(" SELECT DATEDIFF( WEIGHT.WeightDate, ANIMAL.AniBirthDate ) AS Aantal_Dagen,  ");
                lQuery.Append(" Round( AVG( WEIGHT.WeightKg ) , 2) AS GEMIDDELD_GEWICHT, COUNT(WEIGHT.AniId) AS AANTAL, ");
                lQuery.Append(" STDDEV_SAMP(WEIGHT.WeightKG)  AS Deviation, ");
                lQuery.Append(" AVG(WEIGHT.WeightKG) +  STDDEV_SAMP(WEIGHT.WeightKG)  AS MediumRow, ");
                lQuery.Append(" AVG(WEIGHT.WeightKG) + (2 * STDDEV_SAMP(WEIGHT.WeightKG))  AS TopRow");

                lQuery.Append(" FROM WEIGHT ");

                lQuery.Append(" INNER JOIN ANIMAL ON ANIMAL.aniid = WEIGHT.AniId ");
                lQuery.Append(" WHERE WEIGHT.aniid IN  ");
                lQuery.Append(" ( ");
                lQuery.Append(" SELECT ANIMALCATEGORY.aniid FROM ANIMALCATEGORY  ");
                lQuery.Append(" INNER JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.farmid = ANIMALCATEGORY.farmid  ");
                lQuery.AppendFormat(" WHERE ANIMALCATEGORY.AniId = WEIGHT.AniId AND agrofactuur.BEDRIJF.programid = {0} ", pProgramId);
                lQuery.Append(" ) ");

                lQuery.Append(" GROUP BY Aantal_Dagen HAVING AANTAL >= 5 AND Aantal_Dagen >= 0 ");



                System.Data.DataTable dtWeights = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                return dtWeights;
            }
            return new DataTable();
        }

        public bool SaveAnalyse(ANALYSE pAnalyse)
        {
            try
            {
                if (WriteActions.SaveObject(pAnalyse) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public int SaveAnimal(ANIMAL a)
        {
            return SaveAnimal(a, 0, LABELSConst.ChangedBy.UNKNOWN);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="a"></param>
        /// <param name="sourceId"></param>
        /// <param name="changedBy"></param>
        /// <returns></returns>
        public int SaveAnimal(ANIMAL a, int sourceId, LABELSConst.ChangedBy changedBy)
        {
            a.SourceID = sourceId;
            a.Changed_By = (int)changedBy;

            try
            {
                using (System.Data.Common.DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), a))
                {
                    if (a.AniId == 0)
                    {
                        cmd.CommandText = mDatabase.CreateInsertCommandText(a);
                    }
                    else
                    {

                        String[] UpdateParams = new String[]
                        {
                            "AniId"
                        };
                        cmd.CommandText = mDatabase.CreateUpdateALLCommandText(a, UpdateParams);
                        //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
                    }
                    //return true;

                    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                    {
                        if (a.AniId == 0)
                        {
                            //TODO DBREWRITE fixen
                            using (System.Data.Common.DbDataReader reader = MySql.Data.MySqlClient.MySqlHelper.ExecuteReader((MySql.Data.MySqlClient.MySqlConnection)cmd.Connection, "SELECT LAST_INSERT_ID();"))
                            {
                                reader.Read();
                                a.AniId = Convert.ToInt32(reader.GetValue(0));
                            }
                        }
                        cmd.Connection.Dispose();
                        return a.AniId > 0 ? a.AniId : -1;
                    }
                    else
                    {
                        cmd.Connection.Dispose();
                        return -2;
                    }

                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError($"{nameof(DBMasterQueries)}.{nameof(SaveAnimal)} ex: {ex.Message}", ex);
                return -3;
            }
        }

        [Obsolete(" Vergeet niet om de Animalcategory.Anicategory in te stellen na het opslaan van een nieuw dier")]
        public bool SaveAnimal(int pThrId, ANIMAL pAnimal)
        {
            try
            {
                /*
                 isFilledByDb kan niet overal correct gezet worden 
                 */
                var controle = GetAnimalByAniAlternateNumber(pAnimal.AniAlternateNumber);
                if (controle.AniId > 0)
                {
                    pAnimal.SetIsFilledByDB(true);
                }
                if (!isFilledByDb(pAnimal))
                {
                    int ProgId = getProgIdByDBName(mToken.getLastChildConnection().getDBNameSlave());


                    if (ProgId == (int)LABELSConst.ProgId.schapen || ProgId == (int)LABELSConst.ProgId.geiten)
                    {
                        if (pAnimal.AniAlternateNumber.StartsWith("NL "))
                        {
                            pAnimal.AniAlternateNumber = RemoveLeadingZeros(pAnimal.AniAlternateNumber);
                        }
                    }
                    else
                    {
                        if (pAnimal.AniLifeNumber.StartsWith("NL "))
                        {
                            pAnimal.AniLifeNumber = RemoveLeadingZeros(pAnimal.AniLifeNumber);
                        }
                        if (pAnimal.AniAlternateNumber.StartsWith("NL "))
                        {
                            pAnimal.AniAlternateNumber = RemoveLeadingZeros(pAnimal.AniAlternateNumber);
                        }
                    }

                    if (pAnimal.AniAlternateNumber == String.Empty)
                        pAnimal.AniAlternateNumber = pAnimal.AniLifeNumber;

                    if (WriteActions.SaveObject(pAnimal) < 0)
                        return false;

                    #region Schapen scrapie
                    if (ProgId == (int)LABELSConst.ProgId.schapen)
                    {

                        //Alleen bij schapen
                        //Scrapie Status 0 = onbekend -> StatusID 0
                        //Scrapie Status 1 = ARR/ARR -> StatusID 1
                        //Scrapie Status overig = besmet -> StatusID 2                

                        DIER_ZIEKTE dz = new DIER_ZIEKTE();
                        dz.Dz_AniId = pAnimal.AniId;
                        dz.Dz_ZiekteId = (int)LABELSConst.DierkZiekte.Scrapie;
                        dz.Dz_Datum = pAnimal.AniDatumScrapie;
                        if (pAnimal.AniScrapie == 0)
                            dz.Dz_StatusId = 0;
                        else if (pAnimal.AniScrapie == 1)
                            dz.Dz_StatusId = 1;
                        else
                            dz.Dz_StatusId = 2;
                        dz.Dz_SubStatusId = (sbyte)pAnimal.AniScrapie;

                        addDierziekte(pThrId, dz, ProgId);
                    }
                    #endregion

                    return true;
                }
                else
                {
                    return UpdateANIMAL(pThrId, pAnimal);
                }

            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveAnimal", ex);
                return false;
            }

        }

        private string RemoveLeadingZeros(string pAnimalUniqueNumber)
        {
            char[] split = { ' ' };
            string[] lNumber = pAnimalUniqueNumber.Split(split);
            if (lNumber.Length == 2)
            {
                while (lNumber[1].StartsWith("0"))
                {
                    if (lNumber[1].Length > 4)
                    {
                        lNumber[1] = lNumber[1].Remove(0, 1);
                    }
                    else { break; }
                }
                return lNumber[0] + " " + lNumber[1];
            }
            return pAnimalUniqueNumber;

        }

        public bool SaveAnimalCategory(ANIMALCATEGORY pAnimalCat)
        {
            try
            {
                if (pAnimalCat.Anicategory < 1)
                    pAnimalCat.Anicategory = 5;
                if (pAnimalCat.UbnId == 0 && pAnimalCat.FarmId > 0)
                {
                    UBN u = getUBNByFarmId(pAnimalCat.FarmId);
                    pAnimalCat.UbnId = u.UBNid;
                }
                if (WriteActions.SaveObject(pAnimalCat) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }


        public bool ReplaceAnimalCategory(ANIMALCATEGORY ac)
        {
            try
            {
                if (ac.Anicategory < 1)
                    ac.Anicategory = 5;

                if (ac.AniWorknumber.Length < 4)
                    ac.AniWorknumber = ac.AniWorknumber.PadLeft(4, '0');

                string qry = $@"REPLACE INTO ANIMALCATEGORY (FarmId,      AniId,      Anicategory,        AniWorknumber,       AniMinasCategory,      Ani_Mede_Eigenaar,       AniComment,      Changed_By,       SourceID) 
                                VALUES                  ({ac.FarmId}, {ac.AniId} ,{ac.Anicategory},  '{ac.AniWorknumber}', {ac.AniMinasCategory}, {ac.Ani_Mede_Eigenaar}, '{ac.AniComment}', {ac.Changed_By}, {ac.SourceID})";

                //Geen exception is goed gegaan (result == 1 controleren werkt niet met REPLACE INTO?).
                mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);

                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError($"{nameof(DBMasterQueries)}.{nameof(ReplaceAnimalCategory)} ex: {ex.Message}", ex);
                return false;
            }
        }


        public bool SavePaddedAnimalCategory(ANIMALCATEGORY ac)
        {
            try
            {
                if (ac.Anicategory < 1)
                    ac.Anicategory = 5;

                if (ac.AniWorknumber.Length < 4)
                    ac.AniWorknumber = ac.AniWorknumber.PadLeft(4, '0');

                string qry = $@"INSERT INTO ANIMALCATEGORY (FarmId,      AniId,      Anicategory,        AniWorknumber,       AniMinasCategory,      Ani_Mede_Eigenaar,       AniComment,      Changed_By,       SourceID) 
                                VALUES                  ({ac.FarmId}, {ac.AniId} ,{ac.Anicategory},  '{ac.AniWorknumber}', {ac.AniMinasCategory}, {ac.Ani_Mede_Eigenaar}, '{ac.AniComment}', {ac.Changed_By}, {ac.SourceID})
                                ON DUPLICATE KEY UPDATE Anicategory = {ac.Anicategory}, AniWorknumber = '{ac.AniWorknumber}', AniMinasCategory = {ac.AniMinasCategory}, Ani_Mede_Eigenaar = {ac.Ani_Mede_Eigenaar}, AniComment = '{ac.AniComment}', Changed_By = {ac.Changed_By}, SourceID = {ac.SourceID}";
                //Geen exception is goed gegaan (result == 1 controleren werkt niet met REPLACE INTO?).
                mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);

                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError($"{nameof(DBMasterQueries)}.{nameof(SavePaddedAnimalCategory)} ex: {ex.Message}", ex);
                return false;
            }
        }

        public bool SaveAnimalPredikaat(ANIMALPREDIKAAT pPreAnipredikaat)
        {
            try
            {
                if (WriteActions.SaveObject(pPreAnipredikaat) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool SaveAnimalShareInfo(ANIMAL_SHARE_INFO pAniShareInfo)
        {
            try
            {
                if (WriteActions.SaveObject(pAniShareInfo) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool SaveAnimalProduction(ANIMAL_PRODUCTION pAniProduction)
        {
            try
            {
                if (WriteActions.SaveObject(pAniProduction) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalProduction(ANIMAL_PRODUCTION pAniProduction)
        {


            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAniProduction);
            String[] DeleteParams = new String[] { "AniID", "AP_Production_Date" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAniProduction, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAniProduction, mDatabase.CreateDeleteCommandText(pAniProduction, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveBedrijf(BEDRIJF pBedrijf)
        {
            try
            {
                if (WriteActions.SaveObject(pBedrijf) < 0) return false;

                //DbCommand cmd = mDatabase.CreateParameters(mToken, pBedrijf);
                //if (!isFilledByDb(pBedrijf))
                //{
                //    cmd.CommandText = mDatabase.CreateInsertCommandText(pBedrijf);
                //    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1) ret = true;
                //    if (ret)
                //    {
                //        pBedrijf.FarmId = GetLastRowId(cmd.Connection);
                //    }
                //}
                //else
                //{
                //    String[] UpdateParams = new String[] { "FarmId" };
                //    cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pBedrijf, UpdateParams);
                //    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1) ret = true;

                //}
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBedrijf", ex);
                return false;
            }
        }
        public bool SaveBedrprod(BEDRPROD pBedrprod)
        {
            try
            {
                if (WriteActions.SaveObject(pBedrprod) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveBirth(BIRTH pBirth)
        {
            try
            {
                if (WriteActions.SaveObject(pBirth) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBirth", ex);
                return false;
            }
        }


        public bool SetBirthReportDate(BIRTH pBirth)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBirth);
            String[] Update = new String[]
            {
                "Reportdate",
                "Changed_By",
                "SourceId"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pBirth, "EventId", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBirth, mDatabase.CreateUpdateCommandText(pBirth, "EventId", Update)) == 1;
        }
        public bool SaveBlood(BLOOD pBlood)
        {
            try
            {
                if (WriteActions.SaveObject(pBlood) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBlood", ex);
                return false;
            }
        }
        public bool SaveBlood(BLOOD pBlood, int pProgId)
        {
            try
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBlood);
                string qry;
                if (!isFilledByDb(pBlood))
                    qry = mDatabase.CreateInsertCommandText(pBlood);
                //cmd.CommandText = mDatabase.CreateInsertCommandText(pBlood);
                else
                {
                    String[] UpdateParams = new String[] { "EventId" };
                    qry = mDatabase.CreateUpdateALLCommandText(pBlood, UpdateParams);
                    //cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pBlood, UpdateParams);
                }
                if (pProgId == 3 || pProgId == 5)
                {
                    if (pProgId == 3)
                    {
                        qry = qry.Replace("BLOOD", "agrobase_sheep.BLOOD");
                    }
                    else if (pProgId == 5)
                    {
                        qry = qry.Replace("BLOOD", "agrobase_goat.BLOOD");
                    }
                }
                return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBlood", ex);
                return false;
            }
        }

        public bool SaveBloodResearch(BLOOD_RESEARCH pBloodResearch)
        {
            try
            {
                if (WriteActions.SaveObject(pBloodResearch) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBloodResearch", ex);
                return false;
            }
        }

        public bool SaveBloodResearchDetail(BLOOD_RESEARCH_DETAIL pObj)
        {
            try
            {
                if (WriteActions.SaveObject(pObj) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBloodResearchDetail", ex);
                return false;
            }
        }

        public bool SaveBulls(ANIMAL pBull)
        {
            //try
            //{
            //    DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBull, "p");
            //    cmd.Parameters["pAniId"].Value = null;
            //    cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //    cmd.CommandText = "SaveAnimal";
            //    DbDataReader reader = cmd.ExecuteReader();
            //    reader.Read();
            //    pBull.AniId = Convert.ToInt32(reader.GetValue(0));
            //    reader.Close();
            //    return true;
            //}
            //catch (Exception ex)
            //{
            //    unLogger.WriteDebug("SaveBulls", ex);
            //    return false;
            //}

            try
            {
                if (WriteActions.SaveObject(pBull) < 0) return false;
                return true;
                //int AniId = WriteActions.SaveObject(pBull);
                //if (AniId > 0)
                //{
                //    pBull.AniId = AniId;
                //    return true;
                //}
                //else
                //    return false;
                //return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBull", ex);
                return false;
            }
        }

        public bool saveBullUbn(BULLUBN pBullUbn)
        {
            try
            {
                if (WriteActions.SaveObject(pBullUbn) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveBuying(BUYING pBuying)
        {
            try
            {
                if (WriteActions.SaveObject(pBuying) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveBuying", ex);
                return false;
            }
        }
        public bool SaveComplaint(COMPLAINTS pComplaint)
        {
            try
            {
                if (WriteActions.SaveObject(pComplaint) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveComplaint", ex);
                return false;
            }
        }
        public bool SaveDisease(DISEASE pDiss)
        {
            try
            {
                if (WriteActions.SaveObject(pDiss) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveDisease", ex);
                return false;
            }
        }
        public bool InsertDHZ(DHZ pDHZ)
        {
            if (WriteActions.SaveObject(pDHZ) < 0) return false;
            return true;
        }
        public bool SaveEvent(EVENT pEvent)
        {
            try
            {
                pEvent.EveDate = pEvent.EveDate.Date;
                if (WriteActions.SaveObject(pEvent) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveEvent", ex);
                return false;
            }


        }
        public bool SaveEvent(EVENT pEvent, int pProgID)
        {
            try
            {
                pEvent.EveDate = pEvent.EveDate.Date;
                using (System.Data.Common.DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pEvent))
                {
                    if (pEvent.EventId == 0)
                    {

                        cmd.CommandText = mDatabase.CreateInsertCommandText(pEvent);
                    }
                    else
                    {

                        String[] UpdateParams = new String[]
                    {
                        "EventId"
                    };
                        cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pEvent, UpdateParams);

                    }


                    if (pProgID == 3 || pProgID == 5)
                    {
                        if (pProgID == 3)
                        {
                            cmd.CommandText = cmd.CommandText.Replace("EVENT", "agrobase_sheep.EVENT");
                        }
                        else
                        {
                            cmd.CommandText = cmd.CommandText.Replace("EVENT", "agrobase_goat.EVENT");
                        }
                    }

                    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                    {
                        if (pEvent.EventId == 0)
                        {
                            //TODO DBREWRITE fixen
                            using (System.Data.Common.DbDataReader reader = MySql.Data.MySqlClient.MySqlHelper.ExecuteReader((MySql.Data.MySqlClient.MySqlConnection)cmd.Connection, "SELECT LAST_INSERT_ID();"))
                            {
                                reader.Read();
                                pEvent.EventId = Convert.ToInt32(reader.GetValue(0));
                            }
                        }
                        cmd.Connection.Dispose();
                        return true;
                    }
                    else
                    {
                        cmd.Connection.Dispose();
                        return false;
                    }

                }
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveEvent", ex);
                return false;
            }
        }




        public bool SaveGroupId(GROUPID pGrid)
        {
            try
            {
                if (WriteActions.SaveObject(pGrid) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveGroups(GROUPS pGroup)
        {
            try
            {
                if (WriteActions.SaveObject(pGroup) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveGRZTOGTH(GRZTOGTH pGrztogth)
        {
            try
            {
                if (WriteActions.SaveObject(pGrztogth) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveGrztogth", ex);
                return false;
            }
        }
        [Obsolete("gebruik deze niet: medicijnen worden via ARTIKEL ingelezen")]
        public bool SaveMedicine(MEDICINE pMed)
        {
            try
            {
                if (WriteActions.SaveObject(pMed) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveMedicine", ex);
                return false;
            }
        }
        public bool SaveDryoff(DRYOFF pDryoff)
        {
            try
            {
                if (WriteActions.SaveObject(pDryoff) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveDryoff", ex);
                return false;
            }
        }
        public bool SaveGestation(GESTATIO pGestation)
        {
            try
            {
                if (WriteActions.SaveObject(pGestation) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveGestation", ex);
                return false;
            }
        }
        public bool SaveInsemin(INSEMIN pInsemin)
        {
            try
            {
                if (WriteActions.SaveObject(pInsemin) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveInsemin", ex);
                return false;
            }
        }


        public bool SetInseminReportDateAndStatus(INSEMIN pInsemin)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pInsemin);
            String[] Update = new String[]
            {
                "ReportDate",
                "ReportStatus"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pInsemin, "EventId", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;

            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pInsemin, mDatabase.CreateUpdateCommandText(pInsemin, "EventId", Update)) == 1;
        }

        public bool SaveInHeat(INHEAT pInHeat)
        {
            try
            {
                if (WriteActions.SaveObject(pInHeat) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveInheat", ex);
                return false;
            }
        }
        public bool SaveLoss(LOSS pLoss)
        {
            try
            {
                if (WriteActions.SaveObject(pLoss) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveLoss", ex);
                return false;
            }
        }

        public bool SaveMovement(MOVEMENT pMovement)
        {
            try
            {
                pMovement.MovDate = pMovement.MovDate.Date;
                if (WriteActions.SaveObject(pMovement) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                utils.writeLogFile(new StringBuilder(ex.ToString()), false);
                unLogger.WriteDebug("SaveMovement", ex);
                return false;
            }
        }

        public bool SaveMovementDetail(DataObject detail)
        {
            if (detail is BUYING)
                return SaveBuying(detail as BUYING);
            else if (detail is SALE)
                return SaveSale(detail as SALE);
            else if (detail is LOSS)
                return SaveLoss(detail as LOSS);
            else
                throw new ArgumentException($"SaveMovementDetail detail should be a BUYING, SALE or LOSS");
        }


        public bool SetMovementReportDate(MOVEMENT pMovement)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMovement);
            String[] Update = new String[]
            {
                "ReportDate",
                "Changed_By",
                "SourceId"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pMovement, "MovId", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMovement, mDatabase.CreateUpdateCommandText(pMovement, "MovId", Update)) == 1;
        }

        public bool SaveMoveOut(MOVEOUT pMoveout)
        {
            try
            {
                if (WriteActions.SaveObject(pMoveout) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveMoveout", ex);
                return false;
            }
        }
        [Obsolete("gebruik :  ARTIKELUBN ")]
        public bool saveMedicineUbn(MEDICINEUBN pMedUbn)
        {
            try
            {
                if (WriteActions.SaveObject(pMedUbn) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                // unLogger.WriteError(ex.Message);
                unLogger.WriteError(ex.ToString());
                return false;
            }
        }
        public bool SaveMedplanM(MEDPLANM pMedplandM)
        {
            try
            {
                if (WriteActions.SaveObject(pMedplandM) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                // unLogger.WriteError(ex.Message);
                unLogger.WriteError(ex.ToString());
                return false;
            }
        }
        public bool SaveMedplanD(MEDPLAND pMedplandD)
        {
            try
            {
                if (WriteActions.SaveObject(pMedplandD) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                // unLogger.WriteError(ex.Message);
                unLogger.WriteError(ex.ToString());
                return false;
            }
        }
        public bool SaveMessage(MESSAGES pMessage)
        {
            try
            {
                if (WriteActions.SaveObject(pMessage) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveMutation(MUTATION pMutation)
        {
            try
            {
                if (WriteActions.SaveObject(pMutation) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertMutLog(MUTALOG pMutLog)
        {
            if (WriteActions.SaveObject(pMutLog) < 0) return false;
            return true;
        }
        public bool MutLogMeldingIntrekken(MUTALOG pMutLog)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMutLog);
            String[] Update = new String[]
                {
                    "Returnresult"
                };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pMutLog, "Internalnr", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMutLog, mDatabase.CreateUpdateCommandText(pMutLog, "Internalnr", Update)) == 1;

        }
        public bool InsertDHZLog(DHZLOG pDHZLog)
        {
            if (pDHZLog.Internalnr > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT DHZLOG.* FROM DHZLOG");
                lQuery.AppendFormat(" WHERE Internalnr = {0}  ", pDHZLog.Internalnr);

                System.Data.DataTable dtDhzlog = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                if (dtDhzlog.Rows.Count > 0)
                {
                    return true;
                }
            }
            if (WriteActions.SaveObject(pDHZLog) < 0) return false;
            return true;
        }

        public bool savePlace(PLACE pPlace)
        {
            try
            {
                if (WriteActions.SaveObject(pPlace) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveRemark(REMARK pRemark)
        {
            try
            {
                if (pRemark.UbnId == 0 && pRemark.Farmid > 0)
                {
                    BEDRIJF b = GetBedrijfById(pRemark.Farmid);
                    pRemark.UbnId = b.UBNid;
                }
                if (pRemark.UbnId <= 0) { unLogger.WriteError($"SAVE REMARK: UbnId=0 voor FarmId={pRemark.Farmid} "); }
                if (WriteActions.SaveObject(pRemark) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveSale(SALE pSale)
        {
            try
            {
                if (WriteActions.SaveObject(pSale) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveSale", ex);
                return false;
            }
        }
        public bool SaveStatus(STATUS pStatus)
        {
            if (WriteActions.SaveObject(pStatus) < 0) return false;
            return true;
        }
        public bool SaveThird(THIRD pThird)
        {

            //cmd.Parameters["?ThrId"].Value = null;
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pThird);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //pThird.ThrId = GetLastRowId(mToken);
            //return true;

            try
            {
                if (WriteActions.SaveObject(pThird) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveThird", ex);
                return false;
            }
        }


        public bool SaveThirdNotes(THIRD_NOTES pThirdNotes)
        {
            try
            {
                if (WriteActions.SaveObject(pThirdNotes) < 0) return false;
                return true;

            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveThirdNotes", ex);
                return false;
            }
        }






        public List<RIGHTS_LISTS> getRightsLists(int pFarmId, int pProgramid)
        {
            List<RIGHTS_LISTS> lResultValue = new List<RIGHTS_LISTS>();
            StringBuilder query = new StringBuilder($@" SELECT LabId,ListDescription,ListFarmIds,
                    ListLocation,ListName,ListProgramIds,
                    ListText,ListUrl
                    FROM agrofactuur.RIGHTS_LISTS ");
            DataTable dt = mDatabase.QueryData(mToken, query);
            foreach (DataRow row in dt.Rows)
            {
                RIGHTS_LISTS rl = new RIGHTS_LISTS();
                if (mDatabase.FillObject(rl, row))
                { lResultValue.Add(rl); }
            }

            //BEDRIJF b = GetBedrijfById(pFarmId);

            List<RIGHTS_LISTS> result = new List<RIGHTS_LISTS>();
            foreach (RIGHTS_LISTS rl in lResultValue)
            {
                List<int> programIds = new List<int>();
                List<int> farmIds = new List<int>();

                if (!string.IsNullOrEmpty(rl.ListProgramIds)) programIds = rl.ListProgramIds.Split(',').ToList().Select(x => Convert.ToInt32(x)).ToList();
                if (!string.IsNullOrEmpty(rl.ListFarmIds)) farmIds = rl.ListFarmIds.Split(',').ToList().Select(x => Convert.ToInt32(x)).ToList();
                if (programIds.Contains(pProgramid) || farmIds.Contains(pFarmId))
                {
                    result.Add(rl);
                }
            }

            return result;
        }

        public RIGHTS_LISTS getRightsListsByListName(string pListName)
        {
            RIGHTS_LISTS lResultValue = new RIGHTS_LISTS();
            StringBuilder query = new StringBuilder(" SELECT * FROM agrofactuur.RIGHTS_LISTS ");
            query.AppendFormat(" WHERE ListName='{0}' ", pListName);
            mDatabase.FillObject(mToken, lResultValue, query);
            return lResultValue;
        }


        // NIET MEER GEBRUIKEN (rikkert)
        //public bool SaveThirdThird(THIRDTHIRD pThirdThird)
        //{
        //    string sql_fill = "REPLACE INTO agrolink.THIRDTHIRD (TtId,TtThrId1,TtThrId2,TtProgramId) VALUES('" + pThirdThird.TtId.ToString() + "','" + pThirdThird.TtThrId1.ToString() + "','" + pThirdThird.TtThrId2.ToString() + "','" + pThirdThird.TtProgramId.ToString() + "')";
        //    DBConnectionToken con = mToken.getLastChildConnection();
        //    DbCommand cmd = mDatabase.CreateCommand(con);
        //    cmd.CommandText = sql_fill;
        //    int res = mDatabase.ExecuteNonQueryCommand(cmd);
        //    return true;
        //    //REPLACE INTO domein ($query_attr[0]) VALUES ($query_attr[1])

        //    //string sql_fill =
        //    //            "INSERT INTO agrofactuur.temptable_rdAanwezigeDieren" +
        //    //                " (SELECT AniId FROM (" + rdAanwezigeDierenQuery + ") as tmp);";

        //    //DbCommand cmd = mDatabase.CreateCommand(con);
        //    //cmd.CommandText = sql_fill;
        //    //int res = mDatabase.ExecuteNonQueryCommand(cmd);
        //    //table_filled = true;


        //    //try
        //    //{
        //    //    DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdThird);
        //    //    if (!isFilledByDb(pThirdThird))
        //    //    {
        //    //        cmd.CommandText = mDatabase.CreateInsertCommandText(pThirdThird);
        //    //        if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
        //    //        pThirdThird.TtId = GetLastRowId(mToken);
        //    //        return true;
        //    //    }
        //    //    else
        //    //    {
        //    //        String[] UpdateParams = new String[] { "TtId", "TtProgramId" };
        //    //        cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pThirdThird, UpdateParams);
        //    //        return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
        //    //    }

        //    //}
        //    //catch (Exception ex)
        //    //{
        //    //    unLogger.WriteDebug("SaveThirdThird", ex);
        //    //    return false;
        //    //}
        //}

        public bool SaveSupplyDetails(SUPPLY1_DETAILS pSupDetails)
        {
            try
            {
                if (WriteActions.SaveObject(pSupDetails) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveWean(WEAN pWeaner)
        {
            try
            {
                if (WriteActions.SaveObject(pWeaner) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveWGCurve(WGCURVE pWgcurve)
        {
            try
            {
                if (WriteActions.SaveObject(pWgcurve) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveWGCurve", ex);
                return false;
            }
        }
        public bool SaveWGCurveD(WGCURVED pWgcurveD)
        {
            try
            {
                if (WriteActions.SaveObject(pWgcurveD) < 0) return false;
                return true;

            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveWGCurveD", ex);
                return false;
            }
        }
        public bool InsertWgcurvedFarm(WGCURVEFARM pWgcurvedFarm)
        {
            if (WriteActions.SaveObject(pWgcurvedFarm) < 0) return false;
            return true;
        }

        public bool DeleteThird(THIRD pThird)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThird);
            String[] DeleteParams = new String[] { "ThrId" };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pThird, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pThird, mDatabase.CreateSetNegativeCommandText(pThird, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }


        public bool DeleteThirdNotes(THIRD_NOTES pThirdNotes)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdNotes);
            String[] DeleteParams = new String[] { "No_ID" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pThirdNotes, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken, pThirdNotes, mDatabase.CreateDeleteCommandText(pThirdNotes, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }



        public bool DeleteThirdThird(THIRDTHIRD pThirdThird)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pThirdThird);
            string Commandtext = "DELETE FROM agrolink.THIRDTHIRD WHERE TtId = '" + pThirdThird.TtId + "' ";
            //cmd.CommandText = Commandtext;
            try
            {
                return mDatabase.ExecuteNonQuery(mToken, Commandtext) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool InsertAnimalAfwijking(int pThrId, ANIMAL_AFWIJKING pAnimalAfwijking)
        {
            pAnimalAfwijking.Datum = pAnimalAfwijking.Datum.Date;
            if (pAnimalAfwijking.AA_by_ThrID == 0)
            {
                pAnimalAfwijking.AA_by_ThrID = pThrId;
            }
            try
            {
                if (WriteActions.SaveObject(pAnimalAfwijking) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertAnimalPredikaten(List<ANIMALPREDIKAAT> pAnimalpredikaten)
        {

            if (pAnimalpredikaten.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" INSERT INTO ANIMALPREDIKAAT ");
                //ANIMALPREDIKAAT a = new ANIMALPREDIKAAT();

                lQuery.Append(" (PreAniId,PreBegindatum,PreEinddatum,PreScore,PreTypePredikaat) ");

                lQuery.Append(" VALUES ");
                int teller = 1;
                foreach (ANIMALPREDIKAAT ap in pAnimalpredikaten)
                {
                    if (teller < pAnimalpredikaten.Count())
                    {
                        lQuery.AppendFormat(" ({0},{1},{2},{3},{4}), ", ap.PreAniId, MySQL_Datum(ap.PreBegindatum, 1), MySQL_Datum(ap.PreEinddatum, 1), ap.PreScore, ap.PreTypePredikaat);
                    }
                    else
                    {
                        lQuery.AppendFormat(" ({0},{1},{2},{3},{4}) ", ap.PreAniId, MySQL_Datum(ap.PreBegindatum, 1), MySQL_Datum(ap.PreEinddatum, 1), ap.PreScore, ap.PreTypePredikaat);
                    }
                    teller += 1;
                }

                //DbCommand cmnd = mDatabase.CreateCommand(mToken.getLastChildConnection());

                //cmnd.CommandText = lQuery.ToString();
                //cmnd.CommandType = CommandType.Text;
                try
                {
                    //int ret = mDatabase.ExecuteNonQueryCommand(cmnd);
                    int ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), lQuery.ToString());
                    return ret == pAnimalpredikaten.Count();
                }
                catch (Exception ex)
                {
                    unLogger.WriteDebug(ex.Message, ex);
                    return false;
                }

            }
            return false;
        }
        public bool InsertAuthGroupsFarm(AUTH_GROUPS_FARM pAuthGroupsFarm)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAuthGroupsFarm);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pAuthGroupsFarm);
            try
            {
                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;

                //return true;
                if (WriteActions.SaveObject(pAuthGroupsFarm) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertArtikelMedicList(ARTIKEL_MEDIC_LIST pAml)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAml);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pAml);
            try
            {
                if (WriteActions.SaveObject(pAml) < 0) return false;
                return true;
                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;

                //return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteArtikelMedicList(ARTIKEL_MEDIC_LIST pAml)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAml);
            String[] DeleteParams = new String[]
             {
                 "ProgramID",
                 "ArtID"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAml, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pAml, mDatabase.CreateDeleteCommandText(pAml, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertThirdUbn(THIRDUBN pThirdUbn)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdUbn);

            //cmd.CommandText = mDatabase.CreateInsertCommandText(pThirdUbn);

            try
            {
                if (WriteActions.SaveObject(pThirdUbn) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertThirdKin(THIRDKIN pThirdKin)
        {

            try
            {
                if (WriteActions.SaveObject(pThirdKin) < 0) return false;
                return true;
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdKin);
                //if (!isFilledByDb(pThirdKin))
                //    cmd.CommandText = mDatabase.CreateInsertCommandText(pThirdKin);
                //else
                //{
                //    String[] UpdateParams = new String[] 
                //    { 
                //        "ThrId",
                //        "ThkDescriptionId",
                //        "ThkFarmID"
                //    };
                //    cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pThirdKin, UpdateParams);
                //}
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool InsertLifenr(LIFENR pLifenr)
        {
            if (pLifenr.LifId == 0)
            {
                pLifenr.LifId = 1;
                //TODO Tijdelijke Fix IOM Nico dit is de Id uit een andere tabel die nog aangemaakt moet worden
                //voor Jos mag die niet 0 zijn 
            }
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pLifenr);

            //cmd.CommandText = mDatabase.CreateInsertCommandText(pLifenr);

            try
            {
                if (WriteActions.SaveObject(pLifenr) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool InsertMestnr(MESTNR pMestnummer)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMestnummer);

            //cmd.CommandText = mDatabase.CreateInsertCommandText(pMestnummer);

            try
            {
                if (WriteActions.SaveObject(pMestnummer) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertMestTank(MESTTANK pMesttank)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMesttank);

            //cmd.CommandText = mDatabase.CreateInsertCommandText(pMesttank);

            try
            {
                if (WriteActions.SaveObject(pMesttank) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertMestUbn(MESTUBN pMestUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMestUbn);

            //cmd.CommandText = mDatabase.CreateInsertCommandText(pMestUbn);

            try
            {
                if (WriteActions.SaveObject(pMestUbn) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertReportLog(REPORT_LOGGING pReportLog)
        {
            try
            {

                String qry = String.Format("INSERT INTO agrologs.REPORT_LOGGING (Rl_DateTime, Rl_FarmId, Rl_ReportId," +
                    " Rl_State, Rl_ThrId, Rl_UbnId) VALUES ({0}, {1}, {2}, {3}, {4},{5})",
                    MySQL_Datum(pReportLog.Rl_DateTime, 0), pReportLog.Rl_FarmId, pReportLog.Rl_ReportId,
                    pReportLog.Rl_State, pReportLog.Rl_ThrId, pReportLog.Rl_UbnId);

                if (mDatabase.ExecuteNonQuery(mToken, qry) != 1)
                {
                    unLogger.WriteError(String.Format("InsertReportLogging ERROR: thrid:{0} FarmId:{1} UbnId:{2} ReportId:{3} statusId:{4} Datum:{5}", pReportLog.Rl_ThrId, pReportLog.Rl_FarmId, pReportLog.Rl_UbnId, pReportLog.Rl_ReportId, pReportLog.Rl_State, pReportLog.Rl_DateTime));
                    return false;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(String.Format("InsertReportLogging ERROR: thrid:{0} FarmId:{1} UbnId:{2} ReportId:{3} statusId:{4} Datum:{5}", pReportLog.Rl_ThrId, pReportLog.Rl_FarmId, pReportLog.Rl_UbnId, pReportLog.Rl_ReportId, pReportLog.Rl_State, pReportLog.Rl_DateTime) + " Error:" + ex.ToString());
                return false;
            }
            return true;
        }
        public bool InsertStorage(STORAGE pStorage)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pStorage);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pStorage);
            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
                if (WriteActions.SaveObject(pStorage) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateStorage(STORAGE pStorage)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pStorage);
            String[] UpdateParams = new String[]
            {
                            "Silonr",
                            "Omschrijving",
                            "Capaciteit"
            };
            String CommandText = mDatabase.CreateUpdateCommandText(pStorage, "InternalSilonr", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pStorage, CommandText) == 1;
        }
        public bool DeleteStorage(STORAGE pStorage)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pStorage);
            String[] DeleteParams = new String[]
             {
                 "InternalSilonr"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pStorage, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pStorage, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateAuth_Groups(AUTH_GROUPS pAuthGroups)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAuthGroups);
            String[] UpdateParams = new String[] { "GroupName" };
            String CommandText = mDatabase.CreateUpdateCommandText(pAuthGroups, "GroupID", UpdateParams);

            return mDatabase.ModifyObject(mToken, pAuthGroups, CommandText) == 1;
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;

        }
        public bool DeleteAuthGroupsRights(AUTH_GROUPS_RIGHTS pAuthGroupsRights)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAuthGroupsRights);
            String[] DeleteParams = new String[]
             {
                 "ModuleID",
                 "ObjectID",
                 "Object_Type",
                 "GroupID"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pAuthGroupsRights, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pAuthGroupsRights, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }

        }
        public bool InsertVKIINFO(VKIINFO pVkiInfo)
        {
            try
            {
                if (WriteActions.SaveObject(pVkiInfo) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateVKIINFO(VKIINFO pVkiInfo)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiInfo);
            String[] UpdateParams = new String[]
                {
                    "FarmNumber",
                    "Program",
                    "VerwAfvDatum",
                    "SoortAfvoer",
                    "SoortDieren",
                    "DierenArtsID",
                    "Vraag1",
                    "Vraag2",
                    "Vraag3",
                    "Vraag4",
                    "Vraag5",
                    "Vraag5opm",
                    "Vraag6",
                    "Vraag6opm",
                    "Vraag7",
                    "Vraag7opm",
                    "Vraag8",
                    "Vraag8opm",
                    "Vraag9",
                    "Vraag9opm",
                    "Vraag10",
                    "Vraag10opm"
                };
            String CommandText = mDatabase.CreateUpdateCommandText(pVkiInfo, "Internalnr", UpdateParams);

            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiInfo, CommandText) == 1;

            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool DeleteVKIINFO(VKIINFO pVkiInfo)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiInfo);
            String[] DeleteParams = new String[] { "Internalnr" };
            String CommandText = mDatabase.CreateDeleteCommandText(pVkiInfo, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiInfo, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertVKIDIER(VKIDIER pVkiDier)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiDier);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pVkiDier);
            try
            {
                if (WriteActions.SaveObject(pVkiDier) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateVKIDIER(VKIDIER pVkiDier)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiDier);
            String[] UpdateParams = new String[]
                {
                    "Internalnr",
                    "AniId",
                    "ReportDate",
                    "ReportTime"
                };
            string[] keys = { "Internalnr", "AniId" };
            String CommandText = mDatabase.CreateUpdateCommandTextDP(pVkiDier, keys, UpdateParams);
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiDier, CommandText) == 1;

            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool DeleteVKIDIER(VKIDIER pVkiDier)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiDier);
            String[] DeleteParams = new String[] { "AniId", "Internalnr" };
            string CommandText = mDatabase.CreateDeleteCommandText(pVkiDier, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 

                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiDier, CommandText) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool InsertVKIDIERMED(VKIDIERMED pVkiDierMed)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiDierMed);
            String CommandText = mDatabase.CreateInsertCommandText(pVkiDierMed);
            try
            {

                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiDierMed, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateVKIDIERMED(VKIDIERMED pVkiDierMed)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiDierMed);
            String[] UpdateParams = new String[]
                {
                    "Internalnr",
                    "AniId",
                    "Vraag",
                    "DiagnoseBehandeling",
                    "NaamMedicijn",
                    "RegNLmedicijn",
                    "DatumLstBeh",
                    "DatumEindeWT",
                    "DiagBehString"
                };
            string[] keys = { "Internalnr2" };
            String CommandText = mDatabase.CreateUpdateCommandText(pVkiDierMed, "Internalnr2", UpdateParams);

            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiDierMed, CommandText) == 1;
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;

        }
        public bool DeleteVKIDIERMED(VKIDIERMED pVkiDierMed)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pVkiDierMed);
            String[] DeleteParams = new String[] { "Internalnr2" };
            string CommandText = mDatabase.CreateDeleteCommandText(pVkiDierMed, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pVkiDierMed, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public List<VKIDIER> GetAllVKIDieren()
        {
            List<VKIDIER> lResultValue = new List<VKIDIER>();
            StringBuilder lQuery = new StringBuilder(" SELECT * FROM VKIDIER ");
            System.Data.DataTable dtVKIDieren = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            foreach (DataRow drwVKIDier in dtVKIDieren.Rows)
            {
                VKIDIER dier = new VKIDIER();
                if (mDatabase.FillObject(dier, drwVKIDier))
                { lResultValue.Add(dier); }
            }
            return lResultValue;
        }
        public List<TREATMEN> getAllUbnTreatmen(int pUbnId, out List<EVENT> ptreatmenEvents)
        {
            List<TREATMEN> lResult = new List<TREATMEN>();
            ptreatmenEvents = new List<EVENT>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT TREATMEN.*,EVENT.* FROM TREATMEN INNER JOIN EVENT ON EVENT.EventId = TREATMEN.EventId ");
            lQuery.Append(" WHERE EVENT.EveKind = 6 AND EVENT.UBNId = " + pUbnId.ToString() + " ");
            System.Data.DataTable dtTreats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            foreach (DataRow drwTreats in dtTreats.Rows)
            {
                TREATMEN tr = new TREATMEN();
                if (mDatabase.FillObject(tr, drwTreats))
                { lResult.Add(tr); }

                EVENT ev = new EVENT();
                if (mDatabase.FillObject(ev, drwTreats))
                { ptreatmenEvents.Add(ev); }
            }
            return lResult;
        }
        public List<STATUS> getAllUbnStatussen(int pUbnId)
        {
            List<STATUS> lResult = new List<STATUS>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM STATUS INNER JOIN EVENT ON EVENT.EventId = STATUS.EventId ");
            lQuery.Append(" WHERE EVENT.EveKind = 13 AND EVENT.UBNId = " + pUbnId.ToString() + " ");
            System.Data.DataTable dtTreats = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            foreach (DataRow drwTreats in dtTreats.Rows)
            {
                STATUS tr = new STATUS();
                if (mDatabase.FillObject(tr, drwTreats))
                { lResult.Add(tr); }
            }
            return lResult;
        }
        public List<VKIDIER> GetVKIDierenByInternalNr(int internalNr)
        {
            List<VKIDIER> lResultValue = new List<VKIDIER>();
            StringBuilder lQuery = new StringBuilder(" SELECT * FROM VKIDIER WHERE Internalnr=" + internalNr.ToString());
            System.Data.DataTable dtVKIDieren = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            foreach (DataRow drwVKIDier in dtVKIDieren.Rows)
            {
                VKIDIER dier = new VKIDIER();
                if (mDatabase.FillObject(dier, drwVKIDier))
                { lResultValue.Add(dier); }
            }
            return lResultValue;
        }
        public VKIDIER GetVkiDierByAniId(int AniId)
        {
            VKIDIER vkid = new VKIDIER();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM VKIDIER");
            lQuery.AppendFormat(" WHERE AniId= '{0}' ", AniId);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), vkid, lQuery);
            return hasresults ? vkid : null;
        }
        public List<VKIINFO> GetAllVKIInfoByFarmNumber(string FarmNumber)
        {
            List<VKIINFO> lResultValue = new List<VKIINFO>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM VKIINFO");
            lQuery.AppendFormat(" WHERE FarmNumber= '{0}' ", FarmNumber);
            System.Data.DataTable dtVKIINFO = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            foreach (DataRow drwVKIINFO in dtVKIINFO.Rows)
            {
                VKIINFO vki = new VKIINFO();
                if (mDatabase.FillObject(vki, drwVKIINFO))
                { lResultValue.Add(vki); }
            }
            return lResultValue;
        }
        public VKIINFO GetVKIInfoByInternalNr(int InternalNr)
        {
            VKIINFO vki = new VKIINFO();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM VKIINFO");
            lQuery.AppendFormat(" WHERE Internalnr = '{0}' ", InternalNr);
            mDatabase.FillObject(mToken.getLastChildConnection(), vki, lQuery);
            return vki;
        }
        public VKIDIERMED GetVKIDierMedByAniIdInternalnr(int pAniId, int pInternalNr)
        {
            VKIDIERMED vkimed = new VKIDIERMED();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM VKIDIERMED");
            lQuery.AppendFormat(" WHERE AniId='{0}' AND Internalnr = '{1}' ", pAniId, pInternalNr);
            mDatabase.FillObject(mToken.getLastChildConnection(), vkimed, lQuery);
            return vkimed;
        }
        public List<COUNTRY> GetAllCountries()
        {
            List<COUNTRY> lResultValue = new List<COUNTRY>();
            StringBuilder lQuery = new StringBuilder(" SELECT * FROM COUNTRY ORDER BY LandNaam");
            System.Data.DataTable dtCountries = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow drwCountries in dtCountries.Rows)
            {
                COUNTRY country = new COUNTRY();
                if (mDatabase.FillObject(country, drwCountries))
                { lResultValue.Add(country); }
            }
            return lResultValue;
        }
        public COUNTRY GetCountryByLandid(int landid)
        {
            COUNTRY c = new COUNTRY();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM COUNTRY");
            lQuery.AppendFormat(" WHERE LandId = '{0}' ", landid);
            mDatabase.FillObject(mToken, c, lQuery);
            return c;
        }
        public COUNTRY GetCountryByLandNummer(int pLandNummer)
        {
            COUNTRY c = new COUNTRY();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM COUNTRY");
            lQuery.AppendFormat(" WHERE LandNummer = '{0}' ", pLandNummer);
            mDatabase.FillObject(mToken, c, lQuery);
            return c;
        }

        public IEnumerable<UBN> GetUBNsForLORAReportGen(DateTime date)
        {
            int progId = 98;

            string ds = date.ToString("yyyy-MM-dd");
            unLogger.WriteDebug($"{nameof(DBMasterQueries)}.{nameof(GetUBNsForLORAReportGen)} Getting al UBNS without a MEADOWREPORT on Date '{ds}' for ProgId '{progId}'");

            DBConnectionToken conn = mToken.getLastChildConnection();

            StringBuilder query = new StringBuilder($@"
                SELECT UBN.*, PROGRAM.ProgName FROM agrolink.ABILITY
                INNER JOIN agrolink.PROGRAM_ABILITY ON PROGRAM_ABILITY.AbiId = ABILITY.AbiId
                INNER JOIN agrolink.PROGRAM ON PROGRAM.ProgId = PROGRAM_ABILITY.ProgId
                INNER JOIN agrolink.PROGRAM_MEMBER ON PROGRAM_MEMBER.ProgId = PROGRAM.ProgId
                INNER JOIN agrofactuur.UBN ON UBN.ubnid = PROGRAM_MEMBER.ubnid
                LEFT JOIN agrodata.MEADOWREPORT mr ON mr.UBNnummer = UBN.Bedrijfsnummer AND mr.MR_GrazingDate = '{ds}'
                WHERE ABILITY.AbiId = 3035 AND mr.MR_ReportdateTime IS NULL             
            ");

            DataTable dt = mDatabase.QueryData(mToken, query, MissingSchemaAction.Add);
            return getList<UBN>(dt);
        }

        public bool StoreLORAReport(LORA_GRAZINGREPORT r)
        {
            DBConnectionToken conn = mToken.getLastChildConnection();

            string date = r.GrazingDate.ToString("yyyy-MM-dd");
            string percent = r.PercentageQualifiedForGrazing.ToString(CultureInfo.CreateSpecificCulture("en-GB"));
            string deviation = r.GrazingDeviation.ToString(CultureInfo.CreateSpecificCulture("en-GB"));

            string query = $@"
                REPLACE INTO agrodata.MEADOWREPORT
                (UBNnummer, Tanknummer, MR_GrazingDate, MR_TotNumberDairyCows, MR_TotNumberQualifiedCows, MR_PercentageQualifiedForGrazing, MR_GrazingDay, MR_FarmGrazingTime, MR_Grazing_Deviation, MR_CumulatedGrazingTimeYear, MR_CumulatedGrazingDays)
                VALUES ({r.UBNNumber}, '{r.TankNumber}', '{date}', {r.TotalNumberDairyCows}, {r.TotalNumberQualifiedCows}, {percent}, {r.GrazingDay}, {r.FarmGrazingTime}, {deviation}, {r.CumulatedGrazingTimeYear}, {r.CumulatedGrazingDays});
            ";

            using (MySqlConnection connection = new MySqlConnection(conn.MasterConnectionString))
            {
                connection.Open();
                int rows = MySqlHelper.ExecuteNonQuery(connection, query);
                if (rows != 1 && rows != 2)
                    throw new Exception($"Replace failed for UBN='{r.UBNNumber}' Tankummer='{r.TankNumber}' GrazingDate='{date}': got {rows} rows");
                r.id = mDatabase.GetLastRowId(connection);
                return rows > 0;
            }
        }

        public bool UpdateLORAReportDate(int mrID, DateTime date)
        {
            DBConnectionToken conn = mToken.getLastChildConnection();

            string report = date.ToString("yyyy-MM-dd HH:mm:ss");
            string query = $@"
                UPDATE agrodata.MEADOWREPORT SET MR_ReportdateTime='{report}' WHERE MR_ID={mrID};
            ";
            int rows = mDatabase.ExecuteNonQuery(conn, query);
            return rows > 0;
        }

        public bool SaveTranspla(TRANSPLA pTranspla)
        {
            try
            {
                if (WriteActions.SaveObject(pTranspla) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveTranspla", ex);
                return false;
            }
        }
        public bool SaveTakeEmbr(TAKEEMBR pTakeEmbr)
        {
            try
            {
                if (WriteActions.SaveObject(pTakeEmbr) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("Save TakeEmbr", ex);
                return false;
            }
        }
        public bool SaveTransMit(TRANSMIT pTransMit)
        {
            try
            {
                if (WriteActions.SaveObject(pTransMit) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveTransMStock(TRANSMSTOCK pTransMStock)
        {
            try
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTransMStock);
                if (!isFilledByDb(pTransMStock))
                {
                    if (WriteActions.SaveObject(pTransMStock) < 0) return false;
                    return true;
                }
                else
                {
                    if ((pTransMStock.ProcesComputerId > 0 || pTransMStock.Koppelingnr > 0) && pTransMStock.UbnID > 0)
                    {
                        String[] UpdateParams = new String[]
                        {
                        "UbnID",
                        "ProcesComputerId",
                        "Respondernr"
                        };
                        //cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pTransMStock, UpdateParams);
                        //int ChangedRows = mDatabase.ExecuteNonQueryCommand(cmd);
                        String CommandText = mDatabase.CreateUpdateALLCommandText(pTransMStock, UpdateParams);
                        int ChangedRows = mDatabase.ModifyObject(mToken.getLastChildConnection(), pTransMStock, CommandText);
                        if (ChangedRows == 1) return true;
                        else
                        {
                            if (ChangedRows > 1)
                            {
                                unLogger.WriteWarn(String.Format("More than 1 TransMStock record was updated Query = {0} UbnID {1} ProcesComputerId {2} ", CommandText, pTransMStock.UbnID, pTransMStock.ProcesComputerId));
                            } return false;
                        }
                    }
                    return false;
                }

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveTreatmen(TREATMEN pTreatm)
        {
            //try
            //{
            //    DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTreatm);
            //    cmd.CommandText = mDatabase.CreateInsertCommandText(pTreatm);
            //    if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //    return true;
            //}
            //catch (Exception ex)
            //{
            //    unLogger.WriteDebug("SaveTreatmen", ex);
            //    return false;
            //}
            //=============================================
            if (pTreatm.ArtID == 0 && pTreatm.MedId > 0)
            {

            }
            try
            {
                if (WriteActions.SaveObject(pTreatm) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveTransprt(TRANSPRT pTransprt)
        {
            try
            {
                if (WriteActions.SaveObject(pTransprt) < 0) return false;
                return true;

            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveTransprt", ex);
                return false;
            }
        }
        [Obsolete]
        public bool SaveInlog(String pUsername, String pPassword, DBConnectionToken pToken)
        {
            //if (oldconstructor)
            //{
            //    lock (mDatabase)
            //    {
            //        mToken = pToken;
            //    }
            //}
            //return true;
            return true;
        }

        public bool SaveUbn(UBN pUbn)
        {
            try
            {
                if (WriteActions.SaveObject(pUbn) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveUbn", ex);
                return false;
            }
        }
        public bool SaveWeight(WEIGHT pGew)
        {
            try
            {
                pGew.WeightDate = pGew.WeightDate.Date;
                if (WriteActions.SaveObject(pGew) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveScore(SCORE pScore)
        {
            try
            {
                if (WriteActions.SaveObject(pScore) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool UpdateFokstier(ANIMAL pBull)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBull);
            //cmd.Parameters["@AniId"].Value = null;
            String[] UpdateParams = new String[]
            {
                "BullAiNumber",
                "BullShortName",
                "AniLifeNumber",
                "AniKind"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pBull, "AniId", UpdateParams);
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBull, mDatabase.CreateUpdateCommandText(pBull, "AniId", UpdateParams)) == 1;
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //pBull.AniId = GetLastRowId();
            //return true;
        }

        public bool SaveSeconRace(SECONRAC pSeconRace)
        {
            try
            {
                if (WriteActions.SaveObject(pSeconRace) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool SaveFtpActio(FTPACTIO pFtpactio)
        {
            try
            {
                if (WriteActions.SaveObject(pFtpactio) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveFtpActio", ex);
                return false;
            }

        }
        public bool SaveFtpuser(FTPUSER pFtpuser)
        {
            try
            {
                SettingsDecrypter Encrypt = new SettingsDecrypter();
                Encrypt.EncryptFtpUser(ref pFtpuser);
                bool result = WriteActions.SaveObject(pFtpuser) < 0;
                Encrypt.DecryptFtpUser(ref pFtpuser);
                return result;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveFtpuser", ex);
                return false;
            }
        }
        public bool SaveAnimalPassword(ANIMALPASSWORD pAnimalPassword, int pOldThirdId)
        {
            bool retVal = false;

            if ((pAnimalPassword.AP_AniID == 0 && pAnimalPassword.AP_ThrID == 0) ||
                (pAnimalPassword.AP_Password == "") ||
                (pAnimalPassword.AP_UserName == ""))
            {
                //alle sleutels zijn leeg, niet opslaan
                return false;
            }
            //if (pAnimalPassword.AP_Password.Length < 4 || pAnimalPassword.AP_Password.Length > 15)
            //{
            //    return false;
            //}
            SettingsDecrypter Encrypt = new SettingsDecrypter();
            Encrypt.EncryptAnimalPassword(ref pAnimalPassword);

            try
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalPassword);

                if (!isFilledByDb(pAnimalPassword))
                {
                    ANIMALPASSWORD aPCheckForDuplicateEntry = GetAnimalPassword(pAnimalPassword.AP_AniID, pAnimalPassword.AP_ThrID, pAnimalPassword.AP_ProgramID);
                    if (aPCheckForDuplicateEntry.AP_AniID == pAnimalPassword.AP_AniID && aPCheckForDuplicateEntry.AP_ThrID == pAnimalPassword.AP_ThrID && aPCheckForDuplicateEntry.AP_ProgramID == pAnimalPassword.AP_ProgramID)
                    {
                        //wordt toch al niet opgeslagen
                    }
                    else
                    {
                        //cmd.CommandText = mDatabase.CreateInsertCommandText(pAnimalPassword);
                        if (WriteActions.SaveObject(pAnimalPassword) < 0) retVal = false;
                        retVal = true;
                    }
                }
                else
                {

                    //String[] UpdateParams = new String[] { "AP_Password", "AP_UserName", "AP_ThrID" };
                    String[] pKeyFieldss = new String[] { "AP_AniID", "AP_ThrID", "AP_ProgramID" };

                    //string lUpdateText = " UPDATE ANIMALPASSWORD SET AP_Password = ?AP_Password," +
                    //    " AP_UserName = ?AP_UserName," +
                    //    " AP_ThrID = ?AP_ThrID  " +
                    //    " WHERE AP_AniID=" + pAnimalPassword.AP_AniID.ToString() + " AND AP_ThrID=" + pOldThirdId.ToString();

                    //cmd.CommandText = lUpdateText;

                    //cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pAnimalPassword, pKeyFieldss);
                    if (WriteActions.SaveObject(pAnimalPassword) < 0) retVal = false;
                    retVal = true;
                }

                //retVal = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveAnimalPassword", ex);
            }

            Encrypt.DecryptAnimalPassword(ref pAnimalPassword);

            return retVal;
        }
        public bool SaveThirdLogin(THIRD_LOGIN pThirdLogin)
        {
            bool retVal = false;

            if ((pThirdLogin.farmId == 0) &&
                (pThirdLogin.ubnId == 0) &&
                (pThirdLogin.ThrID == 0) &&
                (pThirdLogin.thkDescriptionId == 0) &&
                (pThirdLogin.programId == 0))
            {
                //alle sleutels zijn leeg, niet opslaan
                return false;
            }

            SettingsDecrypter Encrypt = new SettingsDecrypter();
            Encrypt.EncryptThirdLogin(ref pThirdLogin);

            try
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdLogin);

                if (!isFilledByDb(pThirdLogin))
                {
                    retVal = WriteActions.SaveObject(pThirdLogin) >= 0;
                }
                else
                {
                    String[] UpdateParams = new String[] { "Username", "Password" };
                    String[] pKeys = new String[] { "tlId" };
                    //cmd.CommandText = mDatabase.CreateUpdateCommandTextDP(pThirdLogin, pKeys, UpdateParams);
                    retVal = mDatabase.ModifyObject(mToken, pThirdLogin, mDatabase.CreateUpdateCommandTextDP(pThirdLogin, pKeys, UpdateParams)) == 1;
                }


                //retVal = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveThirdLogin", ex);
            }

            Encrypt.DecryptThirdLogin(ref pThirdLogin);

            return retVal;
        }

        public bool UpdatePartialANIMAL(ANIMAL pAnimal, String[] pUpdateParams)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimal);
            String[] UpdateParams = pUpdateParams;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pAnimal, "AniId", UpdateParams);

            //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);


            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimal, mDatabase.CreateUpdateCommandText(pAnimal, "AniId", UpdateParams)) == 1;
        }

        public bool UpdateANIMALFokker(int AniId, int thrId, int UbnId, int ChangedBy, int SourceId)
        {
            string qry = @"UPDATE ANIMAL SET ThrId = ?thrId, UbnId = ?ubnId, Changed_By = ?changedBy, SourceID = ?sourceId WHERE AniId = ?aniId";

            try
            {
                using (DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
                {
                    cmd.CommandText = qry;

                    mDatabase.AddParameter(cmd, "thrId", thrId);
                    mDatabase.AddParameter(cmd, "ubnId", UbnId);
                    mDatabase.AddParameter(cmd, "changedBy", ChangedBy);
                    mDatabase.AddParameter(cmd, "sourceId", SourceId);
                    mDatabase.AddParameter(cmd, "aniId", AniId);

                    int ret = mDatabase.ExecuteNonQueryCommand(cmd);
                    if (ret <= 0)
                    {
                        unLogger.WriteError("DBMasterQueries.UpdateANIMALFokker: ret <= 0 (" + ret + ")");
                        return false;
                    }
                    return true;
                }

            }
            catch (Exception ex)
            {
                unLogger.WriteError("DBMasterQueries.UpdateANIMALFokker: ex: " + ex);
                return false;
            }
        }

        public bool UpdateANIMAL(int pThrId, ANIMAL pAnimal)
        {
            //Alleen bij schapen
            //Scrapie Status 0 = onbekend -> StatusID 0
            //Scrapie Status 1 = ARR/ARR -> StatusID 1
            //Scrapie Status overig = besmet -> StatusID 2                
            int ProgId = getProgIdByDBName(mToken.getLastChildConnection().getDBNameSlave());
            if (ProgId == 3)
            {
                //Probleem: Het is nu nog mogelijk in de GUI om een andere status toe te kennen bij dezelfde ziekte op dezelfde dag
                //Dit zou geblokkeerd moeten worden want dat mag niet

                //addDierziekte slaat alleen op als het een nieuwe ziekte is
                DIER_ZIEKTE dz = new DIER_ZIEKTE();
                dz.Dz_AniId = pAnimal.AniId;
                dz.Dz_ZiekteId = (int)LABELSConst.DierkZiekte.Scrapie;
                dz.Dz_Datum = pAnimal.AniDatumScrapie;
                if (pAnimal.AniScrapie == 0)
                    dz.Dz_StatusId = 0;
                else if (pAnimal.AniScrapie == 1)
                    dz.Dz_StatusId = 1;
                else
                    dz.Dz_StatusId = 2;
                dz.Dz_SubStatusId = (sbyte)pAnimal.AniScrapie;

                addDierziekte(pThrId, dz, ProgId);
            }

            //TODO DBCHANGE nakijken/testen
            if (WriteActions.SaveObject(pAnimal) < 0) return false;
            return true;

        }
        public bool UpdateBEDRIJF(BEDRIJF pBedrijf)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pBedrijf);
            String[] UpdateParams = new String[]
            {
                "UBNid",
                "Programid",
                "Omschrijving",
                "Wachtwoord"
            };
            if (mDatabase.ModifyObject(mToken, pBedrijf, mDatabase.CreateUpdateCommandText(pBedrijf, "FarmId", UpdateParams)) != 1) return false;
            return true;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pBedrijf, "FarmId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool UpdateANIMALcomment(ANIMAL pAnimal)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimal);
            String[] UpdateParams = new String[]
            {
                "AniComment"
            };

            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimal, mDatabase.CreateUpdateCommandText(pAnimal, "AniId", UpdateParams)) != 1) return false;
            return true;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pAnimal, "AniId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool UpdateBuying(BUYING PBuy)
        {
            if (WriteActions.SaveObject(PBuy) < 0) return false;
            return true;
        }
        public bool UpdateDisease(DISEASE pDiss)
        {
            if (WriteActions.SaveObject(pDiss) < 0) return false;
            return true;
        }
        public bool UpdateDHZ(DHZ pDHZ)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pDHZ);
            String[] Update = new String[]
            {
            "Internalnr",
            "UbnId",
            "FarmNumber",
            "AniId",
            "AniLifenumber",
            "AniWorknumber",
            "AniName",
            "InsDate",
            "ReportDate",
            "ReportTime",
            "Report",
            "BullLifeNumber",
            "BullName",
            "BullAInumber",
            "ChargeNumber",
            "InsInfo",
            "InsNumber",
            "Frozen",
            "ReportTo",
            "Inseminator",
            "Imported",
            "InsAmount",
            "T4CInsemId"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pDHZ, "Internalnr", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;


            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pDHZ, mDatabase.CreateUpdateCommandText(pDHZ, "Internalnr", Update)) == 1;
        }
        public bool UpdateEVENT(EVENT pEvent)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pEvent);
            String[] UpdateParams = new String[]
            {
                "EveDate",
                "RemId",
                "ThirdId",
                "EveMutationDate",
                "EveMutationTime",
                "EveComment",
                "EveOrder",
                "EveMutationBy"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pEvent, "EventId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;

            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pEvent, mDatabase.CreateUpdateCommandText(pEvent, "EventId", UpdateParams)) == 1;
        }

        [Obsolete("gebruik deze niet: medicijnen worden via ARTIKEL ingelezen")]
        public bool UpdateMEDICINE(MEDICINE pMed)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMed);
            String[] UpdateParams = new String[]
            {
                "MedName",
                "MedActiveProduct",
                "MedDaysWaitingMilk",
                "MedDaysWaitingMeat",
                "MedUnit",
                "MedUnitVolume",
                "MedPrice",
                "MedPriceEuro",
                "MedPriceUnit",
                "MedCurrencyEuro",
                "MedHoursWaitingMilk",
                "MedHoursWaitingMeat",
                "MedCode",
                "MedBatchNumber",
                "MedThrId",
                "MedFunction",
                "MedReg",
                "MedUDD",
                "MedDisGroup",
                "MedDaysTreat",
                "MedApply",
                "MedPreference",
                "MedHoursRepeat",
                "MedMP3file",
                "MedAmountPerXKg",
                "MedKgAliveWeight"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pMed, "MedId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
            if (mDatabase.ModifyObject(mToken, pMed, mDatabase.CreateUpdateCommandText(pMed, "MedId", UpdateParams)) != 1) return false;
            return true;
        }
        public bool UpdateMovement(MOVEMENT PMov)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), PMov);
            String[] UpdateParams = new String[]
            {
                "AniId",
                "MovDate",
                "MovOrder",
                "MovKind",
                "ThrId",
                "UbnId",
                "RemId",
                "ReportDate",
                "Groupnr",
                "MovComment",
                "MovMutationDate",
                "MovMutationTime",
                "DateIRreported",
                "MovMutationBy",
                "MovTime",
                "MovThridExecutive",
                "MovThird_UBNid",
                "Changed_By",
                "SourceID"
            };

            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), PMov, mDatabase.CreateUpdateCommandText(PMov, "MovId", UpdateParams)) != 1) return false;
            return true;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(PMov, "MovId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool UpdateMutationReport(MUTATION pMutation)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMutation);
            String[] Update = new String[]
            {
                "Report",
                "MeldResult",
                "Changed_By",
                "SourceId"
            };

            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pMutation, mDatabase.CreateUpdateCommandText(pMutation, "Internalnr", Update)) != 1) return false;
            return true;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pMutation, "Internalnr", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
        }
        public bool UpdateMutation(MUTATION pMutation)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMutation);
            String[] Update = new String[]
            {
            "Internalnr",
            "Lifenumber",
            "Worknumber",
            "Name",
            "CodeMutation",
            "Sex",
            "Haircolor",
            "AniHaircolor_Memo",
            "UbnId",
            "Farmnumber" ,
            "LifenumberMother",
            "MutationDate",
            "MutationTime",
            "ReportDate",
            "ReportTime",
            "Speciality",
            "ISONumber",
            "Report",
            "Within7days",
            "Program",
            "FarmNumberFrom",
            "FarmNumberTo",
            "LifeNumberUnique",
            "IDRBirthDate",
            "IDRLossDate",
            "IDRRace",
            "LifeNumberFather",
            "RegistrationCard",
            "ReportForBuyer",
            "Returnresult",
            "MeldResult",
            "MovId",
            "EventId",
            "VersienrVertrekluik",
            "Slaughter",
            "MotherBoughtRecent",
            "Vervoersnr",
            "Nling",
            "Race",
            "ET" ,
            "LossDate",
            "AlternateLifeNumber",
            "MeldingNummer",
            "CountryCodeDepart",
            "CountryCodeBirth",
            "LifenrOrigin",
            "Subsidy",
            "MeatScore",
            "CalvingEase",
            "Weight",
            "CullingReason",
            "LicensePlate",
            "SanitairyUnit",
            "AniState",
            "Purchaser",
            "AniSubType",
            "RendacAniType",
            "SendTo",
            "T4CTransferId"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pMutation, "Internalnr", Update);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;

            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pMutation, mDatabase.CreateUpdateCommandText(pMutation, "Internalnr", Update)) != 1) return false;
            return true;
        }
        public bool UpdateFtpActio(FTPACTIO pFtpactio)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFtpactio);
            String[] UpdateParams = new String[]
            {
                "DirectoryFrom",
                "DirectoryTo",
                "Direction",
                "AfterTransfer",
                "ReplaceDirectory",
                "UseOriginalName",
                "UseExtention",
                "WaitTime",
                "Overwrite"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pFtpactio, "ActionNumber", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
            if (mDatabase.ModifyObject(mToken, pFtpactio, mDatabase.CreateUpdateCommandText(pFtpactio, "ActionNumber", UpdateParams)) != 1) return false;
            return true;
        }
        public bool UpdateFtplist(FTPLIST pFtplist)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFtplist);
            String[] UpdateParams = new String[]
            {
                "FtpHostName",
                "PassiveMode"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pFtplist, "FtpNumber", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;

            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pFtplist, mDatabase.CreateUpdateCommandText(pFtplist, "FtpNumber", UpdateParams)) != 1) return false;
            return true;
        }
        public bool UpdateFtpuser(FTPUSER pFtpuser)
        {
            SettingsDecrypter Encrypt = new SettingsDecrypter();
            Encrypt.EncryptFtpUser(ref pFtpuser);
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFtpuser);
            String[] UpdateParams = new String[]
            {
                "UserName",
                "Password"
            };
            String[] pkeys = new String[]
            {
                "FtpNumber",
                "UbnId"
            };
            //cmd.CommandText = mDatabase.CreateUpdateCommandTextDP(pFtpuser, pkeys, UpdateParams);

            bool result = mDatabase.ModifyObject(mToken.getLastChildConnection(), pFtpuser, mDatabase.CreateUpdateCommandTextDP(pFtpuser, pkeys, UpdateParams)) != 1;
            Encrypt.DecryptFtpUser(ref pFtpuser);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
            return result;

        }
        public bool UpdateThirdLogin(THIRD_LOGIN pThirdLogin)
        {
            return SaveThirdLogin(pThirdLogin);
        }

        public bool UpdateStatus(STATUS pStatus)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pStatus);
            //String[] UpdateParams = new String[]
            //{
            //    "Status"
            //};
            //String[] pkeys = new String[] 
            //{
            //    "AniId",
            //    "EventId"
            //};
            //cmd.CommandText = mDatabase.CreateUpdateCommandTextDP(pStatus, pkeys, UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;

            if (WriteActions.SaveObject(pStatus) < 0) return false;
            return true;
        }
        public bool UpdateTreatmen(TREATMEN pTreatm)
        {
            //    DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTreatm);
            //    String[] UpdateParams = new String[]
            //    {
            //        "MedId",
            //        "TreKind",
            //        "TreQuantity",
            //        "TrePrice",
            //        "TrePriceEuro",
            //        "TreCurrencyEuro",
            //        "TreDaysForControl",
            //        "TreDaysWaitingMilk",
            //        "TreDaysWaitingMeat",
            //        "TreHoursWaitingMilk",
            //        "TreHoursWaitingMeat",
            //        "TreMedUnit",
            //        "TreMedUnitVolume",
            //        "TreMedPrice",
            //        "TreMedPriceEuro",
            //        "TreMedCurrencyEuro",
            //        "TreKindAnimal",
            //        "TreDiseaseId",
            //        "TreMedFunction",
            //        "TreMedReg",
            //        "TreMedUDD",
            //        "TreMedDisGroup",
            //        "TreMedApply",
            //        "TreMedDaysTreat",
            //        "TreGroupTreat",
            //        "TreMedBatchNumber",
            //        "TreMedFromStock",
            //        "TreMedHoursRepeat",
            //        "TreTime",
            //        "TreMedPlannr",
            //        "TreMedPlanUniqueNr"
            //    };
            //    String[] pkeys = new String[] 
            //    {
            //        "AniId",
            //        "EventId"
            //    };
            //    cmd.CommandText = mDatabase.CreateUpdateCommandTextDP(pTreatm, pkeys, UpdateParams);
            //    if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //    return true;
            if (WriteActions.SaveObject(pTreatm) < 0) return false;
            return true;
        }
        [Obsolete("Parameter verzameling niet up to date. Gebruik saveThird")]
        public bool UpdateThirdOld(THIRD pThird)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThird);
            String[] UpdateParams = new String[]
            {
                 "ThrFarmNumber",
                 "ThrSecondName",
                 "ThrStreet1",
                 "ThrStreet2",
                 "ThrZipCode",
                 "ThrPhoneNumber",
                 "ThrMobileNumber",
                 "ThrFirstName",
                 "ThrCompanyName",
                 "ThrCity",
                 "ThrCountry",
                 "ThrFaxNumber",
                 "ThrEmail",
                 "ThrStamboeknr",
                 "ThrKvkNummer",
                 "Thr_Brs_Number"

            };
            String CommandText = mDatabase.CreateUpdateCommandText(pThird, "ThrId", UpdateParams);
            return mDatabase.ModifyObject(mToken, pThird, CommandText) == 1;
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool UpdateThrCreatorUbnIdThrID(THIRD pThird)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThird);
            String[] UpdateParams = new String[]
            {
                 "ThrCreatorUbnId",
                 "ThrCreatorThrID"
            };

            if (mDatabase.ModifyObject(mToken, pThird, mDatabase.CreateUpdateCommandText(pThird, "ThrId", UpdateParams)) != 1) return false;
            return true;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pThird, "ThrId", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }
        public bool UpdateUBN(UBN pUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pUbn);
            String[] UpdateParams = new String[]// //"UBNint",
            {
                "Bedrijfsnummer",
                "Bedrijfsnaam",
                "BRSnummer",
                "UBNlong",
                "Extranummer1",
                "ThrID"
            };
            if (mDatabase.ModifyObject(mToken, pUbn, mDatabase.CreateUpdateCommandText(pUbn, "UBNid", UpdateParams)) != 1) return false;
            return true;
            //cmd.CommandText = mDatabase.CreateUpdateCommandText(pUbn, "UBNid", UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }

        public bool DeleteAnalyse(ANALYSE pAnalyse)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnalyse);
            String[] DeleteParams = new String[]
             {
                 "AniId",
                 "AnaMilkDate",
                 "UbnId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pAnalyse, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnalyse, mDatabase.CreateSetNegativeCommandText(pAnalyse, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimal(ANIMAL pAnimal)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimal);
            String[] DeleteParams = new String[]
             {
                 "AniId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pAnimal, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimal, mDatabase.CreateSetNegativeCommandText(pAnimal, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalShareInfo(ANIMAL_SHARE_INFO pAnimalShareInfo)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalShareInfo);
            String[] DeleteParams = new String[]
             {
                 "AniID"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pAnimalShareInfo, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalShareInfo, mDatabase.CreateSetNegativeCommandText(pAnimalShareInfo, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalCategory(ANIMALCATEGORY pAnimalCategory)
        {
            StringBuilder bld = new StringBuilder();
            bld.AppendFormat(" SELECT * FROM ANIMALCATEGORY WHERE AniId={0} AND FarmId={1} AND deleted=1 ", -pAnimalCategory.AniId, -pAnimalCategory.FarmId);
            bool alnegatief = false;
            try
            {
                DataTable m = mDatabase.QueryData(mToken.getLastChildConnection(), bld);
                if (m.Rows.Count > 0)
                {
                    alnegatief = true;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError($"ERROR: DELETE FROM ANIMALCATEGORY WHERE AniId={-pAnimalCategory.AniId} AND FarmId={-pAnimalCategory.FarmId} {ex.Message}");
            }
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalCategory);
            String[] DeleteParams = new String[]
             {
                 "FarmId",
                 "AniId",
                 "deleted"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pAnimalCategory, DeleteParams);

            try
            {
                int ret = 0;
                if (alnegatief)
                {
                    ret = mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalCategory, mDatabase.CreateDeleteCommandText(pAnimalCategory, DeleteParams));
                }
                else
                {
                    ret = mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalCategory, mDatabase.CreateSetNegativeCommandText(pAnimalCategory, DeleteParams));
                }
                //int ret = mDatabase.ExecuteNonQueryCommand(cmd);
                return ret >= 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalPassword(ANIMALPASSWORD pAnimalPassWord)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalPassWord);
            String[] DeleteParams = new String[]
             {
                 "AP_AniID",
                 "AP_ThrID",
                 "AP_ProgramID"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pAnimalPassWord, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalPassWord, mDatabase.CreateSetNegativeCommandText(pAnimalPassWord, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalPredikaat(ANIMALPREDIKAAT pAnimalPredikaat)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalPredikaat);
            String[] DeleteParams = new String[]
             {
                 "PreAniId",
                 "PreBegindatum"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAnimalPredikaat, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalPredikaat, mDatabase.CreateDeleteCommandText(pAnimalPredikaat, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalAfwijking(ANIMAL_AFWIJKING pAnimalAfwijking)
        {
            pAnimalAfwijking.Datum = pAnimalAfwijking.Datum.Date;
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAnimalAfwijking);
            String[] DeleteParams = new String[]
             {
                 "AniId",
                 "Datum",
                 "AfwijkingID",
                 "AA_Type"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAnimalAfwijking, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAnimalAfwijking, mDatabase.CreateDeleteCommandText(pAnimalAfwijking, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteAnimalAfwijkingen(int pAniId, int aa_type)
        {
            if (pAniId > 0)
            {
                ANIMAL_AFWIJKING pAfwijkingdummy = new ANIMAL_AFWIJKING();
                pAfwijkingdummy.AniId = pAniId;
                pAfwijkingdummy.AA_Type = aa_type;
                //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pAfwijkingdummy);
                String[] DeleteParams = new String[]
                {
                     "AniId",
                     "AA_Type"
                };
                //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAfwijkingdummy, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken.getLastChildConnection(), pAfwijkingdummy, mDatabase.CreateDeleteCommandText(pAfwijkingdummy, DeleteParams)) == 1;
                    // return mDatabase.ExecuteNonQueryCommand(cmd) > 0;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }
        public bool DeleteAuthGroupsFarm(AUTH_GROUPS_FARM pAuthGroupsFarm)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken, pAuthGroupsFarm);
            String[] DeleteParams = new String[]
             {
                 "FarmID",
                 "GroupID"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pAuthGroupsFarm, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pAuthGroupsFarm, mDatabase.CreateDeleteCommandText(pAuthGroupsFarm, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteBedrijf(BEDRIJF pBedrijf)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pBedrijf);
            String[] DeleteParams = new String[]
             {
                 "FarmId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pBedrijf, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pBedrijf, mDatabase.CreateSetNegativeCommandText(pBedrijf, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteBirth(BIRTH pBirth)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBirth);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pBirth, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBirth, mDatabase.CreateSetNegativeCommandText(pBirth, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteBlood(BLOOD pBlood)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBlood);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pBlood, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBlood, mDatabase.CreateSetNegativeCommandText(pBlood, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteBullUbn(BULLUBN pBullUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBullUbn);
            String[] DeleteParams = new String[]
             {
                 "FarmId",
                 "BullId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pBullUbn, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBullUbn, mDatabase.CreateDeleteCommandText(pBullUbn, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteBuying(BUYING pBuy)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBuy);
            String[] DeleteParams = new String[]
             {
                 "MovId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pBuy, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBuy, mDatabase.CreateSetNegativeCommandText(pBuy, DeleteParams)) == 1;
                // return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteDisease(DISEASE pDisease)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pDisease);
            String[] DeleteParams = new String[]
             {
                 "AniId",
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pDisease, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pDisease, mDatabase.CreateSetNegativeCommandText(pDisease, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteDHZ(DHZ pDHZ)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pDHZ);
            String[] DeleteParams = new String[]
              {
                  "Internalnr"
              };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pDHZ, DeleteParams);
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pDHZ, mDatabase.CreateDeleteCommandText(pDHZ, DeleteParams)) == 1;
        }
        public bool DeleteDryoff(DRYOFF pDryoff)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pDryoff);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pDryoff, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pDryoff, mDatabase.CreateSetNegativeCommandText(pDryoff, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteEvent(EVENT pEvent)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pEvent);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pEvent, DeleteParams);
            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pEvent, mDatabase.CreateSetNegativeCommandText(pEvent, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteGestatio(GESTATIO pGestatio)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pGestatio);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pGestatio, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pGestatio, mDatabase.CreateSetNegativeCommandText(pGestatio, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteGroupId(GROUPID pGrid)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pGrid);
            String[] DeleteParams = new String[]
             {
                 "GroupId",
                 "AniId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pGrid, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pGrid, mDatabase.CreateDeleteCommandText(pGrid, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteGroups(GROUPS pGroup)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pGroup);
            String[] DeleteParams = new String[]
             {
                 "GroupId",
                 "FarmId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pGroup, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pGroup, mDatabase.CreateDeleteCommandText(pGroup, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteGRZTOGTH(GRZTOGTH pGrztogth)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pGrztogth);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pGrztogth, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pGrztogth, mDatabase.CreateSetNegativeCommandText(pGrztogth, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteInheat(INHEAT pInHeat)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pInHeat);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pInHeat, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pInHeat, mDatabase.CreateSetNegativeCommandText(pInHeat, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteInsemin(INSEMIN pInsem)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pInsem);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pInsem, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pInsem, mDatabase.CreateSetNegativeCommandText(pInsem, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteLoss(LOSS pLoss)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pLoss);
            String[] DeleteParams = new String[]
             {
                 "MovId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pLoss, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pLoss, mDatabase.CreateSetNegativeCommandText(pLoss, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteLifenrByOwner_ThrID(int pOwner_ThrID, LIFENR pLifenr)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pLifenr);
            string Commandtext = "DELETE FROM LIFENR WHERE LifLifenr LIKE '" + pLifenr.LifLifenr + "' ";
            //cmd.CommandText = Commandtext;
            try
            {
                return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), Commandtext) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteLifenr(int pFarmId, LIFENR pLifenr)
        {
            BEDRIJF bDeze = GetBedrijfById(pFarmId);
            if (bDeze.ProgId == 3 || bDeze.ProgId == 5)
            {
                bool ret = false;
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pLifenr);
                string Commandtext1 = "DELETE FROM agrobase_sheep.LIFENR WHERE LifLifenr LIKE '" + pLifenr.LifLifenr + "' ";
                string Commandtext2 = "DELETE FROM agrobase_goat.LIFENR WHERE LifLifenr LIKE '" + pLifenr.LifLifenr + "' ";
                try
                {
                    //cmd.CommandText = Commandtext1;
                    ret = mDatabase.ExecuteNonQuery(mToken, Commandtext1) == 1;
                    //ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                    ret = mDatabase.ExecuteNonQuery(mToken, Commandtext2) == 1;
                    //cmd.CommandText = Commandtext2;
                    //ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
                return ret;
            }
            else
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pLifenr);
                string Commandtext = "DELETE FROM LIFENR WHERE LifLifenr LIKE '" + pLifenr.LifLifenr + "' ";
                //cmd.CommandText = Commandtext;
                try
                {
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                    return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), Commandtext) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }




            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pLifenr, DeleteParams);

        }
        public bool DeleteLifenr(int pFarmId, String pFullLifeNr)
        {
            BEDRIJF bDeze = GetBedrijfById(pFarmId);
            if (bDeze.ProgId == 3 || bDeze.ProgId == 5)
            {
                bool ret = false;
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = CommandType.Text;
                string Commandtext1 = String.Format("DELETE FROM agrobase_sheep.LIFENR WHERE Concat(LifCountrycode, ' ', LifLifenr) = '{0}'", pFullLifeNr);
                string Commandtext2 = String.Format("DELETE FROM agrobase_goat.LIFENR WHERE Concat(LifCountrycode, ' ', LifLifenr) = '{0}'", pFullLifeNr);
                try
                {
                    //cmd.CommandText = Commandtext1;
                    //ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                    ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), Commandtext1) == 1;
                    //cmd.CommandText = Commandtext2;
                    //ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                    ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), Commandtext2) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
                return ret;
            }
            else
            {
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = CommandType.Text;
                string Commandtext = String.Format("DELETE FROM LIFENR WHERE Concat(LifCountrycode, ' ', LifLifenr) = '{0}'", pFullLifeNr);
                //cmd.CommandText = Commandtext;
                try
                {
                    return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), Commandtext) == 1;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }

        }

        public bool DeleteLifeNumbersByFarmId(int pFarmId, int pProgId)
        {
            if (pFarmId > 0 && pProgId > 0)
            {
                if (pProgId == 3 || pProgId == 5)
                {
                    bool ret = false;
                    StringBuilder bld1 = new StringBuilder();
                    bld1.Append(" DELETE FROM agrobase_sheep.LIFENR ");
                    bld1.Append(" WHERE agrobase_sheep.LIFENR.FarmNumber= ");
                    bld1.Append(" ( ");
                    bld1.Append(" SELECT agrofactuur.UBN.Bedrijfsnummer FROM agrofactuur.UBN ");
                    bld1.Append(" LEFT JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.UbnId = agrofactuur.UBN.UbnId ");
                    bld1.AppendFormat("  WHERE agrofactuur.BEDRIJF.FarmId={0}", pFarmId);
                    bld1.Append(" ) ");
                    StringBuilder bld2 = new StringBuilder();
                    bld2.Append(" DELETE FROM agrobase_goat.LIFENR ");
                    bld2.Append(" WHERE agrobase_goat.LIFENR.FarmNumber= ");
                    bld2.Append(" ( ");
                    bld2.Append(" SELECT agrofactuur.UBN.Bedrijfsnummer FROM agrofactuur.UBN  ");
                    bld2.Append(" LEFT JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.UbnId = agrofactuur.UBN.UbnId ");
                    bld2.AppendFormat("  WHERE agrofactuur.BEDRIJF.FarmId={0}", pFarmId);
                    bld2.Append(" ) ");
                    //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());

                    try
                    {
                        //cmd.CommandText = bld1.ToString();
                        //ret = mDatabase.ExecuteNonQueryCommand(cmd) > 1;
                        ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), bld1.ToString()) > 1;

                        //cmd.CommandText = bld2.ToString();
                        //ret = mDatabase.ExecuteNonQueryCommand(cmd) > 1;
                        ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), bld2.ToString()) > 1;
                    }
                    catch (Exception ex)
                    {
                        unLogger.WriteError(ex.Message, ex);
                        return false;
                    }
                    return ret;
                }
                else
                {

                    StringBuilder bld = new StringBuilder();
                    bld.Append(" DELETE FROM LIFENR ");
                    bld.Append(" WHERE LIFENR.FarmNumber= ");
                    bld.Append(" ( ");
                    bld.Append(" SELECT agrofactuur.UBN.Bedrijfsnummer FROM agrofactuur.UBN ");
                    bld.Append(" LEFT JOIN agrofactuur.BEDRIJF ON agrofactuur.BEDRIJF.UbnId = agrofactuur.UBN.UbnId ");
                    bld.AppendFormat("  WHERE agrofactuur.BEDRIJF.FarmId={0}", pFarmId);
                    bld.Append(" ) ");

                    //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                    //cmd.CommandText = bld.ToString();
                    try
                    {
                        return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), bld.ToString()) > 1;
                        //return mDatabase.ExecuteNonQueryCommand(cmd) > 1;
                    }
                    catch (Exception ex)
                    {
                        unLogger.WriteError(ex.Message, ex);
                        return false;
                    }
                }
            }
            else { return false; }
        }

        public bool DeleteLifeNumbersByOwner_ThrID(int pOwner_ThrID)
        {
            if (pOwner_ThrID > 0)
            {
                StringBuilder bld = new StringBuilder();
                bld.Append(" DELETE FROM LIFENR ");
                bld.AppendFormat(" WHERE LIFENR.owner_ThrID=", pOwner_ThrID);


                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandText = bld.ToString();
                try
                {
                    //return mDatabase.ExecuteNonQueryCommand(cmd) > 1;
                    return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), bld.ToString()) > 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }
        public bool DeleteMovement(MOVEMENT pMovement)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMovement);

            String[] DeleteParams = new String[]
             {
                 "MovId",
                 "AniId"

             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pMovement, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMovement, mDatabase.CreateSetNegativeCommandText(pMovement, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMoveout(MOVEOUT pMoveout)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMoveout);
            String[] DeleteParams = new String[]
             {
                 "FarmId",
                 "AniId",
                 "MovId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMoveout, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMoveout, mDatabase.CreateDeleteCommandText(pMoveout, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        [Obsolete("gebruik DeleteArticleUbn")]
        public bool DeleteMedicineUbn(MEDICINEUBN pMedUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMedUbn);
            String[] DeleteParams = new String[]
             {
                 "MedId",
                 "UBNId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMedUbn, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pMedUbn, mDatabase.CreateDeleteCommandText(pMedUbn, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMedplanM(MEDPLANM pMedplandM)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMedplandM);
            String[] DeleteParams = new String[]
             {
                 "Internalnr"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMedplandM, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMedplandM, mDatabase.CreateDeleteCommandText(pMedplandM, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMedplanD(MEDPLAND pMedplandD)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMedplandD);
            String[] DeleteParams = new String[]
             {
                 "Internalnr",
                 "MedId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMedplandD, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMedplandD, mDatabase.CreateDeleteCommandText(pMedplandD, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMessage(MESSAGES pMessage)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMessage);
            String[] DeleteParams = new String[]
             {
                 "MesID"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pMessage, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pMessage, mDatabase.CreateSetNegativeCommandText(pMessage, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMestnr(MESTNR pMestnummer)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMestnummer);
            String[] DeleteParams = new String[]
             {
                 "Mestnummer"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMestnummer, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pMestnummer, mDatabase.CreateDeleteCommandText(pMestnummer, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMestTank(MESTTANK pMesttank)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMesttank);
            String[] DeleteParams = new String[]
             {
                 "Mestnummer"
                 ,"Tanknummer"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMesttank, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pMesttank, mDatabase.CreateDeleteCommandText(pMesttank, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMestUbn(MESTUBN pMestUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMestUbn);
            String[] DeleteParams = new String[]
             {
                 "Mestnummer",
                 "FarmNumber"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMestUbn, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pMestUbn, mDatabase.CreateDeleteCommandText(pMestUbn, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteMutation(MUTATION pMutation)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMutation);
            String[] DeleteParams = new String[]
             {
                 "Internalnr",
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMutation, DeleteParams);

            try
            {
                //int AffectedRows = mDatabase.ExecuteNonQueryCommand(cmd);
                int AffectedRows = mDatabase.ModifyObject(mToken.getLastChildConnection(), pMutation, mDatabase.CreateDeleteCommandText(pMutation, DeleteParams));
                if (AffectedRows != 1)
                {
                    unLogger.WriteWarnFormat("DB", "DeleteMutation command deleted {0} rows", AffectedRows);
                }
                return AffectedRows > 0;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMutalog(MUTALOG pMutalog)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMutalog);
            String[] DeleteParams = new String[]
             {
                 "Internalnr",
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMutalog, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pMutalog, mDatabase.CreateDeleteCommandText(pMutalog, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeletePlace(PLACE pPlace)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pPlace);
            String[] DeleteParams = new String[]
             {
                 "MovId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pPlace, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pPlace, mDatabase.CreateSetNegativeCommandText(pPlace, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteRemark(REMARK pRemark)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pRemark);
            if (pRemark.UbnId == 0 && pRemark.Farmid > 0)
            {
                BEDRIJF b = GetBedrijfById(pRemark.Farmid);
                pRemark.UbnId = b.UBNid;

            }
            if (pRemark.UbnId <= 0) { unLogger.WriteError($" DELETE REMARK: UbnId=0 voor FarmId={pRemark.Farmid} "); return false; }
            String[] DeleteParams = new String[]
            {
                "Farmid",
                "LabKind",
                "LabId",
                "RemId"
            };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pRemark, DeleteParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pRemark, mDatabase.CreateDeleteCommandText(pRemark, DeleteParams)) == 1;

        }
        public bool DeleteSale(SALE pSale)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pSale);
            String[] DeleteParams = new String[]
             {
                 "MovId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pSale, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pSale, mDatabase.CreateSetNegativeCommandText(pSale, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteScore(SCORE pScore)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pScore);
            String[] DeleteParams = new String[]
             {
                 "AniId" ,
                 "ScDate"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pScore, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pScore, mDatabase.CreateDeleteCommandText(pScore, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteSeconRace(SECONRAC pSeconRace)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pSeconRace);
            String[] DeleteParams = new String[]
             {
                 "AniId",
                 "RacId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pSeconRace, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pSeconRace, mDatabase.CreateDeleteCommandText(pSeconRace, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteStatus(STATUS pStatus)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pStatus);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pStatus, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pStatus, mDatabase.CreateSetNegativeCommandText(pStatus, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteTranspla(TRANSPLA pTranspla)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTranspla);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            if (pTranspla.AniIdFather > 0 && pTranspla.AniIdMother > 0)
            {
                DeleteParams = new String[]
             {
                 "EventId",
                 "AniIdFather",
                 "AniIdMother"
             };
            }
            else if (pTranspla.AniIdMother > 0)
            {
                DeleteParams = new String[]
             {
                 "EventId",
                 "AniIdMother"
             };
            } if (pTranspla.AniIdFather > 0)
            {
                DeleteParams = new String[]
             {
                 "EventId",
                 "AniIdFather"
             };
            }
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pTranspla, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pTranspla, mDatabase.CreateSetNegativeCommandText(pTranspla, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteTakeEmbr(TAKEEMBR pTakeEmbr)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTakeEmbr);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            if (pTakeEmbr.AniIdFather > 0)
            {
                DeleteParams = new String[]
             {
                 "EventId",
                 "AniIdFather"
             };
            }
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pTakeEmbr, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;

                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pTakeEmbr, mDatabase.CreateSetNegativeCommandText(pTakeEmbr, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="pTransMit"></param>
        /// <param name="changedBy"></param>
        /// <param name="sourceId"></param>
        /// <returns></returns>
public bool DeleteTransmit(TRANSMIT pTransMit, int changedBy = 0, int sourceId = 0)
        {
            if (pTransMit.UbnID > 0)
            {
                List<TRANSMSTOCK> AllstockPositive = Responders.GetTransmitterVoorraad2(pTransMit.UbnID);
                List<TRANSMSTOCK> AllstockNegative = Responders.GetTransmitterVoorraad2(-pTransMit.UbnID);

                var deleted = from n in AllstockNegative where n.Respondernr == pTransMit.TransmitterNumber && n.ProcesComputerId == pTransMit.ProcesComputerId select n;

                if (deleted.Count() > 0)
                {
                    var check = from n in AllstockPositive where n.Respondernr == pTransMit.TransmitterNumber && n.ProcesComputerId == pTransMit.ProcesComputerId select n;
                    if (!check.Any())//Anders duplicate entrykey error
                    {
                        TRANSMSTOCK mNew = new TRANSMSTOCK();
                        mNew.Changed_By = changedBy;
                        mNew.SourceID = changedBy;

                        mNew.Koppelingnr = pTransMit.Koppelnr;
                        mNew.ProcesComputerId = pTransMit.ProcesComputerId;
                        mNew.Respondernr = pTransMit.TransmitterNumber;
                        mNew.UbnID = pTransMit.UbnID;
                        int maxlength = mNew.Respondernr.Length;
                        if (maxlength > 5)
                        {
                            mNew.RespSort = mNew.Respondernr.Substring(mNew.Respondernr.Length - 5, 5);
                        }
                        else { mNew.RespSort = mNew.Respondernr; }
                        SaveTransMStock(mNew);
                        //WriteActions.GetDataBase().QueryData(mToken.getLastChildConnection(), lQuery);
                    }
                }
                else
                {
                    var check = from n in AllstockPositive where n.Respondernr == pTransMit.TransmitterNumber && n.ProcesComputerId == pTransMit.ProcesComputerId select n;
                    if (check.Count() == 0)
                    {
                        TRANSMSTOCK mNew = new TRANSMSTOCK();
                        mNew.Changed_By = changedBy;
                        mNew.SourceID = changedBy;

                        mNew.Koppelingnr = pTransMit.Koppelnr;
                        mNew.ProcesComputerId = pTransMit.ProcesComputerId;
                        mNew.Respondernr = pTransMit.TransmitterNumber;
                        mNew.UbnID = pTransMit.UbnID;
                        int maxlength = mNew.Respondernr.Length;
                        if (maxlength > 5)
                        {
                            mNew.RespSort = mNew.Respondernr.Substring(mNew.Respondernr.Length - 5, 5);
                        }
                        else { mNew.RespSort = mNew.Respondernr; }
                        SaveTransMStock(mNew);
                    }
                }

                if ((pTransMit.farmid > 0 || pTransMit.UbnID > 0) && pTransMit.TransmitterNumber != "" && pTransMit.AniId > 0)
                {
                    List<TRANSMIT> trans = GetTransmitByAniIdFarmId2(pTransMit.farmid, pTransMit.UbnID, pTransMit.AniId);

                    var delTrans = new List<TRANSMIT>();
                    try
                    {
                        bool delOk = true;

                        foreach (TRANSMIT tr in trans)
                        {
                            if ((tr.ProcesComputerId == pTransMit.ProcesComputerId || tr.Koppelnr == pTransMit.Koppelnr) && tr.TransmitterNumber == pTransMit.TransmitterNumber)
                            {
                                String[] DeleteParams = new String[]
                            {
                                "AniId",
                                "farmid",
                                "ProcesComputerId",
                                "TransmitterNumber"
                            };
                                if (tr.UbnID > 0)
                                {
                                    DeleteParams = new String[]
                                    {
                                        "AniId",
                                        "UbnID",
                                        "ProcesComputerId",
                                        "TransmitterNumber"
                                    };
                                }

                                string qry = mDatabase.CreateDeleteCommandText(tr, DeleteParams);
                                int ret = mDatabase.ModifyObject(mToken.getLastChildConnection(), tr, qry);

                                if (ret < 1 && !transExist(delTrans, tr))
                                {
                                    unLogger.WriteError($"DeleteTransmit Error: AniId: {tr.AniId} FarmId: {tr.farmid} UbnId: {tr.UbnID} ProcesComputerId: {tr.ProcesComputerId} TransmitterNumber: {tr.TransmitterNumber} ");
                                    unLogger.WriteError($"DeleteTransmit Error: '{qry}'");
                                    delOk = false;
                                }
                                else
                                {
                                    delTrans.Add(tr);
                                }
                            }
                        }

                        return delOk;
                    }
                    catch (Exception ex)
                    {
                        unLogger.WriteError(ex.Message, ex);
                        return false;
                    }
                }
            }
            return false;
        }

        private bool transExist(IEnumerable<TRANSMIT> deltrans, TRANSMIT tr)
        {
            if (tr.UbnID > 0)
            {
                return deltrans.Any(t => t.AniId == tr.AniId && t.UbnID == tr.UbnID && t.ProcesComputerId == tr.ProcesComputerId && t.TransmitterNumber == tr.TransmitterNumber);
            }
            else
            {
                return deltrans.Any(t => t.AniId == tr.AniId && t.farmid == tr.farmid && t.ProcesComputerId == tr.ProcesComputerId && t.TransmitterNumber == tr.TransmitterNumber);
            }
        }

        public bool DeleteTransmStockNumbers(int pUbnID, int pProcesComputerId_Koppelnr, List<string> pTransmitNumbers)
        {
            if (pTransmitNumbers.Count() > 0 && pUbnID > 0 && pProcesComputerId_Koppelnr > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.AppendFormat(" UPDATE TRANSMSTOCK SET TRANSMSTOCK.UbnID=-" + pUbnID.ToString() + " WHERE TRANSMSTOCK.UbnID={0}    ", pUbnID);
                lQuery.AppendFormat(" AND TRANSMSTOCK.Respondernr IN ({0})", stringListToString(pTransmitNumbers));

                lQuery.AppendFormat(" AND (TRANSMSTOCK.ProcesComputerId = {0} OR TRANSMSTOCK.Koppelingnr = {1} )", pProcesComputerId_Koppelnr, pProcesComputerId_Koppelnr);

                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandText = lQuery.ToString();
                try
                {
                    return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), lQuery.ToString()) > 0;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) > 0;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }
        public bool DeleteTransmStock(TRANSMSTOCK pTransMStock)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTransMStock);
            if (pTransMStock.UbnID > 0 && pTransMStock.ProcesComputerId > 0 && pTransMStock.Respondernr != "")
            {
                String[] DeleteParams = new String[]
                 {
                      "UbnID",
                      "ProcesComputerId",
                      "Respondernr"
                 };
                if (pTransMStock.Koppelingnr > 0)
                {
                    DeleteParams = new String[]
                 {
                      "UbnID",
                      "ProcesComputerId",
                      "Respondernr",
                      "Koppelingnr"
                 };
                }
                //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pTransMit, DeleteParams);
                //cmd.CommandText = mDatabase.CreateDeleteCommandText(pTransMStock, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken.getLastChildConnection(), pTransMStock, mDatabase.CreateDeleteCommandText(pTransMStock, DeleteParams)) == 1;
                    //int ret = mDatabase.ExecuteNonQueryCommand(cmd);
                    //return ret == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }
        public bool DeleteTransprt(TRANSPRT pTransprt)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTransprt);
            String[] DeleteParams = new String[]
             {
                 "TransportID"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pTransprt, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pTransprt, mDatabase.CreateDeleteCommandText(pTransprt, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteThirdUbn(THIRDUBN pThirdUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdUbn);
            String[] DeleteParams = new String[]
             {
                 "UBNid",
                 "ThrId"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pThirdUbn, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pThirdUbn, mDatabase.CreateDeleteCommandText(pThirdUbn, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteThirdKin(THIRDKIN pThirdKin)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pThirdKin);
            String[] DeleteParams = new String[]
             {
                 "ThrId",
                 "ThkDescriptionId",
                 "ThkFarmID"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pThirdKin, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pThirdKin, mDatabase.CreateDeleteCommandText(pThirdKin, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteTreatmen(TREATMEN pTreatmen)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pTreatmen);
            String[] DeleteParams = new String[]
             {
                 "EventId"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pTreatmen, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pTreatmen, mDatabase.CreateSetNegativeCommandText(pTreatmen, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteWeight(WEIGHT pGew)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pGew);
            String[] DeleteParams = new String[]
             {
                 "AniId" ,
                 "WeightDate"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pGew, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pGew, mDatabase.CreateDeleteCommandText(pGew, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteUBN(UBN pUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pUbn);
            String[] DeleteParams = new String[] { "UBNid" };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pUbn, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken, pUbn, mDatabase.CreateSetNegativeCommandText(pUbn, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteWean(WEAN pWeaner)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pWeaner);
            String[] DeleteParams = new String[] { "EventId" };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pWeaner, DeleteParams);
            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
                return mDatabase.ModifyObject(mToken, pWeaner, mDatabase.CreateSetNegativeCommandText(pWeaner, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteWgcurve(WGCURVE pWgcurve)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pWgcurve);
            String[] DeleteParams = new String[] { "Curvenr" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pWgcurve, DeleteParams);
            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pWgcurve, mDatabase.CreateDeleteCommandText(pWgcurve, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteWgcurveD(WGCURVED pWgcurveD)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pWgcurveD);
            String[] DeleteParams = new String[] { "Curvenr", "fd_Day" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pWgcurveD, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pWgcurveD, mDatabase.CreateDeleteCommandText(pWgcurveD, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteWgcurveFarm(WGCURVEFARM pWgcurveFarm)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pWgcurveFarm);
            String[] DeleteParams = new String[] { "Curvenr", "FarmId" };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pWgcurveFarm, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pWgcurveFarm, mDatabase.CreateDeleteCommandText(pWgcurveFarm, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1; 
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        [Obsolete("GetDataTable kan naar de verkeerde database wijzen! herschrijf de functie (b.v. met GetDatabase.QueryData) ", true)]
        public DataTable GetDataTable(StringBuilder pQuery)
        {

            DBConnectionToken pToken = mToken.getLastChildConnection();
            if (pToken == null) throw new NotSupportedException("Toegang geweigerd!");
            return mDatabase.QueryData(pToken, pQuery);
        }

        [Obsolete("RUMALOG niet gebruiken schrijf het in SoapLog", false)]
        public void WriteError(RUMALOG pErrorLog)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pErrorLog);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pErrorLog, true, false);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)

            if (mDatabase.ModifyObject(mToken.getLastChildConnection(), pErrorLog, mDatabase.CreateInsertCommandWithoutChangedByAndSourceID(pErrorLog)) != 1)
            {
                VSM.RUMA.CORE.unLogger.WriteError(DateTime.Now.ToShortDateString().Replace('\\', '-').Replace('/', '-') + " " + pErrorLog.LogText + "\n\r");
            }

        }

        [Obsolete("RUMALOG niet gebruiken schrijf het in SoapLog", false)]
        public void WriteLogMessage(int ubnid, int logkind, string message)
        {
            unLogger.WriteInfoFormat("RUMALOG", "Log Message UbnId {0} Logkind {1} : {2}", ubnid, logkind, message);

            RUMALOG dblog = new RUMALOG();
            dblog.LogDate = DateTime.Now;
            dblog.LogText = message;
            dblog.UbnId = Convert.ToString(ubnid);
            dblog.LogKind = logkind;
            dblog.LogTime = DateTime.Now;
            WriteError(dblog);
        }

        [Obsolete]
        public PROCESCOMPUTERLOG CreateProcesComputerLog(int UbnId, sbyte pclType, string pclVersion, ulong PclXMLFields)
        {
            PROCESCOMPUTERLOG log = new PROCESCOMPUTERLOG();
            log.PclUbnId = UbnId;
            log.PclType = pclType;
            log.PclVersion = pclVersion;
            log.PclDtBegin = DateTime.Now;
            log.PclXMLFields = PclXMLFields;
            System.Data.DataTable dtResult = mDatabase.QueryData(mToken, new StringBuilder("SELECT USER() AS IP"));
            if (dtResult.Rows.Count > 0)
            {
                String IP = dtResult.Rows[0]["IP"].ToString();
                log.PclIp = IP.Substring(IP.IndexOf('@') + 1);
            }

            if (WriteActions.SaveObject(log) < 0)
            {
                VSM.RUMA.CORE.unLogger.WriteError("Error Inserting log!");
            }
            return log;
        }

        public bool CloseProcesComputerLog(PROCESCOMPUTERLOG log, sbyte Result)
        {
            //bool result = false;
            log.PclDtEnd = DateTime.Now;
            log.PclResult = Result;

            //DbCommand cmd = mDatabase.CreateParameters(mToken, log);
            String[] UpdateParams = new String[]
            {
                "PclDtEnd",
                "PclResult",
            };
            String CommandText = mDatabase.CreateUpdateCommandText(log, "PclId", UpdateParams);
            CommandText = CommandText.Replace(log.GetType().Name, "agrologs." + log.GetType().Name);

            return mDatabase.ModifyObject(mToken, log, CommandText) == 1;
            //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
            //{
            //    result = true;
            //}
            //return result;
        }
        [Obsolete]
        public bool LogTasktoolMessageToAgrobase(PROCESCOMPUTERLOG log, int UbnId, int LogKind, int PcldPluginType, int PcldMessageKind, String Version, String Message)
        {
            bool result = false;
            PROCESCOMPUTERLOG_DETAIL logdetail = new PROCESCOMPUTERLOG_DETAIL();
            logdetail.PclId = log.PclId;
            logdetail.PcldMessage = Message;
            logdetail.PcldDatetime = DateTime.Now;
            logdetail.PcldPluginType = Convert.ToByte(PcldPluginType);
            logdetail.PcldMessageKind = PcldMessageKind;
            logdetail.PcldPluginVersion = Version;



            sbyte rumalogkind = Convert.ToSByte((LogKind % 10));

            if (LogKind == 2999 || LogKind == 2998 || LogKind == 1102 || rumalogkind == 0 || rumalogkind == 1)
                logdetail.PcldResult = 1;
            else if (LogKind == 1105 || LogKind == 1103 || LogKind == 1181 || LogKind == 1182 || LogKind == 1183 || LogKind == 43)
                logdetail.PcldResult = 2;
            else if (LogKind == 2003 || LogKind == 2007 || LogKind == 187 || LogKind == 87)
            {
                logdetail.PcldResult = 4;
            }
            else
            {
                logdetail.PcldResult = 3;
            }


            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), logdetail);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(logdetail, true, false);
            //cmd.CommandText = cmd.CommandText.Replace(log.GetType().Name, "agrologs." + log.GetType().Name);
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), logdetail);
            String CommandText = mDatabase.CreateInsertCommandText(logdetail);
            CommandText = CommandText.Replace(log.GetType().Name, "agrologs." + log.GetType().Name);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
            if (mDatabase.ModifyObject(mToken, log, CommandText) == 1)
            {
                result = true;
            }



            RUMALOG Note = new RUMALOG();
            Note.LogKind = LogKind;
            Note.LogText = Message;
            Note.LogDate = DateTime.Today;
            Note.LogTime = DateTime.Now;
            Note.UbnId = UbnId.ToString();
            WriteError(Note);
            return result;
        }


        public void WriteSoapError(SOAPLOG pSoapLog)
        {
            string[] pkeyfields = { "Internalnr" };
            if (pSoapLog.Internalnr > 0)
            {

                pSoapLog.Internalnr = 0;
                pSoapLog.SetIsFilledByDB(false);


            }
            mDatabase.InsertObject(mToken.getLastChildConnection(), pSoapLog);
        }

        public int UpdateCrv_MeldingenReportDate(List<CRV_MELDING> objectlist, DateTime reportdate, int Cm_Report_State)
        {
            int ret = 0;
            if (objectlist.Count() > 0)
            {
                try
                {
                    List<int> ids = objectlist.FindAll(x => x.Crv_melding_ID > 0).Select(x => x.Crv_melding_ID).ToList();
                    if (ids.Count() == 0)
                    {
                        return 0;
                    }
                    StringBuilder bld = new StringBuilder();
                    if (reportdate > DateTime.MinValue)
                    {
                        bld = new StringBuilder($@"  UPDATE agrodata.CRV_MELDING 
                                   SET  Cm_Report_TS='{reportdate.ToString("yyyy-MM-dd HH:mm:ss")}',
                                    Cm_Report_State = {Cm_Report_State},
                                    Changed_By={objectlist.ElementAt(0).Changed_By},
                                    SourceID={objectlist.ElementAt(0).SourceID}    WHERE Crv_melding_ID IN ({string.Join(",", ids)}) ; ");
                    }
                    else
                    {
                        bld = new StringBuilder($@"  UPDATE agrodata.CRV_MELDING 
                                   SET  Cm_Report_State = {Cm_Report_State},
                                    Changed_By={objectlist.ElementAt(0).Changed_By},
                                    SourceID={objectlist.ElementAt(0).SourceID}    WHERE Crv_melding_ID IN ({string.Join(",", ids)}) ; ");
                    }
                    ret = mDatabase.ExecuteNonQuery(mToken, bld.ToString());
                }
                catch (Exception exc)
                {
                    unLogger.WriteError(exc.ToString());
                }
            }
            return ret;
        }

        public int UpdateDataObjects<T>(List<T> objectlist, string keykolom, string[] updatekoloms, string database) where T : DataObject
        {
            int ret = 0;
            if (objectlist.Count() > 0 && keykolom.Length > 0)
            {
                StringBuilder bld = new StringBuilder($@"  use {database}; START TRANSACTION;");
                foreach (var item in objectlist)
                {
                    bld.Append($@" UPDATE {item.GetType().Name}  SET ");

                    System.Reflection.PropertyInfo[] lDataProperties;
                    lDataProperties = item.GetType().GetProperties();
                    string where = "";
                    foreach (System.Reflection.PropertyInfo propertyInfo in lDataProperties)
                    {
                        if (updatekoloms.Contains(propertyInfo.Name))
                        {
                            if (propertyInfo.GetValue(item, null) == null)
                            {
                                continue;
                            }

                            if (propertyInfo.GetValue(item, null).GetType() == Type.GetType("System.DateTime"))
                            {
                                try
                                {
                                    DateTime ParamValue = Convert.ToDateTime(propertyInfo.GetValue(item, null));
                                    if (ParamValue == DateTime.MinValue)
                                    {
                                        try
                                        {
                                            bld.Append($@" {propertyInfo.Name}='{ propertyInfo.GetValue(item, null).ToString()}' ");
                                        }
                                        catch (Exception exc)
                                        {
                                            unLogger.WriteError(exc.ToString());
                                        }
                                        bld.Append($@",");
                                        continue;
                                    }
                                    else
                                    {
                                        bld.Append($@" {propertyInfo.Name}='{ ParamValue.ToString("yyyy-MM-dd HH:mm:ss") }'");
                                        bld.Append($@",");
                                        continue;
                                    }
                                }
                                catch (Exception exc)
                                {
                                    unLogger.WriteError(exc.ToString());
                                }
                            }
                            if (propertyInfo.GetValue(item, null).GetType() == Type.GetType("System.String"))
                            {

                                bld.Append($@" {propertyInfo.Name}='{ propertyInfo.GetValue(item, null).ToString() }'");
                                bld.Append($@",");
                                continue;

                            }
                            bld.Append($@" {propertyInfo.Name}={ propertyInfo.GetValue(item, null)}");
                            bld.Append($@",");
                        }
                        else if (propertyInfo.Name == keykolom)
                        {
                            where = $@" WHERE {propertyInfo.Name}={ propertyInfo.GetValue(item, null)} ; ";
                        }
                    }
                    bld.Length--;
                    bld.Append(where);
                }
                bld.Append("  COMMIT;");
                try
                {
                    unLogger.WriteInfo(bld.ToString());
                    ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), bld.ToString());
                }
                catch (Exception exc)
                {
                    ret = -1;
                    unLogger.WriteError(exc.ToString());
                    try
                    {
                        mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), "ROLLBACK;");
                    }
                    catch (Exception exc2)
                    {
                        ret = -2;
                        unLogger.WriteError("ROLLBACK FAIL " + exc2.ToString());
                    }
                }
            }
            return ret;
        }

        public int InsertDataObjects<T>(List<T> objectlist, string[] keykolom, string database) where T : DataObject
        {
            int ret = 0;
            if (objectlist.Count() > 0 && keykolom.Length > 0)
            {
                StringBuilder bld = new StringBuilder($@" use {database}; START TRANSACTION;");
                string begin = mDatabase.CreateInsertCommandText(objectlist.ElementAt(0), keykolom);
                System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"VALUES");

                string[] query = regex.Split(begin);
                bld.Append(query[0]);
                bld.Append("VALUES ");
                string pPrefix = "?";
                foreach (var item in objectlist)
                {
                    System.Reflection.PropertyInfo[] lDataProperties;
                    lDataProperties = item.GetType().GetProperties();
                    string values = query[1];

                    foreach (System.Reflection.PropertyInfo propertyInfo in lDataProperties)
                    {
                        if (propertyInfo.Name.ToLower() != "ts")
                        {
                            if (propertyInfo.GetValue(item, null) == null)
                            {
                                values = values.Replace(pPrefix + propertyInfo.Name, propertyInfo.GetValue(item, null).ToString());
                                continue;
                            }

                            if (propertyInfo.GetValue(item, null).GetType() == Type.GetType("System.DateTime"))
                            {
                                try
                                {
                                    DateTime ParamValue = Convert.ToDateTime(propertyInfo.GetValue(item, null));
                                    if (ParamValue == DateTime.MinValue)
                                    {
                                        try
                                        {
                                            values = values.Replace(pPrefix + propertyInfo.Name, propertyInfo.GetValue(item, null).ToString());
                                        }
                                        catch (Exception exc)
                                        {
                                            unLogger.WriteError(exc.ToString());
                                        }
                                        continue;
                                    }
                                    else
                                    {
                                        values = values.Replace(pPrefix + propertyInfo.Name, "'" + ParamValue.ToString("yyyy-MM-dd HH:mm:ss") + "'");
                                        continue;
                                    }
                                }
                                catch (Exception exc)
                                {
                                    unLogger.WriteError(exc.ToString());
                                }
                            }
                            if (propertyInfo.GetValue(item, null).GetType() == Type.GetType("System.String"))
                            {

                                values = values.Replace(pPrefix + propertyInfo.Name, "'" + propertyInfo.GetValue(item, null).ToString() + "'");

                                continue;

                            }
                            values = values.Replace(pPrefix + propertyInfo.Name, propertyInfo.GetValue(item, null).ToString());
                        }
                    }
                    bld.Append(values);
                    bld.Append(",");
                }
                bld.Length--;
                bld.Append(" ; COMMIT; ");
                System.Diagnostics.Stopwatch tm = new System.Diagnostics.Stopwatch();
                tm.Start();
                try
                {
                    ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), bld.ToString());

                }
                catch (Exception exc)
                {
                    ret = -1;
                    unLogger.WriteError(exc.ToString());
                    try
                    {
                        mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), "ROLLBACK;");
                    }
                    catch (Exception exc2)
                    {
                        ret = -2;
                        unLogger.WriteError("ROLLBACK FAIL " + exc2.ToString());
                    }
                }
                tm.Stop();
                string tiepe = objectlist.ElementAt(0).GetType().ToString();
                unLogger.WriteInfo($@"INSERT {objectlist.Count} OF {tiepe} time: {tm.ElapsedMilliseconds} milliseconds. Returns:{ret}  ");
            }
            return ret;
        }

        [Obsolete("Delayed Statements zijn niet meer in gebruik")]
        public void WriteSOAPLOGDelayed(SOAPLOG pSoapLog)
        {
            WriteSoapError(pSoapLog);
        }

        public List<SOAPLOG> GetSoaplogs(int pFarmId)
        {
            BEDRIJF b = GetBedrijfById(pFarmId);
            UBN ubudebuutje = GetubnById(b.UBNid);

            StringBuilder lsb = new StringBuilder("SELECT * FROM SOAPLOG  WHERE FarmNumber = '" + ubudebuutje.Bedrijfsnummer + "'");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lsb);
            List<SOAPLOG> lResultList = new List<SOAPLOG>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                SOAPLOG lTransprt = new SOAPLOG();
                if (mDatabase.FillObject(lTransprt, drtrns))
                {
                    lResultList.Add(lTransprt);
                }
            }
            return lResultList;
        }

        public List<SOAPLOG> GetSoaplogsbyUBNandDate(String FarmNumber, DateTime Begindatum, DateTime Einddatum)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append($@"SELECT MIN(Internalnr) as Internalnr, Kind, SubKind,
                             TaskLogID, Date, Min(Time) AS Time, Lifenumber, FarmNumber,
                             Status, Code, Omschrijving, ThrId, ts, changed_by, SourceID, ActionType");
            lQuery.Append(" FROM SOAPLOG");
            lQuery.AppendFormat(" WHERE SOAPLOG.FarmNumber = '{0}'", FarmNumber);
            lQuery.AppendFormat(" AND SOAPLOG.TIME >= '{0}'", Begindatum.ToString("yyyy-MM-dd"));
            lQuery.AppendFormat(" AND SOAPLOG.TIME <= '{0}'", Einddatum.ToString("yyyy-MM-dd"));
            lQuery.AppendFormat(" GROUP BY Lifenumber, Date, Omschrijving, Kind, SubKind, FarmNumber, `Status`, Code, ThrId");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            List<SOAPLOG> lResultList = new List<SOAPLOG>();
            foreach (DataRow drSoaplog in tbl.Rows)
            {
                SOAPLOG lResult = new SOAPLOG();
                if (mDatabase.FillObject(lResult, drSoaplog))
                {
                    lResultList.Add(lResult);
                }
            }
            return lResultList;
        }

        public String Plugin()
        {
            return "MySql";
        }

        public ARTIKEL GetArtikelByEAN(string pEan)
        {
            ARTIKEL art = new ARTIKEL();
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat(" SELECT a.* FROM ARTIKEL a WHERE a.Art_EAN = '{0}'", pEan);
            bool hasresults = mDatabase.FillObject(mToken, art, lQuery);
            return hasresults ? art : null;
        }

        public ARTIKEL GetArtikelByArtNumber(string pArtNumber)
        {
            ARTIKEL art = new ARTIKEL();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.*");
            lQuery.Append(" FROM ARTIKEL a");
            lQuery.AppendFormat(" WHERE a.ArtNumber = '{0}'", pArtNumber);
            bool hasresults = mDatabase.FillObject(mToken, art, lQuery);
            return hasresults ? art : null;
        }

        public List<ARTIKEL_VOER> GetAllVoerArtikel()
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.*, av.NormVem, av.NormVevi, av.NormDVE, av.NormOEB, av.VoerGroup, av.NormCalcium, av.NormNatrium, av.NormMagnesium");
            lQuery.Append(" FROM ARTIKEL a");
            lQuery.Append(" LEFT JOIN ARTIKEL_VOER av ON a.ArtId = av.ArtId");
            lQuery.AppendFormat(" WHERE a.ArtHerkomst = {0}", ARTIKEL.ARTIKEL_HERKOMST_VOER);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<ARTIKEL_VOER> lResultList = new List<ARTIKEL_VOER>();
            foreach (DataRow drArtikel_Voer in tbl.Rows)
            {
                ARTIKEL_VOER lArtikel_Voer = new ARTIKEL_VOER();
                if (mDatabase.FillObject(lArtikel_Voer, drArtikel_Voer))
                {
                    lResultList.Add(lArtikel_Voer);
                }
            }
            return lResultList;
        }

        public List<ARTIKEL_VOER> GetVoerArtikelByUBN(int pUbnId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.*, av.NormVem, av.NormVevi, av.NormDVE, av.NormOEB, av.VoerGroup, av.NormCalcium, av.NormNatrium, av.NormMagnesium");
            lQuery.Append(" FROM ARTIKEL a");
            lQuery.Append(" LEFT JOIN ARTIKEL_VOER av ON a.ArtId = av.ArtId");
            lQuery.Append(" JOIN ARTIKELUBN au ON a.ArtId = au.ArtId");
            lQuery.AppendFormat(" WHERE a.ArtHerkomst = {0}", ARTIKEL.ARTIKEL_HERKOMST_VOER);
            lQuery.AppendFormat(" AND au.UbnId = {0}", pUbnId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<ARTIKEL_VOER> lResultList = new List<ARTIKEL_VOER>();
            foreach (DataRow drArtikel_Voer in tbl.Rows)
            {
                ARTIKEL_VOER lArtikel_Voer = new ARTIKEL_VOER();
                if (mDatabase.FillObject(lArtikel_Voer, drArtikel_Voer))
                {
                    lResultList.Add(lArtikel_Voer);
                }
            }
            return lResultList;
        }

        public ARTIKEL_VOER GetVoerArtikelByEAN(string pEan)
        {
            ARTIKEL_VOER av = new ARTIKEL_VOER();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.*, av.NormVem, av.NormVevi, av.NormDVE, av.NormOEB, av.VoerGroup, av.NormCalcium, av.NormNatrium, av.NormMagnesium");
            lQuery.Append(" FROM ARTIKEL a");
            lQuery.Append(" LEFT JOIN ARTIKEL_VOER av ON a.ArtId = av.ArtId");
            lQuery.AppendFormat(" WHERE a.ArtHerkomst = {0}", ARTIKEL.ARTIKEL_HERKOMST_VOER);
            lQuery.AppendFormat(" AND a.Art_EAN = '{0}'", pEan);
            bool hasresults = mDatabase.FillObject(mToken, av, lQuery);
            return hasresults ? av : null;
        }

        public ARTIKEL_VOER GetVoerArtikel(int pArtId)
        {
            ARTIKEL_VOER av = new ARTIKEL_VOER();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT a.*, av.NormVem, av.NormVevi, av.NormDVE, av.NormOEB, av.VoerGroup, av.NormCalcium, av.NormNatrium, av.NormMagnesium");
            lQuery.Append(" FROM ARTIKEL a");
            lQuery.Append(" LEFT JOIN ARTIKEL_VOER av ON a.ArtId = av.ArtId");
            lQuery.AppendFormat(" WHERE a.ArtHerkomst = {0}", ARTIKEL.ARTIKEL_HERKOMST_VOER);
            lQuery.AppendFormat(" AND a.ArtId = {0}", pArtId);
            bool hasresults = mDatabase.FillObject(mToken, av, lQuery);
            return hasresults ? av : null;
        }

        public DataTable getAllMedicijnArtikelen()
        {

            StringBuilder lsb = new StringBuilder("SELECT ARTIKEL_MEDIC.*,ARTIKEL.* FROM ARTIKEL_MEDIC JOIN ARTIKEL ON ARTIKEL_MEDIC.ArtId = ARTIKEL.ArtId ORDER BY ARTIKEL_MEDIC.ArtMed_preferred DESC,ARTIKEL.ArtNaam");

            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            tbl.DefaultView.Sort = " ArtMed_preferred DESC, ArtNaam ";
            return tbl;
        }
        public DataTable getMedicijnArtikelenByArtIds(List<int> pArtIds)
        {
            if (pArtIds.Count() > 0)
            {
                StringBuilder lsb = new StringBuilder(" SELECT ARTIKEL_MEDIC.*,ARTIKEL.* FROM ARTIKEL_MEDIC JOIN ARTIKEL ON ARTIKEL_MEDIC.ArtId = ARTIKEL.ArtId WHERE ARTIKEL.ArtId IN (" + intListToString(pArtIds) + ") ORDER BY ARTIKEL_MEDIC.ArtMed_preferred DESC,ARTIKEL.ArtNaam ");
                DataTable tbl = mDatabase.QueryData(mToken, lsb);
                tbl.DefaultView.Sort = " ArtMed_preferred DESC, ArtNaam ";
                return tbl;
            }
            return new DataTable();
        }

        public ARTIKEL_MEDIC getartikelbyMedicine(MEDICINE m)
        {
            ARTIKEL_MEDIC am = new ARTIKEL_MEDIC();

            StringBuilder lsb = new StringBuilder(@"SELECT a.* FROM agrofactuur.ARTIKEL_MEDIC a
                    JOIN agrofactuur.MEDICINE m ON m.MedCode = a.ArtMed_RegNumber WHERE m.MedId=" + m.MedId.ToString());

            bool hasresults = mDatabase.FillObject(mToken, am, lsb);
            return hasresults ? am : null;
        }

        public int GetArtIdByEAN(string ean)
        {
            try
            {
                StringBuilder sb = new StringBuilder(
                    "SELECT artId FROM ARTIKEL a WHERE Art_EAN='" + ean.ToString() + "' AND artId>0");


                DataTable dt = mDatabase.QueryData(mToken, sb);
                if (dt == null || dt.Rows.Count == 0) return 0;
                return Convert.ToInt32(dt.Rows[0]["artId"]);
            }
            catch (Exception exc) { return 0; }
        }

        public ARTIKEL GetArtikelById(int pArtId)
        {
            ARTIKEL pArtikel = new ARTIKEL();
            StringBuilder sb = new StringBuilder("SELECT * FROM ARTIKEL WHERE ArtId=" + pArtId.ToString());
            bool hasresults = mDatabase.FillObject(mToken, pArtikel, sb);
            return hasresults ? pArtikel : null;
        }

        public ARTIKEL_MEDIC GetArtikelMedicById(int pArtId)
        {
            ARTIKEL_MEDIC pArtikelMedic = new ARTIKEL_MEDIC();
            StringBuilder sb = new StringBuilder("SELECT * FROM ARTIKEL_MEDIC WHERE artId =" + pArtId.ToString());
            bool hasresults = mDatabase.FillObject(mToken, pArtikelMedic, sb);
            return hasresults ? pArtikelMedic : null;
        }

        public ARTIKEL_MEDIC_REGNR GetArtikelMedicRegnrByArtIdAndCountry(int pArtId, int pCountry)
        {
            ARTIKEL_MEDIC_REGNR amr = new ARTIKEL_MEDIC_REGNR();

            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_REGNR" +
                " WHERE amrArtId=" + pArtId.ToString() +
                " AND amrCountry=" + pCountry.ToString());

            bool hasresults = mDatabase.FillObject(mToken, amr, sb);
            return hasresults ? amr : null;
        }

        public ARTIKEL_MEDIC_WACHTTIJD GetArtikelMedicWachttijd(int pArtId, int pDierSoort, int pWachttijdSoort, int pCountry)
        {
            ARTIKEL_MEDIC_WACHTTIJD amw = new ARTIKEL_MEDIC_WACHTTIJD();
            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_WACHTTIJD" +
                " WHERE amwArtId=" + pArtId.ToString() +
                " AND amwDierSoort=" + pDierSoort.ToString() +
                " AND amwWachttijdSoort=" + pWachttijdSoort.ToString() +
                " AND amwCountry=" + pCountry.ToString());

            bool hasresults = mDatabase.FillObject(mToken, amw, sb);
            return hasresults ? amw : null;
        }

        public ARTIKEL_MEDIC_TOEDIENING GetArtikelMedicToediening(int pArtId, int pToedieningsWijze)
        {
            ARTIKEL_MEDIC_TOEDIENING amt = new ARTIKEL_MEDIC_TOEDIENING();
            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_TOEDIENING" +
                " WHERE amtArtId=" + pArtId.ToString() +
                " AND amtToedieningsWijze=" + pToedieningsWijze.ToString());

            bool hasresults = mDatabase.FillObject(mToken, amt, sb);
            return hasresults ? amt : null;
        }

        public ARTIKEL_MEDIC_WERKZAMESTOF GetArtikelMedicWerkzameStofByFidinId(int pFidinId)
        {
            ARTIKEL_MEDIC_WERKZAMESTOF amws = new ARTIKEL_MEDIC_WERKZAMESTOF();

            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_WERKZAMESTOF" +
                " WHERE amwsFidinId=" + pFidinId.ToString());

            bool hasresults = mDatabase.FillObject(mToken, amws, sb);
            return hasresults ? amws : null;
        }

        public ARTIKEL_MEDIC_DOSERING GetArtikelMedicDosering(int pArtId, int pDierSoort, int pWerkzameStofId)
        {
            ARTIKEL_MEDIC_DOSERING amd = new ARTIKEL_MEDIC_DOSERING();

            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_DOSERING" +
                " WHERE amdArtId=" + pArtId.ToString() +
                " AND amdDierSoort=" + pDierSoort.ToString() +
                " AND amwsId=" + pWerkzameStofId.ToString());

            bool hasresults = mDatabase.FillObject(mToken, amd, sb);
            return hasresults ? amd : null;
        }

        public ARTIKEL_MEDIC_DIERSOORT GetArtikelMedicDiersoort(int pArtId, int pDiersoort)
        {
            ARTIKEL_MEDIC_DIERSOORT amds = new ARTIKEL_MEDIC_DIERSOORT();
            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_DIERSOORT" +
                " WHERE amdsArtId=" + pArtId.ToString() +
                " AND amdsDierSoort=" + pDiersoort.ToString());

            bool hasresults = mDatabase.FillObject(mToken, amds, sb);
            return hasresults ? amds : null;
        }

        public ARTIKEL_MEDIC_INFO GetArtikelMedicInfo(int pArtId, int pFidinId)
        {
            ARTIKEL_MEDIC_INFO ami = new ARTIKEL_MEDIC_INFO();
            StringBuilder sb = new StringBuilder(
                "SELECT *" +
                " FROM ARTIKEL_MEDIC_INFO" +
                " WHERE amiArtId=" + pArtId.ToString() +
                " AND amiFidinId=" + pFidinId.ToString());

            bool hasresults = mDatabase.FillObject(mToken, ami, sb);
            return hasresults ? ami : null;
        }

        public void getMedicijnArtikel(int pArtId, out ARTIKEL pArtikel, out ARTIKEL_MEDIC pArtikelMedic)
        {
            pArtikelMedic = GetArtikelMedicById(pArtId);
            pArtikel = GetArtikelById(pArtId);
        }

        public int SaveArtikel(ARTIKEL pArtikel)
        {
            try
            {
                return WriteActions.SaveObject(pArtikel);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedic(ARTIKEL_MEDIC pArtikelMedic)
        {
            try
            {
                return WriteActions.SaveObject(pArtikelMedic);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicRegnr(ARTIKEL_MEDIC_REGNR pArtikelMedicRegnr)
        {
            try
            {
                return WriteActions.SaveObject(pArtikelMedicRegnr);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicRegnr " + ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicWachttijd(ARTIKEL_MEDIC_WACHTTIJD pTblObj)
        {
            try
            {
                return WriteActions.SaveObject(pTblObj);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicWachttijd " + ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicToediening(ARTIKEL_MEDIC_TOEDIENING pTblObj)
        {
            try
            {
                return WriteActions.SaveObject(pTblObj);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicToediening " + ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicWerkzameStof(ARTIKEL_MEDIC_WERKZAMESTOF pTblObj)
        {
            try
            {
                return WriteActions.SaveObject(pTblObj);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicWerkzameStof " + ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicDosering(ARTIKEL_MEDIC_DOSERING pTblObj)
        {
            try
            {
                return WriteActions.SaveObject(pTblObj);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicDosering " + ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicDiersoort(ARTIKEL_MEDIC_DIERSOORT pTblObj)
        {
            try
            {
                return WriteActions.SaveObject(pTblObj);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicDiersoort " + ex.Message, ex);
                return -1;
            }
        }

        public int SaveArtikelMedicInfo(ARTIKEL_MEDIC_INFO pTblObj)
        {
            try
            {
                return WriteActions.SaveObject(pTblObj);
            }
            catch (Exception ex)
            {
                unLogger.WriteError("SaveArtikelMedicInfo " + ex.Message, ex);
                return -1;
            }
        }

        public DataTable getMedicineControlListMedicines()
        {
            StringBuilder bld = new StringBuilder();
            bld.Append(" SELECT * FROM ARTIKEL ");
            bld.Append(" WHERE ((ARTIKEL.ArtHerkomst = 8) OR ARTIKEL.artid IN (SELECT Artid FROM ");
            bld.Append(" ARTIKEL_MEDIC WHERE ARTIKEL_MEDIC.artId = ARTIKEL.artid)) ");
            bld.Append(" ORDER BY Artnaam ");

            DataTable tbl = mDatabase.QueryData(mToken, bld);
            return tbl;
        }
        public DataTable getMedicineControlListMedicines(int pProgramId)
        {
            StringBuilder bldList = new StringBuilder();
            bldList.Append(" SELECT * FROM ARTIKEL ");
            bldList.Append(" LEFT JOIN ARTIKEL_MEDIC_LIST ON ARTIKEL_MEDIC_LIST.ArtID =  ARTIKEL.artId ");
            bldList.Append(" WHERE ((ARTIKEL.ArtHerkomst = 8) OR ARTIKEL.artid IN (SELECT Artid FROM ");
            bldList.Append(" ARTIKEL_MEDIC WHERE ARTIKEL_MEDIC.artId = ARTIKEL.artid)) ");
            bldList.AppendFormat(" AND ARTIKEL_MEDIC_LIST.ProgramID = {0} ", pProgramId);
            bldList.Append(" ORDER BY Artnaam ");

            DataTable tbl = mDatabase.QueryData(mToken, bldList);
            return tbl;
        }
        public List<ARTIKEL_MEDIC_LIST> getArtikelMedicListByProgramId(int pProgramId)
        {
            List<ARTIKEL_MEDIC_LIST> lArtMList = new List<ARTIKEL_MEDIC_LIST>();
            StringBuilder lsb = new StringBuilder("SELECT ARTIKEL_MEDIC_LIST.* FROM ARTIKEL_MEDIC_LIST ");
            lsb.AppendFormat("WHERE ARTIKEL_MEDIC_LIST.ProgramID = {0} ", pProgramId);
            DataTable tbl = mDatabase.QueryData(mToken, lsb);

            foreach (DataRow drAMedList in tbl.Rows)
            {
                ARTIKEL_MEDIC_LIST lArtikelMedList = new ARTIKEL_MEDIC_LIST();
                if (mDatabase.FillObject(lArtikelMedList, drAMedList))
                {
                    lArtMList.Add(lArtikelMedList);
                }
            }
            return lArtMList;
        }
        public List<ARTIKEL> searchMedicijnArtikelenByRegNumber(string pRegNumber)
        {
            StringBuilder lsb = new StringBuilder("SELECT ARTIKEL.* FROM ARTIKEL ");
            lsb.Append("INNER JOIN ARTIKEL_MEDIC ON ARTIKEL.ArtId =ARTIKEL_MEDIC.artId ");
            lsb.AppendFormat("WHERE ARTIKEL_MEDIC.ArtMed_RegNumber like '%{0}%'", pRegNumber);
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<ARTIKEL> lResultList = new List<ARTIKEL>();
            foreach (DataRow drArtikel in tbl.Rows)
            {
                ARTIKEL lArtikel = new ARTIKEL();
                if (mDatabase.FillObject(lArtikel, drArtikel))
                {
                    lResultList.Add(lArtikel);
                }
            }
            return lResultList;

        }

        public List<ARTIKEL> searchMedicijnArtikelenByArtNaam(string pArtNaam)
        {
            StringBuilder lsb = new StringBuilder("SELECT ARTIKEL.* FROM ARTIKEL ");
            lsb.Append("INNER JOIN ARTIKEL_MEDIC ON ARTIKEL.ArtId =ARTIKEL_MEDIC.artId ");
            lsb.AppendFormat("WHERE ARTIKEL.ArtNaam like '%{0}%'", pArtNaam);
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<ARTIKEL> lResultList = new List<ARTIKEL>();
            foreach (DataRow drArtikel in tbl.Rows)
            {
                ARTIKEL lArtikel = new ARTIKEL();
                if (mDatabase.FillObject(lArtikel, drArtikel))
                {
                    lResultList.Add(lArtikel);
                }
            }
            return lResultList;
        }

        public DataTable getArtikelMedicByUbn(int pUbnId)
        {

            StringBuilder lsb = new StringBuilder("SELECT ARTIKEL_MEDIC.*,ARTIKEL.* FROM ARTIKEL_MEDIC ");
            lsb.Append("INNER JOIN ARTIKEL ON ARTIKEL_MEDIC.artId = ARTIKEL.ArtId ");
            lsb.Append("INNER JOIN ARTIKELUBN ON ARTIKEL.ArtId = ARTIKELUBN.ArtId ");
            lsb.Append("WHERE ARTIKELUBN.UBNid = " + pUbnId.ToString());
            lsb.Append(" ORDER BY ArtNaam");

            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            return tbl;
        }

        public int SaveVoerArtikel(ARTIKEL_VOER pArtikel)
        {
            if (pArtikel.ArtHerkomst == ARTIKEL.ARTIKEL_HERKOMST_VOER)
            {
                //bool isOk = true;
                ARTIKEL art = new ARTIKEL();

                /* TODO Mark alle properties wanneer de importer voor data types is aangepast en alles final is
                 * 
                 * -	Vem             AV
                 *      Vevi            AV
                 * -	DVE             AV
                 * -	OEB             AV
                 * -	Voergroep       AV
                 * -	Drogestof       ART
                 * -	Eenheid DS/kg   ART
                 * -	Norm Re         ART
                 * -	Norm P          ART
                 * -	Norm K          ART
                 */


                /*
                art.ArtId = pArtikel.ArtId;
                art.ArtNaam = pArtikel.ArtNaam;
                art.Art_EAN = pArtikel.Art_EAN;
                art.ArtBTWcode = pArtikel.ArtBTWcode;
                art.ArtDagboekInkoop = pArtikel.ArtDagboekInkoop;
                art.ArtDagboekVerkoop = pArtikel.ArtDagboekVerkoop;
                art.ArtHerkomst = pArtikel.ArtHerkomst;
                art.ArtDrogestof = pArtikel.ArtDrogestof;
                art.ArtKGNP = pArtikel.ArtKGNP;
                art.ArtNormRE = pArtikel.ArtNormRE;
                art.ArtNormP = pArtikel.ArtNormP;
                art.ArtNormK = pArtikel.ArtNormK;*/


                art.ArtId = pArtikel.ArtId;
                art.ArtNumber = pArtikel.ArtNumber;
                art.ArtNaam = pArtikel.ArtNaam;
                art.ArtGrootboekInk = pArtikel.ArtGrootboekInk;
                art.ArtGrootboekVerk = pArtikel.ArtGrootboekVerk;
                art.ArtDoorboeken = pArtikel.ArtDoorboeken;
                art.ArtAfdrukdecimalen = pArtikel.ArtAfdrukdecimalen;
                art.ArtLayoutnummer = pArtikel.ArtLayoutnummer;
                art.ArtWeekNotering = pArtikel.ArtWeekNotering;
                art.ArtVasteprijs = pArtikel.ArtVasteprijs;
                art.ArtBTWcode = pArtikel.ArtBTWcode;
                art.ArtAantalPer = pArtikel.ArtAantalPer;
                art.ArtPrijsPer = pArtikel.ArtPrijsPer;
                art.ArtPrijsExclusief = pArtikel.ArtPrijsExclusief;
                art.ArtNormRE = pArtikel.ArtNormRE;
                art.ArtNormP = pArtikel.ArtNormP;
                art.ArtNormK = pArtikel.ArtNormK;
                art.ArtDrogestof = pArtikel.ArtDrogestof;
                art.ArtValutacode = pArtikel.ArtValutacode;
                art.ArtBevleesdheid = pArtikel.ArtBevleesdheid;
                art.ArtTypeToeslag = pArtikel.ArtTypeToeslag;
                art.ArtMinasCategorie = pArtikel.ArtMinasCategorie;
                art.ArtMinasSubCategorie = pArtikel.ArtMinasSubCategorie;
                art.ArtGewichtsfactor = pArtikel.ArtGewichtsfactor;
                art.ArtGroep = pArtikel.ArtGroep;
                art.ArtDiermineraalgroep = pArtikel.ArtDiermineraalgroep;
                art.ArtDagboekInkoop = pArtikel.ArtDagboekInkoop;
                art.ArtDagboekVerkoop = pArtikel.ArtDagboekVerkoop;
                art.ArtEenheid = pArtikel.ArtEenheid;
                art.ArtToeslagTabel = pArtikel.ArtToeslagTabel;
                art.ArtAfleverplanning = pArtikel.ArtAfleverplanning;
                art.ArtExtravelden = pArtikel.ArtExtravelden;
                art.ArtHerkomst = pArtikel.ArtHerkomst;
                art.ArtMinimaleVrd = pArtikel.ArtMinimaleVrd;
                art.ArtBestelgrootte = pArtikel.ArtBestelgrootte;
                art.ArtUser = pArtikel.ArtUser;
                art.ArtUserSec = pArtikel.ArtUserSec;
                art.ArtUserThird = pArtikel.ArtUserThird;
                art.ArtActieId = pArtikel.ArtActieId;
                art.ArtThrId = pArtikel.ArtThrId;
                art.ArtContactId = pArtikel.ArtContactId;
                art.ArtMemo = pArtikel.ArtMemo;
                art.ArtInternetUpdate = pArtikel.ArtInternetUpdate;
                art.ArtIncasso = pArtikel.ArtIncasso;
                art.ArtStandaardEenheid = pArtikel.ArtStandaardEenheid;
                art.ArtStandaardHoeveelheid = pArtikel.ArtStandaardHoeveelheid;
                art.ArtKorting = pArtikel.ArtKorting;
                art.ArtBarcode = pArtikel.ArtBarcode;
                art.ArtKGNP = pArtikel.ArtKGNP;
                art.ArtLayoutid = pArtikel.ArtLayoutid;
                art.ArtDagenHoudbaar = pArtikel.ArtDagenHoudbaar;
                art.ArtHoudbaarWaarsch = pArtikel.ArtHoudbaarWaarsch;
                art.ArtStdMaakHvlhd = pArtikel.ArtStdMaakHvlhd;
                art.ArtStdProduct = pArtikel.ArtStdProduct;
                art.ArtHeeftVoorraad = pArtikel.ArtHeeftVoorraad;
                art.ArtInkoopPrijs = pArtikel.ArtInkoopPrijs;
                art.ArtSvId = pArtikel.ArtSvId;
                art.Art_Print_Re_N = pArtikel.Art_Print_Re_N;
                art.Art_Print_P_P2O5 = pArtikel.Art_Print_P_P2O5;
                art.Art_Print_DS = pArtikel.Art_Print_DS;
                art.Art_Print_Per_Vracht = pArtikel.Art_Print_Per_Vracht;
                art.Art_In_Handel = pArtikel.Art_In_Handel;
                art.Art_Uit_Handel = pArtikel.Art_Uit_Handel;
                art.Art_Wachten_Op_Aantal = pArtikel.Art_Wachten_Op_Aantal;
                art.Art_Max_Afwijking_Aantal = pArtikel.Art_Max_Afwijking_Aantal;
                art.Art_Std_Verpakking_ArtId = pArtikel.Art_Std_Verpakking_ArtId;
                art.Art_Inc_Verpakkingsprijs = pArtikel.Art_Inc_Verpakkingsprijs;
                art.Art_Std_Inkoop_Prijs = pArtikel.Art_Std_Inkoop_Prijs;
                art.Art_IsRL = pArtikel.Art_IsRL;
                art.Art_IsGeklast = pArtikel.Art_IsGeklast;
                art.Art_IsMannelijk = pArtikel.Art_IsMannelijk;
                art.Art_Fabrikant = pArtikel.Art_Fabrikant;
                art.Art_Std_Gewicht = pArtikel.Art_Std_Gewicht;
                art.AdmisNumber = pArtikel.AdmisNumber;
                art.ArtTijdAantalPer = pArtikel.ArtTijdAantalPer;
                art.ArtTijdStandaardeenheid = pArtikel.ArtTijdStandaardeenheid;
                art.ArtTijdVasteTijd = pArtikel.ArtTijdVasteTijd;
                art.Art_Analyse_Prijs = pArtikel.Art_Analyse_Prijs;
                art.Art_productielokatie = pArtikel.Art_productielokatie;
                art.Art_man_uren = pArtikel.Art_man_uren;
                art.Artvoorraaddatum = pArtikel.Artvoorraaddatum;
                art.Artvoorraadbeginaantal = pArtikel.Artvoorraadbeginaantal;
                art.Art_Aantal_Per_Pallet = pArtikel.Art_Aantal_Per_Pallet;
                art.ArtKortingLeverancier = pArtikel.ArtKortingLeverancier;
                art.Art_Deel_Factuur_Artikel = pArtikel.Art_Deel_Factuur_Artikel;
                art.Art_Kassa = pArtikel.Art_Kassa;
                art.Art_Handheld = pArtikel.Art_Handheld;
                art.Art_Adres = pArtikel.Art_Adres;
                art.Art_Postcode = pArtikel.Art_Postcode;
                art.Art_Plaats = pArtikel.Art_Plaats;
                art.Art_EAN = pArtikel.Art_EAN;
                int ArtId = WriteActions.SaveObject(art);

                if (ArtId < 0)
                    return -1;
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" REPLACE INTO ARTIKEL_VOER (artId, NormVem, NormVevi, NormDVE, NOrmOEB, VoerGroup, NormRE, NormP, NormK, NormCalcium, NormNatrium, NormMagnesium, DrogeStof, MinasCategory, SubMinasCategory, ArtDierMineraalGroep)");
                lQuery.AppendFormat(" VALUES ({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15})", ArtId, pArtikel.NormVem, pArtikel.NormVevi, pArtikel.NormDVE, pArtikel.NormOEB, pArtikel.VoerGroup, pArtikel.ArtNormRE, pArtikel.ArtNormP, pArtikel.ArtNormK, pArtikel.NormCalcium, pArtikel.NormNatrium, pArtikel.NormMagnesium, pArtikel.ArtDrogestof, pArtikel.ArtMinasCategorie, pArtikel.ArtMinasSubCategorie, pArtikel.ArtDiermineraalgroep);

                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = lQuery.ToString();
                //Don't return false, a new Article is inserted, just not the ARTIKEL_VOER table
                //TODO make it a transaction
                try
                {
                    mDatabase.ExecuteNonQuery(mToken, lQuery.ToString());
                    //mDatabase.ExecuteNonQueryCommand(cmd);
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                }

                return ArtId;
            }
            else
                return -1;
        }

        public ARTIKELUBN getArticleUbn(int pUbnId, int pArtId)
        {
            ARTIKELUBN au = new ARTIKELUBN();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM ARTIKELUBN where UBNid= " + pUbnId.ToString() + " AND ArtId= " + pArtId.ToString());
            bool hasresults = mDatabase.FillObject(mToken, au, lQuery);
            return hasresults ? au : null;
        }


        public bool AddArticleUbn(ARTIKELUBN pArtikelUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pArtikelUbn);
            //cmd.CommandText = mDatabase.CreateInsertCommandText(pArtikelUbn);
            try
            {
                if (WriteActions.SaveObject(pArtikelUbn) < 0) return false;
                return true;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteArticleUbn(ARTIKELUBN pArtikelUbn)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pArtikelUbn);
            String[] DeleteParams = new String[]
             {
                 "UBNid",
                 "ArtId"
             };
            string CommandText = mDatabase.CreateDeleteCommandText(pArtikelUbn, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pArtikelUbn, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {

                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }




        #region AGRO_LABELS



        /*
         * Filter order:
         * 
         * labCountry + labProgramId
         * labProgramId
         * labCountry + labProgId
         * labProgId
         * labCountry
         * labKind, LabCountry = 0, labProgramid = 0, labProgId = 0
         */


        public List<AGRO_LABELS> GetAgroLabels(VSM.RUMA.CORE.DB.LABELSConst.labKind pLabKind, int pLabCountry, int pLabProgramId, int pLabProgId)
        {
            return GetAgroLabels((int)pLabKind, pLabCountry, pLabProgramId, pLabProgId);
        }

        public List<AGRO_LABELS> GetAgroLabels(List<VSM.RUMA.CORE.DB.LABELSConst.labKind> pLabKinds, int pLabCountry, int pLabProgramId, int pLabProgId)
        {
            List<int> lLabkinds = pLabKinds.Cast<int>().ToList();
            return GetAgroLabels(lLabkinds, pLabCountry, pLabProgramId, pLabProgId);
        }

        public List<AGRO_LABELS> GetAgroLabels(int pLabKind, int pLabCountry, int pLabProgramId, int pLabProgId)
        {
            List<int> lLabs = new List<int>() { pLabKind };
            return GetAgroLabels(lLabs, pLabCountry, pLabProgramId, pLabProgId);
        }

        public List<AGRO_LABELS> GetAgroLabels(List<int> pLabKinds, int pLabCountry, int pLabProgramId, int pLabProgId)
        {
            List<AGRO_LABELS> lResultList = new List<AGRO_LABELS>();

            if (pLabKinds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * ");
                lQuery.Append(" FROM AGRO_LABELS ");
                lQuery.AppendFormat(" WHERE LabKind IN ({0}) ", intListToString(pLabKinds));
                lQuery.AppendFormat(" AND LabProgramId IN (0,{0})", pLabProgramId);
                lQuery.AppendFormat(" AND LabCountry IN (0,{0})", pLabCountry);
                lQuery.AppendFormat(" AND LabProgId IN (0,{0})", pLabProgId);

                DataTable tbl = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    AGRO_LABELS l = new AGRO_LABELS();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }

                List<AGRO_LABELS> lFilteredReturnList = new List<AGRO_LABELS>();

                foreach (int iLabKind in pLabKinds)
                {
                    List<AGRO_LABELS> lLabKindList = lResultList.Where(l => l.LabKind == iLabKind).ToList();
                    List<AGRO_LABELS> res;

                    //labCountry + labProgramId
                    res = lLabKindList.Where(al => al.LabCountry == pLabCountry && al.LabProgramID == pLabProgramId).ToList();
                    if (res.Count() > 0)
                    {
                        lFilteredReturnList.AddRange(res);
                        continue;
                    }

                    //labProgramId
                    res = lLabKindList.Where(al => al.LabProgramID == pLabProgramId).ToList();
                    if (res.Count() > 0)
                    {
                        lFilteredReturnList.AddRange(res);
                        continue;
                    }

                    //labCountry + labProgId
                    res = lLabKindList.Where(al => al.LabCountry == pLabCountry && al.LabProgID == pLabProgId).ToList();
                    if (res.Count() > 0)
                    {
                        lFilteredReturnList.AddRange(res);
                        continue;
                    }

                    //labProgId
                    res = lLabKindList.Where(al => al.LabProgID == pLabProgId).ToList();
                    if (res.Count() > 0)
                    {
                        lFilteredReturnList.AddRange(res);
                        continue;
                    }

                    //labCountry
                    res = lLabKindList.Where(al => al.LabCountry == pLabCountry).ToList();
                    if (res.Count() > 0)
                    {
                        lFilteredReturnList.AddRange(res);
                        continue;
                    }

                    //default
                    lFilteredReturnList.AddRange(lLabKindList);
                }

                if (lFilteredReturnList.Count() > 0)
                {
                    return lFilteredReturnList;
                }
                else
                {
                    return lResultList;
                }

            }
            return lResultList;
        }



        #endregion





        public void SaveIdealPayement(ADMINISTRATIE pWILL, BEDRIJF pIDealBedrijf, ARTIKEL pArtikel, double pSupQuantity, DAGBOEK pDagboek, string pMerchantId, string pTransactionReference, THIRD pTegenpartij, double pBedrag, DateTime pBetaaldatum, string pMemo, string pFactuurnr)
        {
            try
            {
                //ADMINISTRATIE WILL = getAdminByAdmisId(25);
                //00 Transaction success,
                if (pWILL.ThrID == 0)
                {
                    if (pIDealBedrijf.UBNid > 0)
                    {
                        UBN lUbn = GetubnById(pIDealBedrijf.UBNid);
                        pWILL.ThrID = lUbn.ThrID;
                    }

                }
                List<BTWPERC> BtwPercs = GetBTWPercentages(pIDealBedrijf.FarmId);

                BANK_TRANSACTIE btr = getBANK_TRANSACTIE(pTransactionReference);

                BANK_BOEKING bk = new BANK_BOEKING();
                BANK_BOEKING_REGEL br = new BANK_BOEKING_REGEL();
                FACTUUR fact = new FACTUUR();
                if (pFactuurnr != "")
                {
                    fact = getFactuurByORderIDANDFarmID(pIDealBedrijf.FarmId, pDagboek.DgbId, pFactuurnr);
                    if (fact.FactRelatieId > 0)//anders oversschrijf ik een oude 
                    {
                        fact = new FACTUUR();
                    }
                }
                SUPPLY1 sup = new SUPPLY1();

                if (btr.BT_ID > 0)
                {
                    List<BANK_BOEKING_REGEL> brlasts = getBANK_BOEKING_REGELsByBT_ID(btr.BT_ID);
                    if (brlasts.Count() > 0)
                    {
                        if (brlasts.ElementAt(0).BB_ID > 0)
                        {
                            bk = getBANK_BOEKINGbyBB_ID(brlasts.ElementAt(0).BB_ID);
                            if (brlasts.ElementAt(0).FactId > 0)
                            {
                                fact = GetFactuur(brlasts.ElementAt(0).FactId);
                            }
                        }
                    }
                }



                fact.FarmId = pIDealBedrijf.FarmId;
                fact.FactDatum = DateTime.Now;
                fact.FactRelatieId = pTegenpartij.ThrId;
                fact.ThrID = pWILL.ThrID;
                fact.FactMemo = pMemo;
                fact.Baliebon_nr = "";
                fact.Baliebon_uid = 0;
                fact.FactDagBoekId = pDagboek.DgbId;
                if (pFactuurnr == "")
                {
                    if (pIDealBedrijf.ProgId == 25)
                    {
                        string nummer = "";
                        int ret = getNextFactuurNummerWill(fact.FarmId, fact.FactDagBoekId, out nummer);
                        fact.FactNummer = nummer;
                    }
                    else
                    {
                        fact.FactNummer = factuur_getNextFactNummer(fact.FarmId, fact.FactDagBoekId);
                    }
                }
                else
                {
                    fact.FactNummer = pFactuurnr;
                }
                int retFactId = SaveFactuur(fact);


                sup.Factid = retFactId;
                sup.SupMemo = pTransactionReference;
                sup.SupPayPrice = pBedrag;
                sup.Artikelid = pArtikel.ArtId;
                sup.SupGrootboekId = pArtikel.ArtGrootboekVerk;
                sup.SupQuantity = pSupQuantity;
                sup.SupBTWId = Convert.ToInt32(pArtikel.ArtBTWcode);
                sup.FarmId_Ontvanger = 0;
                sup.SupLeveringsDatum = pBetaaldatum;
                var btwitems = from n in BtwPercs
                               where n.BTWId == Convert.ToInt32(sup.SupBTWId)
                               select n;
                BTWPERC BtwPerc = new BTWPERC();
                BtwPerc.BTWpercentage = 21;
                BtwPerc.BTW_Afdrukcode = "21";
                if (btwitems.Count() > 0)
                {
                    BtwPerc = btwitems.ElementAt(0);
                }

                if (pArtikel.ArtPrijsExclusief == 1)
                {
                    sup.SupVatPrice = pSupQuantity * pArtikel.ArtVasteprijs * BtwPerc.BTWpercentage / 100;
                }
                else
                {
                    sup.SupVatPrice = pSupQuantity * pArtikel.ArtVasteprijs * BtwPerc.BTWpercentage / 100;
                }
                sup.SupTotalPriceEx = sup.SupPayPrice - sup.SupVatPrice;
                int SupId = SaveSupply(sup);

                btr.BT_Bedrag = pBedrag;
                btr.BT_Credit = 0;                          //1 = CREDIT, DEBET = 0
                btr.BT_Eigen_ThrID = pWILL.ThrID;
                btr.BT_Omschrijving_Transactie = pMemo;
                btr.BT_Tegenpartij_Adres = pTegenpartij.ThrStreet1;
                btr.BT_Tegenpartij_Naam = pTegenpartij.ThrSecondName;
                btr.BT_Tegenpartij_ThrID = pTegenpartij.ThrId;
                btr.BT_Tegenpartij_Woonplaats = pTegenpartij.ThrCity;
                btr.BT_Transactie_ID = pTransactionReference;
                btr.BT_Eigen_IBAN = "";//Onbekend
                btr.BT_Boekdatum = pBetaaldatum;
                btr.BT_StatusID = 2;
                int BT_ID = SaveBankTransaction(btr);

                btr.BT_ID = BT_ID;

                bk.ThrID = pWILL.ThrID;// Dus niet pTegenpartij.ThrId;
                bk.BB_Datum = pBetaaldatum;
                bk.AdmisID = pWILL.AdmisID;                  // 25;//Wil mennings
                bk.DgbID = pDagboek.DgbId;
                bk.BB_Boekstuk_Nr = getNewBB_Boekstuk_Nr(bk.AdmisID, bk.ThrID, bk.DgbID);
                int BB_ID = SaveBankBoeking(bk);
                bk.BB_ID = BB_ID;

                br.BB_ID = BB_ID;                        //van BANK_BOEKING
                br.BBR_Regel_Bedrag = pBedrag;
                br.BBR_Regel_Datum = pBetaaldatum;
                br.BBR_Regel_Omschrijving = pMemo;
                br.BBR_ThrID = pTegenpartij.ThrId;
                br.BT_ID = btr.BT_ID;                       //van BANK_TRANSACTIE
                br.BBR_Betaling = 0;
                br.BBR_Directe_Boeking = 1;
                br.FactId = retFactId;
                br.SupplyID = SupId;
                br.GrtbId = sup.SupGrootboekId;
                br.BBR_Regel_Nr = getNewBankBoekRegel_Regel_Nr(br.BB_ID);

                SaveBankBoekingRegel(br);



            }
            catch (Exception exc) { unLogger.WriteDebug("OPSLAAN BETALING IDEAL:" + exc.ToString()); }

        }
        private FACTUUR getFactuurByORderIDANDFarmID(int pFarmId, int pFactDagBoekId, string pOrderID)
        {
            StringBuilder sbQ = new StringBuilder();
            sbQ.Append(
                " SELECT  f.*  " +
                " FROM agrofactuur.FACTUUR f" +
                " WHERE (f.FarmId=" + pFarmId.ToString() + ")" +
                " AND (f.FactDagBoekId=" + pFactDagBoekId.ToString() + ")  " +
                  " AND(f.FarmId=" + pFarmId.ToString() + ")"
                );
            DataTable tbl = mDatabase.QueryData(mToken, sbQ);
            FACTUUR f = new FACTUUR();
            foreach (DataRow drBt in tbl.Rows)
            {
                if (mDatabase.FillObject(f, drBt))
                {
                    break;
                }
            }
            return f;
        }
        public BANK_BOEKING getBANK_BOEKINGbyBB_ID(int pBB_ID)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM BANK_BOEKING ");
            lQuery.AppendFormat(" WHERE BANK_BOEKING.BB_ID={0} ", pBB_ID);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            BANK_BOEKING lResult = new BANK_BOEKING();
            foreach (DataRow drBt in tbl.Rows)
            {
                if (mDatabase.FillObject(lResult, drBt))
                {
                    break;
                }
            }
            return lResult;
        }

        public List<BANK_BOEKING_REGEL> getBANK_BOEKING_REGELsByBT_ID(int pBT_ID)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM BANK_BOEKING_REGEL ");
            lQuery.AppendFormat(" WHERE BANK_BOEKING_REGEL.BT_ID= {0} ", pBT_ID);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<BANK_BOEKING_REGEL> lResultList = new List<BANK_BOEKING_REGEL>();
            foreach (DataRow drBt in tbl.Rows)
            {
                BANK_BOEKING_REGEL lBtr = new BANK_BOEKING_REGEL();
                if (mDatabase.FillObject(lBtr, drBt))
                {
                    lResultList.Add(lBtr);
                }
            }
            return lResultList;
        }

        public BANK_TRANSACTIE getBANK_TRANSACTIE(string pTransactionReference)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM BANK_TRANSACTIE ");
            lQuery.AppendFormat(" WHERE BANK_TRANSACTIE.BT_Transactie_ID='{0}' ", pTransactionReference);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            BANK_TRANSACTIE lResult = new BANK_TRANSACTIE();
            foreach (DataRow drBt in tbl.Rows)
            {
                if (mDatabase.FillObject(lResult, drBt))
                {

                }
            }
            return lResult;
        }

        public int getNextFactuurNummerWill(int pFarmId, int pFactDagBoekId, out string pRealNumber)
        {

            StringBuilder sbQ = new StringBuilder();
            sbQ.Append(
                " SELECT  f.FactNummer AS FactNummer  " +
                " FROM agrofactuur.FACTUUR f" +
                " WHERE (f.FarmId=" + pFarmId.ToString() + ")" +
                " AND (f.FactDagBoekId=" + pFactDagBoekId.ToString() + ")  "
                );

            string jaar = DateTime.Now.ToString("yyyy");
            pRealNumber = jaar + "-1";
            int nextnr = 1;
            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            char[] spl = { '-' };

            foreach (DataRow rw in dt.Rows)
            {
                if (rw["FactNummer"] != DBNull.Value)
                {
                    try
                    {
                        string[] spr = rw["FactNummer"].ToString().Split(spl);
                        if (spr.Length == 2)
                        {
                            if (jaar == spr[0])
                            {
                                if (int.Parse(spr[1]) > nextnr)
                                {
                                    nextnr = int.Parse(spr[1]);
                                }
                            }
                        }
                    }
                    catch { }
                }
            }

            nextnr = nextnr + 1;

            pRealNumber = jaar + "-" + nextnr.ToString();


            return nextnr;
        }

        public List<BANK_TRANSACTIE> getTransActiesByTegenPartij(int pTegenpartijThrId)
        {

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM BANK_TRANSACTIE ");
            lQuery.AppendFormat(" WHERE BANK_TRANSACTIE.BT_Tegenpartij_ThrID= {0} ", pTegenpartijThrId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<BANK_TRANSACTIE> lResultList = new List<BANK_TRANSACTIE>();
            foreach (DataRow drBt in tbl.Rows)
            {
                BANK_TRANSACTIE lBtr = new BANK_TRANSACTIE();
                if (mDatabase.FillObject(lBtr, drBt))
                {
                    lResultList.Add(lBtr);
                }
            }
            return lResultList;
        }

        private int getNewBankBoekRegel_Regel_Nr(int pBB_ID)
        {
            StringBuilder sbQ = new StringBuilder();

            sbQ.Append(
                " SELECT MAX(BANK_BOEKING_REGEL.BBR_Regel_Nr) AS BBR_Regel_Nr " +
                " FROM BANK_BOEKING_REGEL " +
                " WHERE BANK_BOEKING_REGEL.BB_ID=" + pBB_ID.ToString());


            int tmpInt = 0;

            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            if (dt.Rows[0][0] != DBNull.Value)
            {
                int.TryParse(dt.Rows[0][0].ToString(), out tmpInt);
            }

            tmpInt += 1;
            return tmpInt;
        }

        public int getNewBB_Boekstuk_Nr(int pAdmisID, int pThrID, int pDgbID)
        {

            StringBuilder sbQ = new StringBuilder();

            sbQ.Append(
                " SELECT MAX(BANK_BOEKING.BB_Boekstuk_Nr) AS Boekstuk_Nr " +
                " FROM BANK_BOEKING " +
                " WHERE BANK_BOEKING.AdmisID=" + pAdmisID.ToString() +
                " AND BANK_BOEKING.ThrID=" + pThrID.ToString() +
                " AND BANK_BOEKING.DgbID=" + pDgbID.ToString());

            int tmpInt = 0;

            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            if (dt.Rows[0][0] != DBNull.Value)
            {
                int.TryParse(dt.Rows[0][0].ToString(), out tmpInt);
            }

            tmpInt += 1;
            return tmpInt;
        }

        public int SaveBankTransaction(BANK_TRANSACTIE pBankTransaction)
        {
            try
            {
                return WriteActions.SaveObject(pBankTransaction);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }

        public int SaveBankBoeking(BANK_BOEKING pBankBoeking)
        {
            try
            {
                return WriteActions.SaveObject(pBankBoeking);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }

        public int GetNewBankBoekingRegel_Regel_Nr(int pBB_ID)
        {

            StringBuilder sbQ = new StringBuilder();

            sbQ.Append(
                " SELECT MAX(BBR_Regel_Nr) AS sMax" +
                " FROM agrofactuur.BANK_BOEKING_REGEL " +
                " WHERE (agrofactuur.BANK_BOEKING_REGEL.BB_ID=" + pBB_ID.ToString());

            int tmpInt = 0;

            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            if (dt != null)
            {
                int.TryParse(dt.Rows[0].ItemArray[0].ToString(), out tmpInt);
            }

            tmpInt += 1;
            return tmpInt;
        }

        public int SaveBankBoekingRegel(BANK_BOEKING_REGEL pBankBoekingRegel)
        {
            try
            {
                return WriteActions.SaveObject(pBankBoekingRegel);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }

        public List<DAGBOEK> GetAllDagboek(int pFarmId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM DAGBOEK");
            lQuery.AppendFormat(" WHERE FarmId IN (0, {0})", pFarmId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<DAGBOEK> lResultList = new List<DAGBOEK>();
            foreach (DataRow drDagboek in tbl.Rows)
            {
                DAGBOEK lDagboek = new DAGBOEK();
                if (mDatabase.FillObject(lDagboek, drDagboek))
                {
                    lResultList.Add(lDagboek);
                }
            }
            return lResultList;
        }

        public List<DAGBOEK> GetDagboekBySoort(int pFarmId, int pSoort)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM DAGBOEK");
            lQuery.AppendFormat(" WHERE FarmId IN (0, {0}) AND DgbSoort = {1}", pFarmId, pSoort);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<DAGBOEK> lResultList = new List<DAGBOEK>();
            foreach (DataRow drDagboek in tbl.Rows)
            {
                DAGBOEK lDagboek = new DAGBOEK();
                if (mDatabase.FillObject(lDagboek, drDagboek))
                {
                    lResultList.Add(lDagboek);
                }
            }
            return lResultList;
        }

        public List<GROOTBOEK> GetAllGrootboek(int pFarmId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM GROOTBOEK");
            lQuery.AppendFormat(" WHERE FarmId IN (0, {0})", pFarmId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<GROOTBOEK> lResultList = new List<GROOTBOEK>();
            foreach (DataRow drGrootboek in tbl.Rows)
            {
                GROOTBOEK lGrootboek = new GROOTBOEK();
                if (mDatabase.FillObject(lGrootboek, drGrootboek))
                {
                    lResultList.Add(lGrootboek);
                }
            }
            return lResultList;
        }

        public BTWPERC GetBTWPerc(int pBtwId)
        {
            BTWPERC btw = new BTWPERC();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM BTWPERC");
            lQuery.AppendFormat(" WHERE BtwId = {0}", pBtwId);
            bool hasresults = mDatabase.FillObject(mToken, btw, lQuery);
            return hasresults ? btw : null;
        }

        public List<BTWPERC> GetBTWPercentages(int pFarmId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM BTWPERC");
            lQuery.AppendFormat(" WHERE FarmId = {0} OR FarmId=0 ", pFarmId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<BTWPERC> lResultList = new List<BTWPERC>();
            foreach (DataRow drBtwPerc in tbl.Rows)
            {
                BTWPERC lBtwPerc = new BTWPERC();
                if (mDatabase.FillObject(lBtwPerc, drBtwPerc))
                {
                    lResultList.Add(lBtwPerc);
                }
            }
            return lResultList;
        }

        public List<FACTUUR> GetAllFactuur(int pFarmId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM FACTUUR");
            lQuery.AppendFormat(" WHERE FarmId = {0}", pFarmId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<FACTUUR> lResultList = new List<FACTUUR>();
            foreach (DataRow drFactuur in tbl.Rows)
            {
                FACTUUR lFactuur = new FACTUUR();
                if (mDatabase.FillObject(lFactuur, drFactuur))
                {
                    lResultList.Add(lFactuur);
                }
            }
            return lResultList;
        }

        public DataTable GetFactuurByFactRelatie(int pFarmId, int pFactRelatieId, List<int> pArtikelIds)
        {
            DataTable lResultList = new DataTable();
            if (pArtikelIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT  SUPPLY1.SupQuantity ,SUPPLY1.Artikelid, FACTUUR.* ");
                lQuery.Append(" FROM FACTUUR ");
                lQuery.Append(" JOIN SUPPLY1 ON SUPPLY1.Factid=FACTUUR.FactId ");
                lQuery.AppendFormat(" WHERE FACTUUR.FarmId = {0} AND FACTUUR.FactRelatieId={1} ", pFarmId, pFactRelatieId);
                lQuery.Append("  AND SUPPLY1.Artikelid IN (" + intListToString(pArtikelIds) + ") ");
                DataSet ds = new DataSet();
                lResultList = mDatabase.QueryData(mToken, ds, lQuery, "facts", MissingSchemaAction.Add);


            }
            return lResultList;
        }
        public List<FACTUUR> GetFactuurByFarmIdMonthTypeRelation(int pFarmId, DateTime pYearAndMonth, int pFactRelatieId, int pFactSoort)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM FACTUUR");
            lQuery.AppendFormat(" WHERE FarmId = {0}", pFarmId);
            lQuery.AppendFormat(" AND FactRelatieId = {0}", pFactRelatieId);
            lQuery.AppendFormat(" AND FactSoort = {0}", pFactSoort);
            lQuery.AppendFormat(" AND year(FactDatum) = {0}", pYearAndMonth.Year);
            lQuery.AppendFormat(" AND month(FactDatum) = {0}", pYearAndMonth.Month);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<FACTUUR> lResultList = new List<FACTUUR>();
            foreach (DataRow drFactuur in tbl.Rows)
            {
                FACTUUR lFactuur = new FACTUUR();
                if (mDatabase.FillObject(lFactuur, drFactuur))
                {
                    lResultList.Add(lFactuur);
                }
            }
            return lResultList;
        }


        [Obsolete("oude functie voor artikelaanvoer.aspx scherm, nieuwe functie artikelaanvoer_getFactuurList()")]
        public List<FACTUUR> GetAllFactuurWithArtikelWithHerkomst(int pFarmId, int pArtHerkomst)
        {
            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT f.* ");
            lQuery.Append(" FROM FACTUUR f ");
            lQuery.AppendFormat(" WHERE f.FarmId = {0}", pFarmId);
            lQuery.Append("  AND (");
            lQuery.Append("  f.FactId IN ");
            lQuery.AppendFormat(" (SELECT s.FactId FROM SUPPLY1 s WHERE s.ArtikelId IN (SELECT a.ArtId FROM ARTIKEL a WHERE ArtHerkomst = {0}))", pArtHerkomst);
            lQuery.Append(" ");
            lQuery.Append(" OR NOT f.FactId IN (SELECT s.FactId FROM SUPPLY1 s )");
            lQuery.Append(" )");

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<FACTUUR> lResultList = new List<FACTUUR>();
            foreach (DataRow drFactuur in tbl.Rows)
            {
                FACTUUR lFactuur = new FACTUUR();
                if (mDatabase.FillObject(lFactuur, drFactuur))
                {
                    lResultList.Add(lFactuur);
                }
            }
            return lResultList;
        }


        public DataTable artikelaanvoer_getFactuurList(int pFarmId, int pThrId, int pArtHerkomst)
        {
            StringBuilder sbQ = new StringBuilder();

            sbQ.Append(
                "SELECT DISTINCT f.FactId, f.FarmId, f.ThrId, u.Bedrijfsnummer," +
                               " f.FactNummer, DATE(f.FactDatum) AS FactDatum, f.FactInkoopfactuurnr," +
                               " tFact.ThrCompanyName AS tFact_ThrCompanyName," +
                               " tFactRelatie.ThrCompanyName AS tFactRelatie_ThrCompanyName" +
                " FROM agrofactuur.FACTUUR f" +
                " LEFT JOIN agrofactuur.BEDRIJF b ON (b.FarmId=f.FarmId)" +
                " LEFT JOIN agrofactuur.UBN u ON (u.UbnId=b.Ubnid)" +
                " LEFT JOIN agrofactuur.THIRD tFact ON (tFact.ThrId=f.ThrId)" +
                " LEFT JOIN agrofactuur.THIRD tFactRelatie ON (tFactRelatie.ThrId=f.FactRelatieId)" +
                " LEFT JOIN agrofactuur.SUPPLY1 s ON (s.Factid=f.FactId)" +
                " LEFT JOIN agrofactuur.ARTIKEL a ON (a.ArtId=s.Artikelid)" +
                " WHERE ((f.FarmId=" + pFarmId.ToString() + ") OR " +
                       " (f.ThrId=" + pThrId.ToString() + ") OR " +
                       " (s.FarmId_Ontvanger=" + pFarmId.ToString() + "))" +
                " AND ((a.ArtHerkomst=" + pArtHerkomst.ToString() + ") OR ISNULL(a.ArtHerkomst))" +
                " AND f.FactId > 0 " +
                " ORDER BY f.FactDatum DESC, f.FactId DESC"
                );

            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            return dt;
        }

        public DataTable artikelaanvoer_getFactuurRegel(int pFarmId, int pFactId, int pArtHerkomst)
        {
            StringBuilder sbQ = new StringBuilder();

            BEDRIJF bedr = GetBedrijfById(pFarmId);

            string sQuantity = "";
            if (pArtHerkomst == ARTIKEL.ARTIKEL_HERKOMST_VOER)
            {
                sQuantity = "s.SupVolume AS Quantity";
            }
            else
            {
                sQuantity = "s.SupQuantity AS Quantity";
            }

            if ((pArtHerkomst == ARTIKEL.ARTIKEL_HERKOMST_VOER) && (bedr.Programid == 9))
            {
                //FORFARMERS: EXTRA CHECK OP ARTIKEL.IDO_HIERARCHIE OM TE FILTEREN OP DIERSOORT
                sbQ.Append(
                    "SELECT DISTINCT s.SupplyId, s.FarmId_Ontvanger, t.ThrCompanyName," +
                            " u.Bedrijfsnummer, s.SupTotalPriceEx, a.ArtNaam, " + sQuantity +
                            ", SUBSTRING(a.IDO_hierarchie, 4, 3) as hierarchie902" +
                    " FROM agrofactuur.SUPPLY1 s" +
                    " LEFT JOIN agrofactuur.BEDRIJF b ON (b.FarmId=s.FarmId_Ontvanger)" +
                    " LEFT JOIN agrofactuur.UBN u ON (u.UbnId=b.Ubnid)" +
                    " LEFT JOIN agrofactuur.THIRD t ON (t.ThrId=u.ThrID)" +
                    " LEFT JOIN agrofactuur.ARTIKEL a ON (a.ArtId=s.Artikelid)" +
                    " WHERE (s.Factid=" + pFactId.ToString() + ")" +
                    " AND ((s.FarmId_Ontvanger=" + pFarmId.ToString() + ") OR ISNULL(s.FarmId_Ontvanger) OR (s.FarmId_Ontvanger=0))" +
                    " AND (a.ArtHerkomst=" + pArtHerkomst.ToString() + ")" +
                    " AND s.SupplyId>0 " +
                    " HAVING ((hierarchie902=001) OR ISNULL(hierarchie902) OR (hierarchie902=''))" // #hierarchie902=001 --> rundvee 
                    );

                DataTable dt = mDatabase.QueryData(mToken, sbQ);
                return dt;
            }
            else
            {
                //default query
                sbQ.Append(
                    "SELECT DISTINCT s.SupplyId, s.FarmId_Ontvanger, t.ThrCompanyName," +
                            " u.Bedrijfsnummer, s.SupTotalPriceEx, a.ArtNaam, " + sQuantity +
                    " FROM agrofactuur.SUPPLY1 s" +
                    " LEFT JOIN agrofactuur.BEDRIJF b ON (b.FarmId=s.FarmId_Ontvanger)" +
                    " LEFT JOIN agrofactuur.UBN u ON (u.UbnId=b.Ubnid)" +
                    " LEFT JOIN agrofactuur.THIRD t ON (t.ThrId=u.ThrID)" +
                    " LEFT JOIN agrofactuur.ARTIKEL a ON (a.ArtId=s.Artikelid)" +
                    " WHERE (s.Factid=" + pFactId.ToString() + ")" +
                    " AND s.SupplyId>0 " +
                    " AND ((s.FarmId_Ontvanger=" + pFarmId.ToString() + ") OR ISNULL(s.FarmId_Ontvanger) OR (s.FarmId_Ontvanger=0))" +
                    " AND (a.ArtHerkomst=" + pArtHerkomst.ToString() + ")"
                );

                DataTable dt = mDatabase.QueryData(mToken, sbQ);
                return dt;
            }
        }

        public int artikelaanvoer_getAantalFactuurRegels(int pFactId)
        {
            StringBuilder sbQ = new StringBuilder();

            sbQ.Append(
                "SELECT COUNT(SupplyId) AS cnt" +
                " FROM agrofactuur.SUPPLY1" +
                " WHERE FactId=" + pFactId.ToString()
                );

            int cnt = 0;

            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            if (dt != null)
            {
                int.TryParse(dt.Rows[0].ItemArray[0].ToString(), out cnt);
            }

            return cnt;
        }

        public FACTUUR GetFactuur(int pFactId)
        {
            FACTUUR fact = new FACTUUR();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM FACTUUR");
            lQuery.AppendFormat(" WHERE FactId = {0}", pFactId);
            bool hasresults = mDatabase.FillObject(mToken, fact, lQuery);
            return hasresults ? fact : null;
        }

        public int SaveFactuur(FACTUUR pFact)
        {
            try
            {
                return WriteActions.SaveObject(pFact);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }

        public int SaveMedstock(MEDSTOCK pMedstock)
        {
            try
            {
                return WriteActions.SaveObject(pMedstock);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }

        private int getGENERAL_UNIQUE_ID(int FarmId, VSM.RUMA.CORE.DB.LABELSConst.TYPEID typeId, VSM.RUMA.CORE.DB.LABELSConst.GUI_EXTERNAL_KIND externalKind, string GENERAL_UNIQUE_ID)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(String.Format("SELECT GUI_UNIQUE_ID FROM GENERAL_UNIQUE_IDS WHERE GUI_TypeID = {0} AND GUI_External_Kind = {1} AND FarmID = {2} AND GUI_External_Unique_ID = '{3}'", (int)typeId, (int)externalKind, FarmId, GENERAL_UNIQUE_ID));
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (tbl.Rows.Count == 0)
                return 0;

            return (int)tbl.Rows[0][0];
        }

        public SUPPLY1 getSupplyByExtDbAndType(int pFarmId, VSM.RUMA.CORE.DB.LABELSConst.GUI_EXTERNAL_KIND external_kind, string pExtdb_id)
        {
            int supplyId = getGENERAL_UNIQUE_ID(pFarmId, VSM.RUMA.CORE.DB.LABELSConst.TYPEID.SUPPLY1, external_kind, pExtdb_id);
            if (supplyId == 0)
                return null;
            return GetSupply(supplyId);
        }

        public bool SaveGeneralUniqueId(GENERAL_UNIQUE_IDS guid)
        {
            try
            {
                if (WriteActions.SaveObject(guid) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<SUPPLY1> GetSupplyByFactuur(int pFactId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM SUPPLY1");
            lQuery.AppendFormat(" WHERE FactId IN (0, {0}) AND SupplyId>0 ", pFactId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<SUPPLY1> lResultList = new List<SUPPLY1>();
            foreach (DataRow drSupply in tbl.Rows)
            {
                SUPPLY1 lSupply = new SUPPLY1();
                if (mDatabase.FillObject(lSupply, drSupply))
                {
                    lResultList.Add(lSupply);
                }
            }
            return lResultList;
        }

        public SUPPLY1 GetSupply(int pSupplyId)
        {
            SUPPLY1 supp = new SUPPLY1();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM SUPPLY1");
            lQuery.AppendFormat(" WHERE SupplyId = {0}", pSupplyId);
            bool hasresults = mDatabase.FillObject(mToken, supp, lQuery);
            return hasresults ? supp : null;
        }

        public int SaveSupply(SUPPLY1 pSupply)
        {
            try
            {
                if (!isFilledByDb(pSupply))
                {
                    return WriteActions.SaveObject(pSupply);
                }
                else
                {
                    String[] UpdateParams = new String[]
                    {
                        "SupplyId"
                    };

                    //DbDataReader reader;
                    //DbCommand cmdSup;

                    #region check SiloToSmall
                    if (pSupply.StorageId > 0)
                    {
                        bool bSiloToSmall = false;

                        //cmdSup = mDatabase.CreateCommand(mToken.getLastChildConnection());
                        //cmdSup.CommandType = System.Data.CommandType.Text;
                        //cmdSup.CommandText = String.Format("SELECT capaciteit FROM STORAGE WHERE InternalSiloNr = {0}", pSupply.StorageId);

                        //reader = cmdSup.ExecuteReader();


                        object capaciteit = mDatabase.GetSingleValue(mToken, String.Format("SELECT capaciteit FROM STORAGE WHERE InternalSiloNr = {0}", pSupply.StorageId));

                        //try
                        //{
                        //if (reader.HasRows)
                        if (capaciteit != null)
                        {
                            //reader.Read();
                            double f;
                            //if (double.TryParse(reader.GetValue(0).ToString(), out f))
                            if (double.TryParse(capaciteit.ToString(), out f))
                            {
                                if (f < pSupply.SupVolume)
                                    bSiloToSmall = true;
                            }
                        }
                        //}
                        //finally
                        //{
                        //    reader.Close();
                        //}

                        if (bSiloToSmall)
                            return -3;
                    }
                    #endregion

                    #region check VolumeToSmall
                    bool bVolumeToSmall = false;

                    //cmdSup = mDatabase.CreateCommand(mToken);
                    //cmdSup.CommandType = System.Data.CommandType.Text;
                    //cmdSup.CommandText = String.Format("SELECT SUM(SupVolume) FROM SUPPLY1_GROUP WHERE supplyId = {0}", pSupply.SupplyId);

                    //reader = cmdSup.ExecuteReader();

                    object sumvolume = mDatabase.GetSingleValue(mToken, String.Format("SELECT SUM(SupVolume) FROM SUPPLY1_GROUP WHERE supplyId = {0}", pSupply.SupplyId));
                    //try
                    //{

                    //if (reader.HasRows)
                    if (sumvolume != null)
                    {
                        //reader.Read();
                        double f;
                        //if (double.TryParse(reader.GetValue(0).ToString(), out f))
                        if (double.TryParse(sumvolume.ToString(), out f))
                        {
                            if (f > pSupply.SupVolume)
                                bVolumeToSmall = true;
                        }
                    }
                    //}
                    //finally
                    //{
                    //    reader.Close();
                    //}

                    if (bVolumeToSmall)
                        return -2;
                    #endregion
                    return WriteActions.SaveObject(pSupply);
                }
                //return -1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public List<SUPPLY1_MEDIC> GetSupplyMedicByFactuur(int pFactId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM SUPPLY1_MEDIC");
            lQuery.AppendFormat(" WHERE FactId IN (0, {0})", pFactId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<SUPPLY1_MEDIC> lResultList = new List<SUPPLY1_MEDIC>();
            foreach (DataRow drSupply in tbl.Rows)
            {
                SUPPLY1_MEDIC lSupply = new SUPPLY1_MEDIC();
                if (mDatabase.FillObject(lSupply, drSupply))
                {
                    lResultList.Add(lSupply);
                }
            }
            return lResultList;
        }

        public SUPPLY1_MEDIC GetSupplyMedic(int pSupplyId)
        {
            SUPPLY1_MEDIC supp = new SUPPLY1_MEDIC();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM SUPPLY1_MEDIC");
            lQuery.AppendFormat(" WHERE SupplyId = {0} ", pSupplyId);
            bool hasresults = mDatabase.FillObject(mToken, supp, lQuery);
            return hasresults ? supp : null;
        }


        public List<SCCURVE> GetSccurves(int pFarmID, int pCurveKind, int pAniKind)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM SCCURVE ");
            lQuery.AppendFormat(" WHERE FarmID={0} AND CurveKind={1} AND CurveNr>0  ", pFarmID, pCurveKind);
            if (pAniKind > 0)
            {
                lQuery.AppendFormat(" AND AniKind={0}  ", pAniKind);
            }
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);

            List<SCCURVE> lResultList = new List<SCCURVE>();
            foreach (DataRow drSupply in tbl.Rows)
            {
                SCCURVE lSccurve = new SCCURVE();
                if (mDatabase.FillObject(lSccurve, drSupply))
                {
                    lResultList.Add(lSccurve);
                }
            }
            return lResultList;
        }

        public SCCURVE GetSccurve(int pCurveNr)
        {
            SCCURVE sccurve = new SCCURVE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM SCCURVE");
            lQuery.AppendFormat(" WHERE CurveNr = {0} ", pCurveNr);
            bool hasresults = mDatabase.FillObject(mToken, sccurve, lQuery);
            return sccurve;
        }

        public int SaveSccurve(SCCURVE pSCCurve)
        {
            try
            {
                return WriteActions.SaveObject(pSCCurve);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public bool deleteSCCurve(SCCURVE pSCCurve)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pSCCurve);
            String[] DeleteParams = new String[]
             {
                 "CurveNr"
             };
            String CommandText = mDatabase.CreateSetNegativeCommandText(pSCCurve, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken, pSCCurve, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<SCCURVED> GetSccurveDs(int pCurveNr)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM SCCURVED ");
            lQuery.AppendFormat(" WHERE CurveNr={0}   ", pCurveNr);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);

            List<SCCURVED> lResultList = new List<SCCURVED>();
            foreach (DataRow drSupply in tbl.Rows)
            {
                SCCURVED lSccurved = new SCCURVED();
                if (mDatabase.FillObject(lSccurved, drSupply))
                {
                    lResultList.Add(lSccurved);
                }
            }
            return lResultList;
        }

        public bool SaveSccurveD(SCCURVED pSCCurveD)
        {
            try
            {
                if (WriteActions.SaveObject(pSCCurveD) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        /// <summary>
        /// Only for Single delete, Never i.c.w. deleteSCCurve
        /// </summary>
        /// <param name="pSCCurve"></param>
        /// <returns></returns>
        public bool deleteSCCurveD(SCCURVED pSCCurveD)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pSCCurveD);
            String[] DeleteParams = new String[]
             {
                 "CurveNr",
                 "Day"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pSCCurveD, DeleteParams);
            try
            {
                return mDatabase.ModifyObject(mToken, pSCCurveD, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }


        public int SaveSupplyMedic(SUPPLY1_MEDIC pSupplyMedic)
        {
            try
            {
                return WriteActions.SaveObject(pSupplyMedic);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int getNextBoekstukNummer(int FarmId, int DagboekId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT ifnull(MAX(BoekStukNummer), 0)");
            lQuery.Append(" FROM agrofactuur.FACTUUR f");
            lQuery.Append(" JOIN agrofactuur.SUPPLY1 s ON s.FactId = f.FactId ");
            lQuery.AppendFormat(" WHERE f.FactDagBoekId = {0}", DagboekId);
            lQuery.AppendFormat(" AND f.FarmId = {0}", FarmId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();
            //DbDataReader reader = cmd.ExecuteReader();
            //reader.Read();
            //int Result = Convert.ToInt32(reader.GetValue(0));
            //reader.Close();
            //return Result;

            DataTable dt = QueryData(lQuery.ToString());
            //saveToDB.GetDataBase().ForceDisconnect(dbToken);
            return Convert.ToInt32(dt.Rows[0][0].ToString());
        }

        public bool deleteSupply(int pSupplyId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat(" UPDATE SUPPLY1 SET SupplyId = -{0}", pSupplyId);
            lQuery.AppendFormat(" WHERE SupplyId = {0}", pSupplyId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();

            bool ret;
            try
            {
                //ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                ret = mDatabase.ExecuteNonQuery(mToken, lQuery.ToString()) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }

            if (ret)
            {
                lQuery = new StringBuilder();
                lQuery.AppendFormat(" UPDATE SUPPLY1_GROUP SET supplyId = -{0} ", pSupplyId);
                lQuery.AppendFormat(" WHERE supplyId = {0}", pSupplyId);
                //cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = lQuery.ToString();
                try
                {
                    mDatabase.ExecuteNonQuery(mToken, lQuery.ToString());
                    //mDatabase.ExecuteNonQueryCommand(cmd);
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                }
            }
            return ret;
        }

        public bool deleteSupplyMedic(int pSupplyId)
        {

            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat(" UPDATE SUPPLY1_MEDIC SET SupplyId = -{0}", pSupplyId);
            lQuery.AppendFormat(" WHERE SupplyId = {0}", pSupplyId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();


            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ExecuteNonQuery(mToken, lQuery.ToString()) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool deleteMedstock(MEDSTOCK pMedstock)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" DELETE FROM MEDSTOCK ");
            lQuery.AppendFormat(" WHERE MedStockId = {0}", pMedstock.MedStockId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();


            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ExecuteNonQuery(mToken, lQuery.ToString()) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public int getFarmIdbySupply(int pSupplyId)
        {
            //DbCommand idcmd = mDatabase.CreateCommand(mToken);
            //idcmd.CommandType = System.Data.CommandType.Text;
            //idcmd.CommandText = String.Format("SELECT f.FarmID FROM SUPPLY1 s JOIN FACTUUR f ON s.FactId = f.FactId WHERE s.SupplyId = {0}", pSupplyId);
            //DbDataReader reader = idcmd.ExecuteReader();
            //int Result = -1;
            //if ((reader.HasRows) && (reader.Read()))
            //    Result = Convert.ToInt32(reader.GetValue(0));
            //reader.Close();            
            //return Result;
            return mDatabase.GetSingleInt(mToken, String.Format("SELECT f.FarmID FROM SUPPLY1 s JOIN FACTUUR f ON s.FactId = f.FactId WHERE s.SupplyId = {0}", pSupplyId));
        }

        public bool saveSupplyGroup(SUPPLY1_GROUP pSupplyGroup)
        {
            try
            {
                if (WriteActions.SaveObject(pSupplyGroup) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("saveSupplyGroup ", ex);
                return false;
            }
            /*
             de Check op overschrijding van de hoeveelheid is 
             verplaatst naar Checker.checkSupplyGroupUpdate 
             * via de aanroepende code
             */

            //try
            //{


            //    DbCommand cmd = mDatabase.CreateParameters(mToken, pSupplyGroup);
            //    if (!isFilledByDb(pSupplyGroup))
            //    {
            //        if (pSupplyGroup.SupVolume > maxVolume)
            //            return -2;

            //        cmd.CommandText = mDatabase.CreateInsertCommandText(pSupplyGroup);
            //    }
            //    else
            //    {
            //        String[] UpdateParams = new String[] 
            //        { 
            //            "supplyId",
            //            "groupId"
            //        };

            //        double f = 0;

            //        cmdSup = mDatabase.CreateCommand(mToken);
            //        cmdSup.CommandType = System.Data.CommandType.Text;
            //        cmdSup.CommandText = String.Format("SELECT SUM(SupVolume) FROM SUPPLY1_GROUP WHERE supplyId = {0} AND groupId <> {1}", pSupplyGroup.SupplyId, pSupplyGroup.GroupId);
            //        reader = cmdSup.ExecuteReader();
            //        try
            //        {
            //            if (reader.HasRows)
            //            {
            //                reader.Read();
            //                double.TryParse(reader.GetValue(0).ToString(), out f);
            //            }
            //        }
            //        finally
            //        {
            //            reader.Close();
            //        }

            //        if (f + pSupplyGroup.SupVolume > maxVolume)
            //            return -2;

            //        cmd = mDatabase.CreateParameters(mToken, pSupplyGroup);
            //        cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pSupplyGroup, UpdateParams);
            //    }


            //    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
            //    {
            //        return 1;
            //    }

            //    return -1;
            //}
            //catch (Exception ex)
            //{
            //    unLogger.WriteError(ex.Message,ex);
            //    return -1;
            //}
        }

        public bool deleteSupplyGroup(int pSupplyId, int pGroupId)
        {

            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = String.Format(" UPDATE SUPPLY1_GROUP SET supplyId = -{0},groupId = -{1}  WHERE supplyId = {0} AND groupId = {1}", pSupplyId, pGroupId);

            try
            {
                return mDatabase.ExecuteNonQuery(mToken, String.Format(" UPDATE SUPPLY1_GROUP SET supplyId = -{0},groupId = -{1}  WHERE supplyId = {0} AND groupId = {1}", pSupplyId, pGroupId)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public SUPPLY1_GROUP getSupplyGroup(int pSupplyId, int pGroupId)
        {
            SUPPLY1_GROUP supg = new SUPPLY1_GROUP();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM SUPPLY1_GROUP");
            lQuery.AppendFormat(" WHERE supplyId = {0} AND groupId = {1}", pSupplyId, pGroupId);
            bool hasresults = mDatabase.FillObject(mToken, supg, lQuery);
            return hasresults ? supg : null;
        }

        public List<SUPPLY1_GROUP> getSupplyGroups(int pSupplyId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM SUPPLY1_GROUP");
            lQuery.AppendFormat(" WHERE SupplyId = {0}", pSupplyId);

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<SUPPLY1_GROUP> lResultList = new List<SUPPLY1_GROUP>();
            foreach (DataRow dr in tbl.Rows)
            {
                SUPPLY1_GROUP lsg = new SUPPLY1_GROUP();
                if (mDatabase.FillObject(lsg, dr))
                {
                    lResultList.Add(lsg);
                }
            }
            return lResultList;
        }
        public List<SUPPLY1_GROUP> getSupplyGroupsByList(List<int> pSupplyIds)
        {
            List<SUPPLY1_GROUP> lResultList = new List<SUPPLY1_GROUP>();
            if (pSupplyIds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * ");
                lQuery.Append(" FROM SUPPLY1_GROUP");
                lQuery.Append(" WHERE SupplyId IN (" + intListToString(pSupplyIds) + ") ");

                DataTable tbl = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    SUPPLY1_GROUP lsg = new SUPPLY1_GROUP();
                    if (mDatabase.FillObject(lsg, dr))
                    {
                        lResultList.Add(lsg);
                    }
                }
            }
            return lResultList;
        }
        public bool deleteFactuur(int pFactId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat(" UPDATE FACTUUR SET FactId = -{0} ", pFactId);
            lQuery.AppendFormat(" WHERE FactId = {0}", pFactId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();

            bool b;

            try
            {
                //b = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                b = mDatabase.ExecuteNonQuery(mToken, lQuery.ToString()) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
            if (!b)
                return false;

            lQuery = new StringBuilder();
            lQuery.Append(" UPDATE SUPPLY1_GROUP SET supplyId = supplyId * -1 ");
            lQuery.AppendFormat(" WHERE supplyId IN (SELECT supplyId FROM SUPPLY1 WHERE FactId = {0})", pFactId);

            //cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();
            try
            {
                mDatabase.ExecuteNonQuery(mToken, lQuery.ToString());
                //mDatabase.ExecuteNonQueryCommand(cmd);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
            }

            lQuery = new StringBuilder();
            lQuery.AppendFormat(" UPDATE SUPPLY1 SET Factid=-{0} ", pFactId);
            lQuery.AppendFormat(" WHERE FactId = {0}", pFactId);

            //cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = lQuery.ToString();
            try
            {
                mDatabase.ExecuteNonQuery(mToken, lQuery.ToString());
                //mDatabase.ExecuteNonQueryCommand(cmd);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
            }

            return true;
        }

        private string FormatVoorloopnullen(string str, int strlen)
        {
            while (str.Length < strlen)
            {
                str = "0" + str;
            }

            return str;
        }

        public string factuur_getNextFactNummer(int pFarmId, int pDagBoekId)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbFunctions.pas)

            //Bepaalt het FACTNUMMER adhv. FARMID en DAGBOEKID
            //Wordt aangeroepen in T_FACTUUR.save() uit rdbtblobjects

            StringBuilder sbQ = new StringBuilder();

            sbQ.Append(
                "SELECT MAX(CAST( TRIM(LEADING 0 FROM f.FactNummer) AS UNSIGNED)) AS sMax" +
                " FROM agrofactuur.FACTUUR f" +
                " WHERE (f.FarmId=" + pFarmId.ToString() + ")" +
                " AND (f.FactDagBoekId=" + pDagBoekId.ToString() + ")"
                );

            int tmpInt = 0;

            DataTable dt = mDatabase.QueryData(mToken, sbQ);
            if (dt != null)
            {
                int.TryParse(dt.Rows[0].ItemArray[0].ToString(), out tmpInt);
            }

            tmpInt += 1;
            string nextFactNummer = FormatVoorloopnullen(tmpInt.ToString(), 10);
            return nextFactNummer;
        }

        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public List<BREEDVAL> getBreedvalsByBreed(BREED lBreed)
        {
            List<BREEDVAL> lResultVals = new List<BREEDVAL>();
            string sql = "SELECT * FROM BREEDVAL ";
            sql += "WHERE date_format(BVDate,'%Y-%m-%d %T')='" + lBreed.BVDate.Year.ToString() + "-" + addleadingzero(lBreed.BVDate.Month.ToString()) + "-" + addleadingzero(lBreed.BVDate.Day.ToString()) + " 00:00:00' ";
            sql += " AND AniId = " + lBreed.AniId.ToString() + " AND BVKindOfValue = " + lBreed.BVKindOfValue.ToString();
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(sql));
            foreach (DataRow drBrvl in tbl.Rows)
            {
                BREEDVAL bv = new BREEDVAL();
                bv.AniId = lBreed.AniId;
                bv.BVDate = lBreed.BVDate;
                bv.BVKindOfValue = lBreed.BVKindOfValue;
                bv.BVFieldNumber = int.Parse(drBrvl["BVFieldNumber"].ToString());
                bv.BVFieldValue1 = int.Parse(drBrvl["BVFieldValue1"].ToString());
                lResultVals.Add(bv);
            }

            return lResultVals;
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public List<BREED> getBreeds(int pAniId, int pBVKindOfValue)
        {
            List<BREED> lResultVals = new List<BREED>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BREED");
            lQuery.AppendFormat(" WHERE AniId = {0} and BVKindOfValue={1} ", pAniId, pBVKindOfValue);

            System.Data.DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            foreach (DataRow drBrvl in tbl.Rows)
            {
                BREED bv = new BREED();
                //bv.AniId = int.Parse(drBrvl["AniId"].ToString());
                //bv.BVDate = (DateTime)drBrvl["BVDate"];
                //bv.BVKindOfValue = int.Parse(drBrvl["BVKindOfValue"].ToString());
                mDatabase.FillObject(bv, drBrvl);
                lResultVals.Add(bv);
            }
            return lResultVals;
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public BREED getBreed(int pAniId, DateTime pBVDate, int pBVKindOfValue)
        {
            BREED lBreed = new BREED();
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.StoredProcedure;
            //cmd.CommandText = "GetBreed";
            //mDatabase.AddParameter(cmd, "FarmNumber", FarmNumber);
            //mDatabase.AddParameter(cmd, "AniId", AniId);
            //mDatabase.AddParameter(cmd, "BVDate", BVDate);
            //mDatabase.AddParameter(cmd, "BVKindOfValue", BVKindOfValue);

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BREED");
            lQuery.AppendFormat(" WHERE AniId = {0} and date_format(BVDate,'%Y-%m-%d %T')='" + getDatabaseDateFormat(pBVDate) + "'  and BVKindOfValue={1}", pAniId, pBVKindOfValue);

            mDatabase.FillObject(mToken.getLastChildConnection(), lBreed, lQuery);
            return lBreed;
        }

        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public BREEDVAL getBreedval(int AniId, DateTime BVDate, int BVKindOfValue, int BVFieldNumber)
        {
            BREEDVAL lBreedval = new BREEDVAL();
            string datum = "AND date_format(BVDate,'%Y-%m-%d %T')='" + BVDate.Year.ToString() + "-" + addleadingzero(BVDate.Month.ToString()) + "-" + addleadingzero(BVDate.Day.ToString()) + " 00:00:00' ";
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BREEDVAL");
            lQuery.AppendFormat(" WHERE AniId = {0} " + datum + " AND BVKindOfValue = {1} AND BVFieldNumber = {2}", AniId, BVKindOfValue, BVFieldNumber);
            mDatabase.FillObject(mToken.getLastChildConnection(), lBreedval, lQuery);
            return lBreedval;
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public bool UpdateBreedval(BREEDVAL pBreedval)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBreedval);
            //String[] UpdateParams = new String[]
            //{
            //    "BVFieldValue1"
            //};
            //String[] pkeys = new String[] 
            //{
            //    "AniId",
            //    "BVDate",
            //    "BVKindOfValue",
            //    "BVFieldNumber" 
            //};
            //cmd.CommandText = mDatabase.CreateUpdateCommandTextDP(pBreedval, pkeys, UpdateParams);
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
            //{
            //    //Probeer nog te inserten 
            //    //TODO net maken
            //    cmd.CommandText = mDatabase.CreateInsertCommandText(pBreedval);
            //    if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
            //        return false;
            //}
            //return true;
            if (WriteActions.SaveObject(pBreedval) < 0) return false;
            return true;
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public bool DeleteBreed(BREED pBreed)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBreed);
            String[] DeleteParams = new String[]
             {
                 "Farmnumber",
                 "AniId",
                 "BVDate",
                 "BVKindOfValue",
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pBreed, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBreed, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public bool DeleteBreedval(BREEDVAL pBreedval)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pBreedval);
            String[] DeleteParams = new String[]
             {
                 "AniId",
                 "BVDate",
                 "BVKindOfValue",
                 "BVFieldNumber"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pBreedval, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pBreedval, CommandText) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public bool InsertBreed(BREED pBreed)
        {
            try
            {
                if (WriteActions.SaveObject(pBreed) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        [Obsolete("BREED + BREEDVAL is omgeschreven naar EXTERIEUR EXTERIEUR_WAARDEN FOKWAARDEN FOKWAARDEN_WAARDEN")]
        public bool InsertBreedVal(BREEDVAL pBreedval)
        {
            try
            {
                if (WriteActions.SaveObject(pBreedval) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        private string getFokwaardenWaardenTabel(FOKWAARDEN pFw)
        {
            return getFokwaardenWaardenTabel(pFw.FwDatum);
        }
        private string getFokwaardenWaardenTabel(DateTime d)
        {
            return "FOKWAARDEN_WAARDEN_" + String.Format("{0:D2}", (d.Year % 100));
        }


        public FOKWAARDEN getFokwaarden(int pFwId)
        {
            var fw = new FOKWAARDEN();

            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM FOKWAARDEN");
            lQuery.AppendFormat(" WHERE fwId = {0}", pFwId);

            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), fw, lQuery);
            return hasresults ? fw : null;
        }

        public DataTable getFokwaardenDataTable(int pAniId, int[] fwwTypeArr, int pFw_Soort)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT fwId, fwDatum ");
            lQuery.Append(" FROM FOKWAARDEN ");
            lQuery.AppendFormat(" WHERE AniId = {0} AND fw_Soort = {1} ORDER BY fwDatum DESC ", pAniId, pFw_Soort);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            if ((fwwTypeArr != null) && fwwTypeArr.Count() > 0)
            {
                foreach (DataRow dr in tbl.Rows)
                {
                    List<FOKWAARDEN_WAARDEN> fwwList = getFokwaardenWaardes((int)dr["fwId"], ((MySql.Data.Types.MySqlDateTime)dr["fwDatum"]).GetDateTime());
                    if (fwwList.Count(fww => fwwTypeArr.Contains(fww.FwwType)) == 0)
                        dr.Delete();
                }
                tbl.AcceptChanges();
            }

            return tbl;
        }

        public List<FOKWAARDEN> getFokwaarden(int pAniId, int[] fwwTypeArr)
        {
            List<FOKWAARDEN> fwList = getFokwaardenByAnimal(pAniId);

            if (fwwTypeArr != null)
            {
                if (fwwTypeArr.Count() > 0)
                {
                    for (int i = fwList.Count - 1; i >= 0; i--)
                    {
                        //Verwijder fokwaarden waarvan de fwwTypes niet in de fww detail voorkomen.
                        FOKWAARDEN fw = fwList[i];
                        List<FOKWAARDEN_WAARDEN> fwwList = getFokwaardenWaardes(fw.FwId);

                        int tmpCount = fwwList.Count(fww => fwwTypeArr.Contains(fww.FwwType));
                        if (tmpCount == 0) { fwList.Remove(fw); }
                    }
                }
            }

            return fwList;
        }

        public List<FOKWAARDEN> getFokwaardenByAnimal(int pAniId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM FOKWAARDEN ");
            lQuery.AppendFormat(" WHERE AniId = {0} ORDER BY fwDatum DESC ", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<FOKWAARDEN>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new FOKWAARDEN();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }

        public FOKWAARDEN getFokwaarden(int pAniId, int pFWKind, DateTime pFWDatum)
        {
            var fw = new FOKWAARDEN();
            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM FOKWAARDEN");
            lQuery.AppendFormat(" WHERE aniId = {0}", pAniId);
            lQuery.AppendFormat(" AND fwKind = {0}", pFWKind);
            lQuery.AppendFormat(" AND date_format(fwDatum,'%Y-%m-%d %T') = '{0}'", getDatabaseDateFormat(pFWDatum));
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), fw, lQuery);
            return hasresults ? fw : null;
        }
        public List<FOKWAARDEN_WAARDEN> getFokwaardenWaardes(int pFwId)
        {
            var fw = getFokwaarden(pFwId);

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.AppendFormat(" FROM {0} ", getFokwaardenWaardenTabel(fw));
            lQuery.AppendFormat(" WHERE fwId = {0} ", pFwId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<FOKWAARDEN_WAARDEN>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new FOKWAARDEN_WAARDEN();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public List<FOKWAARDEN_WAARDEN> getFokwaardenWaardes(int pFwId, DateTime d)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.AppendFormat(" FROM {0} ", getFokwaardenWaardenTabel(d));
            lQuery.AppendFormat(" WHERE fwId = {0} ", pFwId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<FOKWAARDEN_WAARDEN>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new FOKWAARDEN_WAARDEN();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }

        public FOKWAARDEN_WAARDEN getFokWaardenWaarde(int pFwId, int pFwwType)
        {
            var fw = getFokwaarden(pFwId);
            var fww = new FOKWAARDEN_WAARDEN();

            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.AppendFormat(" FROM {0}", getFokwaardenWaardenTabel(fw));
            lQuery.AppendFormat(" WHERE fwId = {0}", pFwId);
            lQuery.AppendFormat(" AND fwwType = {0}", pFwwType);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), fww, lQuery);
            return hasresults ? fww : null;
        }
        public int saveFokwaarden(FOKWAARDEN pFw)
        {
            /*
             * Todo, met transacties werken
             * dit kan nu niet omdat transactie support uitstaat
             * ivm niet werken van transacties op het mysql cluster
             */
            if (!isFilledByDb(pFw))
            {
                return WriteActions.SaveObject(pFw);
            }
            else
            {
                var pFw2 = getFokwaarden(pFw.FwId);

                if (WriteActions.SaveObject(pFw) > 0)
                {
                    if (getFokwaardenWaardenTabel(pFw) != getFokwaardenWaardenTabel(pFw2))
                    {

                        String qry = String.Format("INSERT INTO {0} SELECT * FROM {1} WHERE fwId = {2}",
                            getFokwaardenWaardenTabel(pFw),
                            getFokwaardenWaardenTabel(pFw2),
                            pFw.FwId);

                        //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                        //cmd.CommandType = System.Data.CommandType.Text;
                        //cmd.CommandText = qry;

                        try
                        {
                            mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);
                            //mDatabase.ExecuteNonQueryCommand(cmd);
                        }
                        catch (Exception ex)
                        {
                            unLogger.WriteError(ex.Message, ex);
                        }

                        qry = String.Format("DELETE FROM {0} WHERE fwId = {1}", getFokwaardenWaardenTabel(pFw2), pFw.FwId);
                        //cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                        //cmd.CommandType = System.Data.CommandType.Text;
                        //cmd.CommandText = qry;

                        try
                        {
                            mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);
                            //mDatabase.ExecuteNonQueryCommand(cmd);
                        }
                        catch (Exception ex)
                        {
                            unLogger.WriteError(ex.Message, ex);
                        }
                    }
                    return pFw.FwId;
                }
                return -1;

            }
        }

        public bool deleteFokwaarden(int pFwId)
        {
            var pFw = getFokwaarden(pFwId);

            String qry = String.Format("DELETE FROM FOKWAARDEN WHERE fwId = {0}", pFwId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = qry;

            //bool ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            bool ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1;

            if (ret)
            {
                String qry2 = String.Format("DELETE FROM {0} WHERE fwId = {1}", getFokwaardenWaardenTabel(pFw), pFw.FwId);
                //cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                try
                {
                    //mDatabase.ExecuteNonQueryCommand(cmd);
                    mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry2);
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                }
                return true;
            }
            return false;
        }

        public bool saveFokwaardenWaarden(FOKWAARDEN_WAARDEN pFww)
        {
            var fw = getFokwaarden(pFww.FwId);
            try
            {
                String qry = "";
                if (!isFilledByDb(pFww))
                {
                    qry = String.Format("INSERT INTO {0} "
                    + "(fwId, fwwType, fwwWaarde, fwwBetrouwbaarheid, fwwWegingOuders, fwwWegingEigen, fwwWegingNakomelingen, fwwAantalGemetenNakomelingen, fwwAantalBedrijvenMetNakomelingen) VALUES ({1}, {2} ,'{3}', {4}, {5}, {6}, {7}, {8}, {9})"
                    , getFokwaardenWaardenTabel(fw), pFww.FwId, pFww.FwwType, pFww.FwwWaarde, pFww.FwwBetrouwbaarheid, pFww.FwwWegingOuders, pFww.FwwWegingEigen, pFww.FwwWegingNakomelingen, pFww.FwwAantalGemetenNakomelingen, pFww.FwwAantalBedrijvenMetNakomelingen);

                }
                else
                {
                    qry = " UPDATE  " + getFokwaardenWaardenTabel(fw)
                     + " SET fwwWaarde='" + pFww.FwwWaarde
                     + "' , fwwBetrouwbaarheid=" + pFww.FwwBetrouwbaarheid
                     + ", fwwWegingOuders=" + pFww.FwwWegingOuders
                     + ", fwwWegingEigen=" + pFww.FwwWegingEigen
                     + ", fwwWegingNakomelingen=" + pFww.FwwWegingNakomelingen
                     + ", fwwAantalGemetenNakomelingen=" + pFww.FwwAantalGemetenNakomelingen
                     + ", fwwAantalBedrijvenMetNakomelingen=" + pFww.FwwAantalBedrijvenMetNakomelingen
                     + " WHERE fwId=" + pFww.FwId + " AND  fwwType=" + pFww.FwwType;
                }
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);

                return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool deleteFokwaardenWaarden(int pFwId, int pFwwType)
        {
            try
            {
                var fw = getFokwaarden(pFwId);
                String qry = String.Format("DELETE FROM {0} WHERE fwId = {1} and fwwType = {2} "
                    , getFokwaardenWaardenTabel(fw), pFwId, pFwwType);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);
                return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }


        private string getExterieurWaardenTabel(EXTERIEUR pExt)
        {
            return "EXTERIEUR_WAARDEN_" + String.Format("{0:D2}", (pExt.ExtDatum.Year % 100));
        }
        public EXTERIEUR getExterieur(int pExtId)
        {
            var ext = new EXTERIEUR();
            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM EXTERIEUR");
            lQuery.AppendFormat(" WHERE extId = {0}", pExtId);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), ext, lQuery);
            return hasresults ? ext : null;
        }
        public List<EXTERIEUR> getExterieurByAnimal(int pAniId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM EXTERIEUR ");
            lQuery.AppendFormat(" WHERE AniId = {0} ORDER BY extDatum DESC ", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<EXTERIEUR>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new EXTERIEUR();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public EXTERIEUR getExterieur(int pAniId, int pExtKind, DateTime pExtDatum)
        {
            var ext = new EXTERIEUR();
            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM EXTERIEUR");
            lQuery.AppendFormat(" WHERE aniId = {0}", pAniId);
            lQuery.AppendFormat(" AND extKind = {0}", pExtKind);
            lQuery.AppendFormat(" AND date_format(extDatum,'%Y-%m-%d %T') = '{0}'", pExtDatum);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), ext, lQuery);
            return hasresults ? ext : null;
        }

        public List<EXTERIEUR_WAARDEN> getExterieurWaardes(int pExtId)
        {
            var ext = getExterieur(pExtId);
            var lResultList = new List<EXTERIEUR_WAARDEN>();
            if (ext != null)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT * ");
                lQuery.AppendFormat(" FROM {0} ", getExterieurWaardenTabel(ext));
                lQuery.AppendFormat(" WHERE extId = {0}", pExtId);

                DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new EXTERIEUR_WAARDEN();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            return lResultList;
        }
        public EXTERIEUR_WAARDEN getExterieurWaarde(int pExtId, int pExtwType)
        {
            var ext = getExterieur(pExtId);
            var extw = new EXTERIEUR_WAARDEN();

            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.AppendFormat(" FROM {0}", getExterieurWaardenTabel(ext));
            lQuery.AppendFormat(" WHERE extId = {0}", pExtId);
            lQuery.AppendFormat(" AND extwType = {0}", pExtwType);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), extw, lQuery);
            return hasresults ? extw : null;
        }
        public List<EXTERIEUR_WAARDEN> getExterieurWaardes(List<int> pExtIds)
        {
            string lUNIONTableName = "EXTERIEUR_WAARDEN_";
            var lResultList = new List<EXTERIEUR_WAARDEN>();
            if (pExtIds.Count() > 0)
            {
                int start1 = 73;
                int eind1 = 99;

                int start2 = 0;
                int eind2 = DateTime.Now.Year - 1999;

                var lQuery = new StringBuilder();

                for (int i = start1; i <= eind1; i++)
                {

                    string lTblName = lUNIONTableName + addleadingzero(i.ToString());
                    lQuery.AppendFormat(" SELECT {0}.*  FROM {0} WHERE ExtId IN(" + intListToString(pExtIds) + ") ", lTblName);


                    lQuery.Append(" UNION ");
                }
                for (int j = start2; j <= eind2; j++)
                {
                    string lTblName = lUNIONTableName + addleadingzero(j.ToString());
                    lQuery.AppendFormat(" SELECT {0}.*  FROM {0} WHERE ExtId IN(" + intListToString(pExtIds) + ") ", lTblName);


                    if (j < eind2)
                    {
                        lQuery.Append(" UNION ");
                    }
                }
                DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
                if (tbl.Rows.Count > 0)
                {
                    foreach (DataRow rw in tbl.Rows)
                    {

                        var extw = new EXTERIEUR_WAARDEN();
                        mDatabase.FillObject(extw, rw);
                        lResultList.Add(extw);

                    }
                }
            }
            return lResultList;
        }
        public EXTERIEUR_WAARDEN getLastExterieurWaarde(int pAnimalId, int pExtwType, int pExt_soort)
        {

            string lUNIONTableName = "EXTERIEUR_WAARDEN_";
            //ik moet de waarde van pExtwType hebben van de laatste keurdatum van pExt_soort  
            //het zou kunnen dat er gekeurd is, maar de waarde hoeft niet beoordeeld te zijn (dan  null terug) 

            int start1 = 73;
            int eind1 = 99;

            int start2 = 0;
            int eind2 = DateTime.Now.Year - 1999;
           
            var lQuery = new StringBuilder();

            for (int i = start1; i <= eind1; i++)
            {

                string lTblName = lUNIONTableName + addleadingzero(i.ToString());
                lQuery.AppendFormat(" (SELECT {0}.*,ext1.extDatum  FROM {0} ", lTblName);
                lQuery.AppendFormat(" LEFT JOIN EXTERIEUR ext1  ON ext1.extId= {0}.extId ", lTblName);
                lQuery.AppendFormat(" WHERE ext1.ext_Soort={0} ", pExt_soort);
                lQuery.AppendFormat(" AND ext1.aniId={0} ", pAnimalId);
                lQuery.Append(" AND ext1.extDatum = (SELECT MAX(extDatum) ");
                lQuery.Append("               FROM EXTERIEUR ext2 ");
                lQuery.AppendFormat("               WHERE ext2.AniId = ext1.AniId AND ext2.ext_Soort={0}))", pExt_soort);

                lQuery.Append(" UNION ");
            }
            for (int j = start2; j <= eind2; j++)
            {
                string lTblName = lUNIONTableName + addleadingzero(j.ToString());
                lQuery.AppendFormat(" (SELECT {0}.*,ext1.extDatum  FROM {0} ", lTblName);
                lQuery.AppendFormat(" LEFT JOIN EXTERIEUR ext1  ON ext1.extId= {0}.extId ", lTblName);
                lQuery.AppendFormat(" WHERE ext1.ext_Soort={0} ", pExt_soort);
                lQuery.AppendFormat(" AND ext1.aniId={0} ", pAnimalId);
                lQuery.Append(" AND ext1.extDatum = (SELECT MAX(extDatum) ");
                lQuery.Append("               FROM EXTERIEUR ext2 ");
                lQuery.AppendFormat("               WHERE ext2.AniId = ext1.AniId AND ext2.ext_Soort={0}))", pExt_soort);

                if (j < eind2)
                {
                    lQuery.Append(" UNION ");
                }
            }
            lQuery.Append("  ORDER BY extDatum DESC ");
            //unLogger.WriteInfo(lQuery.ToString());
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (tbl.Rows.Count > 0)
            {
                try
                {
                    //filter alleen laatste datum
                    string extwTestDate = tbl.Rows[0]["extDatum"].ToString();


                    foreach (DataRow rw in tbl.Rows)
                    {
                        if (rw["extDatum"].ToString() == extwTestDate)
                        {
                            if (rw["extwType"].ToString() == pExtwType.ToString())
                            {
                                var extw = new EXTERIEUR_WAARDEN();
                                bool hasresults = mDatabase.FillObject(extw, rw);
                                return hasresults ? extw : null;
                            }
                        }
                    }
                }
                catch (Exception exc) { unLogger.WriteInfo(exc.ToString()); }
                return null;

            }
            else { return null; }
        }
        public DataTable getAllExterieurWaarden(int pAnimalId, int pExtwType, int pExt_soort)
        {
            var lResultList = new List<EXTERIEUR_WAARDEN>();
            string lUNIONTableName = "EXTERIEUR_WAARDEN_";
            //ik moet de waarde van pExtwType hebben van de laatste keurdatum van pExt_soort  
            //het zou kunnen dat er gekeurd is, maar de waarde hoeft niet beoordeeld te zijn (dan  null terug) 

            int start1 = 73;
            int eind1 = 99;

            int start2 = 0;
            int eind2 = DateTime.Now.Year - 1999;

            var lQuery = new StringBuilder();

            for (int i = start1; i <= eind1; i++)
            {

                string lTblName = lUNIONTableName + addleadingzero(i.ToString());
                lQuery.AppendFormat(" SELECT {0}.*,ext1.*  FROM {0} ", lTblName);
                lQuery.AppendFormat(" LEFT JOIN EXTERIEUR ext1  ON ext1.extId= {0}.extId ", lTblName);
                lQuery.AppendFormat(" WHERE ext1.ext_Soort={0} ", pExt_soort);
                lQuery.AppendFormat(" AND ext1.aniId={0} ", pAnimalId);
                lQuery.AppendFormat(" AND {0}.extwType={1} ", lTblName, pExtwType);

                lQuery.Append(" UNION ");
            }
            for (int j = start2; j <= eind2; j++)
            {
                string lTblName = lUNIONTableName + addleadingzero(j.ToString());
                lQuery.AppendFormat(" SELECT {0}.*,ext1.*  FROM {0} ", lTblName);
                lQuery.AppendFormat(" LEFT JOIN EXTERIEUR ext1  ON ext1.extId= {0}.extId ", lTblName);
                lQuery.AppendFormat(" WHERE ext1.ext_Soort={0} ", pExt_soort);
                lQuery.AppendFormat(" AND ext1.aniId={0} ", pAnimalId);
                lQuery.AppendFormat(" AND {0}.extwType={1} ", lTblName, pExtwType);


                if (j < eind2)
                {
                    lQuery.Append(" UNION ");
                }
            }
            lQuery.Append("  ORDER BY extDatum   ");
            //unLogger.WriteInfo(lQuery.ToString());
            DataSet ds = new DataSet();
            return mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "", MissingSchemaAction.Add);

        }
        public DataTable getGewichtenNsfoMetingen(List<int> pProgramIds)
        {
            if (pProgramIds.Count() > 0)
            {
                string lUNIONTableName = "EXTERIEUR_WAARDEN_";
                //ik moet de waarde van pExtwType hebben van de laatste keurdatum van pExt_soort  
                //het zou kunnen dat er gekeurd is, maar de waarde hoeft niet beoordeeld te zijn (dan  null terug) 

                int start1 = 73;
                int eind1 = 99;

                int start2 = 0;
                int eind2 = DateTime.Now.Year - 1999;

                var lQuery = new StringBuilder();
                lQuery.Append("  SELECT Aantal_Dagen, GEMIDDELD_GEWICHT,AANTAL  FROM ( ");
                for (int i = start1; i <= eind1; i++)
                {

                    string lTblName = lUNIONTableName + addleadingzero(i.ToString());
                    lQuery.Append(" SELECT DATEDIFF( ext1.extDatum, a.AniBirthDate ) AS Aantal_Dagen, ");
                    lQuery.AppendFormat(" AVG ( {0}.extwWaarde ) AS GEMIDDELD_GEWICHT, ", lTblName);
                    lQuery.Append(" COUNT(ext1.aniId) AS AANTAL ");
                    lQuery.AppendFormat(" FROM {0} ", lTblName);
                    lQuery.AppendFormat(" LEFT JOIN EXTERIEUR ext1  ON ext1.extId= {0}.extId ", lTblName);
                    lQuery.Append(" JOIN ANIMAL a ON a.AniId= ext1.aniId ");
                    lQuery.Append(" JOIN ANIMALCATEGORY ac ON ac.AniId = a.AniId ");
                    lQuery.Append(" JOIN agrofactuur.BEDRIJF b ON b.FarmId = ac.FarmId ");
                    lQuery.Append(" WHERE ext1.ext_Soort=67  ");
                    lQuery.AppendFormat(" AND {0}.extwType=15  ", lTblName);
                    lQuery.Append(" AND b.ProgramID IN (" + intListToString(pProgramIds) + ") ");
                    lQuery.Append("  GROUP BY Aantal_Dagen  ");
                    lQuery.Append(" HAVING AANTAL >= 2 AND aantal_dagen >= 0 ");

                    lQuery.Append(" UNION ");
                }
                for (int j = start2; j <= eind2; j++)
                {
                    string lTblName = lUNIONTableName + addleadingzero(j.ToString());
                    lQuery.Append(" SELECT DATEDIFF( ext1.extDatum, a.AniBirthDate ) AS Aantal_Dagen, ");
                    lQuery.AppendFormat(" AVG ( {0}.extwWaarde ) AS GEMIDDELD_GEWICHT, ", lTblName);
                    lQuery.Append(" COUNT(ext1.aniId) AS AANTAL ");
                    lQuery.AppendFormat(" FROM {0} ", lTblName);
                    lQuery.AppendFormat(" LEFT JOIN EXTERIEUR ext1  ON ext1.extId= {0}.extId ", lTblName);
                    lQuery.Append(" JOIN ANIMAL a ON a.AniId= ext1.aniId ");
                    lQuery.Append(" JOIN ANIMALCATEGORY ac ON ac.AniId = a.AniId ");
                    lQuery.Append(" JOIN agrofactuur.BEDRIJF b ON b.FarmId = ac.FarmId ");
                    lQuery.Append(" WHERE ext1.ext_Soort=67  ");
                    lQuery.AppendFormat(" AND {0}.extwType=15  ", lTblName);
                    lQuery.Append(" AND b.ProgramID IN (" + intListToString(pProgramIds) + ") ");
                    lQuery.Append("  GROUP BY Aantal_Dagen  ");
                    lQuery.Append(" HAVING AANTAL >= 2 AND aantal_dagen >= 0 ");


                    if (j < eind2)
                    {
                        lQuery.Append(" UNION ");
                    }
                }

                lQuery.Append("  ) t  GROUP BY Aantal_Dagen   ");
                //unLogger.WriteInfo(lQuery.ToString());
                DataSet ds = new DataSet();
                return mDatabase.QueryData(mToken.getLastChildConnection(), ds, lQuery, "", MissingSchemaAction.Add);
            }
            return new DataTable();
        }
        public int saveExterieur(EXTERIEUR pExt)
        {
            /*
             * Todo, met transacties werken
             * dit kan nu niet omdat transactie support uitstaat
             * ivm niet werken van transacties op het mysql cluster
             */

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pExt);

            //if (!isFilledByDb(pExt))
            //{
            //    cmd.CommandText = mDatabase.CreateInsertCommandText(pExt);
            //    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
            //        return GetLastRowId(cmd.Connection);
            //    else
            //        return -1;
            //}
            //else
            //{
            //    var pExt2 = getExterieur(pExt.ExtId);

            //    String[] UpdateParams = new String[] 
            //        { 
            //            "ExtId"
            //        };
            //    cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pExt, UpdateParams);

            //    bool ret = (mDatabase.ExecuteNonQueryCommand(cmd) == 1);



            if (!isFilledByDb(pExt))
            {
                return WriteActions.SaveObject(pExt);
            }
            else
            {
                var pExt2 = getExterieur(pExt.ExtId);

                if (WriteActions.SaveObject(pExt) > 0)
                {
                    if (getExterieurWaardenTabel(pExt) != getExterieurWaardenTabel(pExt2))
                    {

                        String qry = String.Format("INSERT INTO {0} SELECT * FROM {1} WHERE extId = {2}",
                            getExterieurWaardenTabel(pExt),
                            getExterieurWaardenTabel(pExt2),
                            pExt.ExtId);

                        //using (DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
                        //{
                        //    cmd.CommandType = System.Data.CommandType.Text;
                        //    cmd.CommandText = qry;

                        try
                        {
                            mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);
                            //mDatabase.ExecuteNonQueryCommand(cmd);
                        }
                        catch (Exception ex)
                        {
                            unLogger.WriteError(ex.Message, ex);
                        }
                        //}

                        qry = String.Format("DELETE FROM {0} WHERE extId = {1}", getExterieurWaardenTabel(pExt2), pExt.ExtId);
                        //using (DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
                        //{
                        //    cmd.CommandType = System.Data.CommandType.Text;
                        //    cmd.CommandText = qry;

                        try
                        {
                            //mDatabase.ExecuteNonQueryCommand(cmd);
                            mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);
                        }
                        catch (Exception ex)
                        {
                            unLogger.WriteError(ex.Message, ex);
                        }
                        //}
                    }
                    return pExt.ExtId;
                }
                return -1;

            }
        }
        public bool deleteExterieur(int pExtId)
        {
            var pExt = getExterieur(pExtId);
            string waardentabel = getExterieurWaardenTabel(pExt);

            String qry = String.Format("DELETE FROM EXTERIEUR WHERE extId = {0}", pExtId);

            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = qry;

            //bool ret = mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            bool ret = mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1;

            if (ret)
            {
                qry = String.Format("DELETE FROM {0} WHERE extId = {1}", waardentabel, pExtId);
                //cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                try
                {
                    mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry);
                    //mDatabase.ExecuteNonQueryCommand(cmd);
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                }
                return true;
            }
            return false;
        }
        public bool saveExterieurWaarden(EXTERIEUR_WAARDEN pExtw)
        {
            var ext = getExterieur(pExtw.ExtId);
            try
            {
                String qry = String.Format("REPLACE INTO {0} "
                    + "(extId, extwType, extwWaarde, Changed_By, SourceID) VALUES ({1}, {2} ,'{3}', {4}, {5})"
                    , getExterieurWaardenTabel(ext), pExtw.ExtId, pExtw.ExtwType, pExtw.ExtwWaarde, pExtw.Changed_By, pExtw.SourceID);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);
                return (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool deleteExterieurWaarden(int pExtId, int pExtwType)
        {
            try
            {
                var ext = getExterieur(pExtId);
                String qry = String.Format("DELETE FROM {0} WHERE extId = {1} and extwType = {2} "
                    , getExterieurWaardenTabel(ext), pExtId, pExtwType);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;
                //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);
                return (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public KEURING_TYPE getKeuringType(int pKtId)
        {
            var kt = new KEURING_TYPE();
            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM KEURING_TYPE");
            lQuery.AppendFormat(" WHERE ktId = {0}", pKtId);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), kt, lQuery);
            return hasresults ? kt : null;
        }
        public List<KEURING_TYPE> getKeuringTypes(int pProgramId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM KEURING_TYPE ");
            lQuery.AppendFormat(" WHERE ktProgramId = {0}", pProgramId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<KEURING_TYPE>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new KEURING_TYPE();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public int saveKeuringType(KEURING_TYPE pKt)
        {
            try
            {
                return WriteActions.SaveObject(pKt);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }
        public bool deleteKeuringType(int pKtId)
        {
            throw new NotImplementedException();
        }
        public List<KEURING_TYPE_VELDEN> getKeuringTypeVelden(int pKtId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM KEURING_TYPE_VELDEN ");
            lQuery.AppendFormat(" WHERE ktId = {0}", pKtId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<KEURING_TYPE_VELDEN>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new KEURING_TYPE_VELDEN();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public bool addKeuringTypeVeld(int pKtId, int pExtwType)
        {
            try
            {
                String qry = String.Format("REPLACE INTO KEURING_TYPE_VELDEN (ktId, extwType) VALUES ({0}, {1})", pKtId, pExtwType);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);
                return (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool deleteKeuringType(int pKtId, int pExtwType)
        {
            throw new NotImplementedException();
        }
        public KEURING_LIJST getKeuringLijst(int pKlId)
        {
            var kl = new KEURING_LIJST();

            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM KEURING_LIJST");
            lQuery.AppendFormat(" WHERE klId = {0}", pKlId);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), kl, lQuery);
            return hasresults ? kl : null;
        }
        public List<KEURING_LIJST> getKeuringLijsten(int pProgramId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM KEURING_LIJST ");
            lQuery.AppendFormat(" WHERE programId = {0}", pProgramId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<KEURING_LIJST>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new KEURING_LIJST();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public List<KEURING_LIJST> getAfgewerkteKeuringsLijsten(int pProgramId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM KEURING_LIJST ");
            lQuery.AppendFormat(" WHERE programId = {0}", pProgramId);
            lQuery.Append(" AND afgewerkt > 0");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<KEURING_LIJST>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new KEURING_LIJST();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public List<KEURING_LIJST> getOnAfgewerkteKeuringsLijsten(int pProgramId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM KEURING_LIJST ");
            lQuery.AppendFormat(" WHERE programId = {0}", pProgramId);
            lQuery.Append(" AND afgewerkt = 0");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<KEURING_LIJST>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new KEURING_LIJST();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public int saveKeuringLijst(KEURING_LIJST pKl)
        {
            try
            {
                return WriteActions.SaveObject(pKl);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }
        public bool deleteKeuringLijs(int pKlId)
        {
            throw new NotImplementedException();
        }
        public List<KEURING_LIJST_DIER> getKeuringLijstDieren(int pKlId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM KEURING_LIJST_DIER ");
            lQuery.AppendFormat(" WHERE klId = {0}", pKlId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<KEURING_LIJST_DIER>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new KEURING_LIJST_DIER();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public KEURING_LIJST_DIER getKeuringLijstDier(int pKlId, int pAniId)
        {
            var kld = new KEURING_LIJST_DIER();

            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM KEURING_LIJST_DIER");
            lQuery.AppendFormat(" WHERE klId = {0}", pKlId);
            lQuery.AppendFormat(" AND AniId = {0}", pAniId);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), kld, lQuery);
            return hasresults ? kld : null;
        }
        public int saveKeuringLijstDier(KEURING_LIJST_DIER pKld)
        {
            try
            {
                return WriteActions.SaveObject(pKld);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }
        public bool deleteKeuringLijstDier(int pKlId, int pAniId)
        {
            throw new NotImplementedException();
        }
        public bool deleteKeuringLijstDier(int pKlId)
        {
            try
            {
                String qry = String.Format("DELETE FROM KEURING_LIJST_DIER WHERE klId = {0}", pKlId);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //return (mDatabase.ExecuteNonQueryCommand(cmd) == 1);
                return mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public List<LEVNRMUT> getLevNrMuts(int pAniId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * ");
            lQuery.Append(" FROM LEVNRMUT ");
            lQuery.AppendFormat(" WHERE Aniid = {0}  ORDER BY Datum DESC ", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<LEVNRMUT>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new LEVNRMUT();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public List<LEVNRMUT> getLevNrMutsByLifeNr(string pLNVLifenumber)
        {
            var lResultList = new List<LEVNRMUT>();
            if (!String.IsNullOrEmpty(pLNVLifenumber))
            {
                StringBuilder lQuery = new StringBuilder();
                string sSearchnr = GetSearchNumbers(pLNVLifenumber);
                lQuery.Append(" SELECT * ");
                lQuery.Append(" FROM LEVNRMUT ");
                lQuery.AppendFormat(" WHERE ( LevnrNieuw IN ({0}) ", sSearchnr);
                lQuery.AppendFormat(" OR LevnrOud IN ({0}) ) AND Aniid>0 ORDER BY Datum DESC ", sSearchnr);

                DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

                foreach (DataRow dr in tbl.Rows)
                {
                    var l = new LEVNRMUT();
                    if (mDatabase.FillObject(l, dr))
                    {
                        lResultList.Add(l);
                    }
                }
            }
            return lResultList;
        }
        public List<MEDSTOCK> getMedstocksByUbnId(int pUbnID)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("  SELECT MEDSTOCK.*  FROM MEDSTOCK ");
            lQuery.Append(" JOIN agrofactuur.BEDRIJF b ON b.FarmId = MEDSTOCK.FarmID ");
            lQuery.Append(" JOIN agrofactuur.UBN u ON u.UbnId = b.UbnId ");
            lQuery.AppendFormat(" WHERE u.UbnId={0} AND MEDSTOCK.MedStockId>0  ORDER BY MSDate DESC ", pUbnID);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<MEDSTOCK>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new MEDSTOCK();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }
        public bool saveLevNrMut(LEVNRMUT pLnm)
        {
            try
            {

                if (!isFilledByDb(pLnm))
                {
                    if (WriteActions.SaveObject(pLnm) < 0) return false;
                    return true;
                }
                else
                {
                    //Kan niet, er mag alleen een nieuwe mutatie bijkomen
                    return false;
                }

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public List<gdauth> getGDRelatieNrStamboeken()
        {
            List<gdauth> StamBoeken = new List<gdauth>();
            StringBuilder QRY_GDauth = new StringBuilder();
            QRY_GDauth.Append(" SELECT *");
            QRY_GDauth.Append(" FROM agrofactuur.gdauth WHERE ProgramId>0");
            DataTable dtGDauth = mDatabase.QueryData(mToken, QRY_GDauth);
            gdauth lObj;
            foreach (DataRow drMut in dtGDauth.Rows)
            {
                lObj = new gdauth();
                mDatabase.FillObject(lObj, drMut);
                StamBoeken.Add(lObj);
            }
            return StamBoeken;
        }

        public THIRD GetOwnerForAnimal(int pAniId, int pProgID)
        {
            string db = "";
            if (pProgID == 5)
            {
                db = "agrobase_goat.";//alleen voor VWA inkijk bedoelt
            }

            THIRD t = new THIRD();
            var lQuery = new StringBuilder();
            lQuery.Append(" SELECT t.*,u.Bedrijfsnummer ");
            lQuery.Append(" FROM " + db + "ANIMAL a");
            lQuery.Append(" JOIN " + db + "ANIMALCATEGORY ac USING(AniId)");
            lQuery.Append(" JOIN agrofactuur.BEDRIJF b ON ac.FarmId = b.FarmId");
            lQuery.Append(" JOIN agrofactuur.UBN u ON b.UbnId = u.UbnId");
            lQuery.Append(" JOIN agrofactuur.THIRD t ON u.thrId = t.ThrId");
            lQuery.AppendFormat(" WHERE a.AniId = {0}", pAniId);
            lQuery.Append(" AND ac.AniCategory IN (1,2,3)");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery, MissingSchemaAction.Add);
            if (tbl.Rows.Count == 0)
                return null;
            if (tbl.Rows.Count > 1)
                unLogger.WriteError("DBERROR", "AniId " + pAniId.ToString() + " heeft meerdere anicategory met animalcategory < 4");
            mDatabase.FillObject(t, tbl.Rows[0]);
            if (t.ThrCountry.Trim() == "")
            {
                t.ThrCountry = "151";
            }
            if (t.ThrFarmNumber == "")
            {
                t.ThrFarmNumber = "";
            }
            return t;
        }

        public BEDRIJF getFarmOwnerForAnimal(int pAniId)
        {
            BEDRIJF b = new BEDRIJF();
            var lQuery = new StringBuilder();

            lQuery.Append(" SELECT b.* ");
            lQuery.Append(" FROM agrofactuur.BEDRIJF b ");
            lQuery.Append(" JOIN ANIMALCATEGORY ac ON ac.FarmId = b.FarmId ");
            lQuery.AppendFormat(" WHERE AniId = {0}", pAniId);
            lQuery.Append(" AND AniCategory IN (1,2,3)");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            if (tbl.Rows.Count == 0)
                return null;
            if (tbl.Rows.Count > 1)
                unLogger.WriteError("DBERROR", "AniId " + pAniId.ToString() + " heeft meerdere anicategory met animalcategory < 4");
            mDatabase.FillObject(b, tbl.Rows[0]);

            return b;
        }

        // 0 : ok
        // 1 : duplicate date
        // 2 : db error
        public bool saveBedrijf_ZiekteBesmetting(int pThrId, BEDRIJF_ZIEKTE pBedrijfsZiekte)
        {
            return saveBedrijf_ZiekteBesmettingInt(pThrId, pBedrijfsZiekte) == 0;
        }
        public int saveBedrijf_ZiekteBesmettingInt(int pThrId, BEDRIJF_ZIEKTE pBedrijfsZiekte)
        {
            if (pBedrijfsZiekte.Bz_NSFO_Dierziekte_Geldigheid == 0)
            { pBedrijfsZiekte.Bz_NSFO_Dierziekte_Geldigheid = 24; }
            if (pBedrijfsZiekte.Bz_FarmID > 0)
            {
                //controleren of die al niet bestaat op die datum



                StringBuilder lQuery = new StringBuilder();
                lQuery.Append("SELECT * FROM  BEDRIJF_ZIEKTE ");
                lQuery.AppendFormat(" WHERE bz_FarmId = {0}", pBedrijfsZiekte.Bz_FarmID);
                lQuery.AppendFormat(" AND bz_ZiekteId = {0}", pBedrijfsZiekte.Bz_ZiekteID);
                lQuery.Append(" AND  date_format(Bz_Datum,'%Y-%m-%d')= " + MySQL_Datum(pBedrijfsZiekte.Bz_Datum, 1) + " ");
                BEDRIJF_ZIEKTE lBtemp = new BEDRIJF_ZIEKTE();
                mDatabase.FillObject(mToken, lBtemp, lQuery);

                if (!isFilledByDb(lBtemp))
                {
                    bool insert = true;
                    //Zie BUG 1062
                    //Zie BUG 1442
                    if (insert)
                    {
                        List<BEDRIJF> bedrijven = getBedrijvenByFarmId(pBedrijfsZiekte.Bz_FarmID);
                        var lEigen = from n in bedrijven
                                     where n.FarmId == pBedrijfsZiekte.Bz_FarmID
                                     select n;
                        BEDRIJF lEigenbedrijf = lEigen.ElementAt(0);
                        int ret = 0;
                        foreach (BEDRIJF b in bedrijven)
                        {
                            if (b.FarmId == pBedrijfsZiekte.Bz_FarmID)
                            {
                                //DbCommand cmd = mDatabase.CreateParameters(mToken, pBedrijfsZiekte);
                                //cmd.CommandText = mDatabase.CreateInsertCommandText(pBedrijfsZiekte);
                                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                                if (WriteActions.SaveObject(pBedrijfsZiekte) < 0)
                                    ret = 2;
                                else
                                {
                                    addBedrijfziekteLogNew(pThrId, pBedrijfsZiekte);
                                }

                            }
                            else
                            {
                                if (b.ProgId == lEigenbedrijf.ProgId)
                                {
                                    StringBuilder lQueryCheck = new StringBuilder();
                                    lQueryCheck.Append("SELECT * FROM  BEDRIJF_ZIEKTE ");
                                    lQueryCheck.AppendFormat(" WHERE bz_FarmId = {0}", b.FarmId);
                                    lQueryCheck.AppendFormat(" AND bz_ZiekteId = {0}", pBedrijfsZiekte.Bz_ZiekteID);
                                    lQueryCheck.Append(" AND  date_format(Bz_Datum,'%Y-%m-%d')= " + MySQL_Datum(pBedrijfsZiekte.Bz_Datum, 1) + " ");
                                    BEDRIJF_ZIEKTE lBtempCheck = new BEDRIJF_ZIEKTE();
                                    mDatabase.FillObject(mToken, lBtempCheck, lQueryCheck);
                                    if (!isFilledByDb(lBtempCheck))
                                    {
                                        BEDRIJF_ZIEKTE lExtra = new BEDRIJF_ZIEKTE();
                                        lExtra.Bz_FarmID = b.FarmId;
                                        lExtra.Bz_Datum = pBedrijfsZiekte.Bz_Datum;
                                        lExtra.Bz_Comment = pBedrijfsZiekte.Bz_Comment;
                                        lExtra.Bz_NSFO_Dierziekte = pBedrijfsZiekte.Bz_NSFO_Dierziekte;
                                        lExtra.Bz_NSFO_Dierziekte_Geldigheid = pBedrijfsZiekte.Bz_NSFO_Dierziekte_Geldigheid;
                                        lExtra.Bz_StatusID = pBedrijfsZiekte.Bz_StatusID;
                                        lExtra.Bz_ZiekteID = pBedrijfsZiekte.Bz_ZiekteID;
                                        //DbCommand cmd = mDatabase.CreateParameters(mToken, lExtra);
                                        //cmd.CommandText = mDatabase.CreateInsertCommandText(lExtra);
                                        //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                                        if (WriteActions.SaveObject(pBedrijfsZiekte) < 0)
                                            ret = 2;
                                        else
                                        {
                                            addBedrijfziekteLogNew(pThrId, lExtra);
                                        }

                                    }
                                }
                            }
                        }
                        return ret;
                    }
                }
            }
            else { return 2; }
            return 1;
        }

        public bool deleteBedrijf_Ziekte(int pThrId, int pBzId)
        {
            List<BEDRIJF_ZIEKTE> bziektes = getUBNBedrijfZiektesByBzID(pBzId);
            if (bziektes != null)
            {
                int ret = 0;
                foreach (BEDRIJF_ZIEKTE bz in bziektes)
                {
                    String qry = String.Format("DELETE FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_ID = {0}", bz.Bz_ID);
                    //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                    //cmd.CommandType = System.Data.CommandType.Text;
                    //cmd.CommandText = qry;

                    //ret = mDatabase.ExecuteNonQueryCommand(cmd);
                    ret = mDatabase.ExecuteNonQuery(mToken, qry);
                    if (ret == 1)
                    {
                        addBedrijfziekteLogDelete(pThrId, bz);

                    }
                }
                if (ret == 1)
                {
                    return true;
                }
            }
            return false;
        }

        private List<BEDRIJF_ZIEKTE> getUBNBedrijfZiektesByBzID(int pBzId)
        {

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT BEDRIJF_ZIEKTE.* FROM BEDRIJF_ZIEKTE  ");
            lQuery.Append(" WHERE BEDRIJF_ZIEKTE.bz_FarmID IN ");
            lQuery.Append(" ( ");
            lQuery.Append(" 	SELECT BEDRIJF.FarmId FROM BEDRIJF ");
            lQuery.Append(" 	WHERE BEDRIJF.UBNid =  ");
            lQuery.Append(" 	(  ");
            lQuery.Append(" 		SELECT UbnId FROM BEDRIJF WHERE BEDRIJF.FarmId =  ");
            lQuery.Append(" 		( ");
            lQuery.AppendFormat(" 			SELECT BEDRIJF_ZIEKTE.bz_FarmID FROM  BEDRIJF_ZIEKTE WHERE BEDRIJF_ZIEKTE.bz_ID={0} ", pBzId);
            lQuery.Append(" 		) ");
            lQuery.Append(" 	) ");
            lQuery.Append(" )  ");
            lQuery.Append(" AND BEDRIJF_ZIEKTE.bz_ZiekteID =  ");
            lQuery.Append(" ( ");
            lQuery.AppendFormat(" 	SELECT BEDRIJF_ZIEKTE.bz_ZiekteID FROM  BEDRIJF_ZIEKTE WHERE BEDRIJF_ZIEKTE.bz_ID={0} ", pBzId);
            lQuery.Append(" ) ");
            lQuery.Append(" AND BEDRIJF_ZIEKTE.bz_StatusID =  ");
            lQuery.Append(" ( ");
            lQuery.AppendFormat(" 	SELECT BEDRIJF_ZIEKTE.bz_StatusID FROM  BEDRIJF_ZIEKTE WHERE BEDRIJF_ZIEKTE.bz_ID={0} ", pBzId);
            lQuery.Append(" ) ");
            lQuery.Append(" AND BEDRIJF_ZIEKTE.bz_Datum =  ");
            lQuery.Append(" ( ");
            lQuery.AppendFormat(" 	SELECT BEDRIJF_ZIEKTE.bz_Datum FROM  BEDRIJF_ZIEKTE WHERE BEDRIJF_ZIEKTE.bz_ID={0} ", pBzId);
            lQuery.Append(" )");

            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            var lResultList = new List<BEDRIJF_ZIEKTE>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new BEDRIJF_ZIEKTE();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }

            return lResultList;
        }

        public BEDRIJF_ZIEKTE GetBedrijfZiekte(int pBzId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat("SELECT * FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_ID = {0}", pBzId);
            BEDRIJF_ZIEKTE bz = new BEDRIJF_ZIEKTE();
            bool hasresults = mDatabase.FillObject(mToken, bz, lQuery);
            return hasresults ? bz : null;
        }

        public List<BEDRIJF_ZIEKTE> getCurrentBedrijfZiekteStatus(int pFarmId)
        {

            /*for copypaste
                SELECT DISTINCT bz.bz_FarmId, bz.bz_ZiekteId, 
                (SELECT MAX(bz2.bz_Datum) FROM BEDRIJF_ZIEKTE bz2 WHERE bz2.bz_FarmId = bz.bz_FarmId AND bz2.bz_ZiekteId = bz.bz_ZiekteId AND DATE(bz2.bz_Datum) <= DATE(now())) AS Datum, 
                (SELECT bz3.bz_StatusId FROM BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS Status 
                ,(SELECT bz3.bz_NSFO_Dierziekte_Geldigheid FROM BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS bz_NSFO_Dierziekte_Geldigheid 
                FROM BEDRIJF_ZIEKTE bz 
                WHERE bz.bz_FarmId IN 
                 ( 
                 SELECT BEDRIJF.FarmId FROM BEDRIJF 
                             WHERE BEDRIJF.UBNid = (SELECT UBNid FROM BEDRIJF WHERE BEDRIJF.FarmId=4337) 
                 )
             */
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendLine("SELECT DISTINCT bz.bz_FarmId, bz.bz_ZiekteId, ");
            lQuery.AppendLine("(SELECT MAX(bz2.bz_Datum) FROM BEDRIJF_ZIEKTE bz2 WHERE bz2.bz_FarmId = bz.bz_FarmId AND bz2.bz_ZiekteId = bz.bz_ZiekteId ");

            lQuery.AppendLine("  AND  ");
            lQuery.AppendLine("( ");
            lQuery.AppendLine("IF ");
            lQuery.AppendLine(" (  ");
            lQuery.AppendLine("   bz.bz_ZiekteId IN (1,2,3) ");
            lQuery.AppendLine(" , (SELECT BEDRIJF.ProgId FROM BEDRIJF WHERE BEDRIJF.FarmId=bz2.bz_FarmId)=3 ");
            lQuery.AppendLine(" , (SELECT BEDRIJF.ProgId FROM BEDRIJF WHERE BEDRIJF.FarmId=bz2.bz_FarmId)=5 ");

            lQuery.AppendLine(" ) ");
            lQuery.AppendLine(") ");

            lQuery.AppendLine(" AND DATE(bz2.bz_Datum) <= DATE(now())) AS Datum, ");
            lQuery.AppendLine("(SELECT bz3.bz_StatusId FROM BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS Status ");
            lQuery.AppendLine(",(SELECT bz3.bz_NSFO_Dierziekte_Geldigheid FROM BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS bz_NSFO_Dierziekte_Geldigheid ");
            lQuery.AppendLine("FROM BEDRIJF_ZIEKTE bz ");
            lQuery.AppendLine("WHERE bz.bz_FarmId IN ");
            lQuery.AppendLine(" ( ");
            lQuery.AppendLine(" SELECT BEDRIJF.FarmId FROM BEDRIJF ");
            lQuery.AppendFormat(" WHERE BEDRIJF.UBNid = (SELECT UBNid FROM BEDRIJF WHERE BEDRIJF.FarmId={0}) ", pFarmId);
            lQuery.AppendLine(" ) ");
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            var lResultList = new List<BEDRIJF_ZIEKTE>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new BEDRIJF_ZIEKTE();
                if (mDatabase.FillObject(l, dr))
                {
                    try
                    {
                        l.Bz_StatusID = Convert.ToSByte(dr["Status"].ToString());
                        DateTime BzDatum = DateTime.MinValue;
                        DateTime.TryParse(dr["Datum"].ToString(), out BzDatum);
                        l.Bz_Datum = BzDatum;
                        lResultList.Add(l);
                    }
                    catch { }
                }
            }
            return lResultList;
        }

        public BEDRIJF_ZIEKTE getCurrentBedrijfZiekteStatus(int pFarmId, int pZiekteId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM BEDRIJF_ZIEKTE ");
            lQuery.Append(" WHERE bz_FarmId  IN (");
            lQuery.Append(" SELECT BEDRIJF.FarmId FROM BEDRIJF");
            lQuery.AppendFormat(" WHERE BEDRIJF.UBNid = (SELECT UBNid FROM BEDRIJF WHERE BEDRIJF.FarmId={0})", pFarmId);
            lQuery.Append(" ) ");
            lQuery.AppendFormat(" AND bz_ZiekteId = {0} ", pZiekteId);
            lQuery.Append(" ORDER BY bz_Datum DESC ");
            lQuery.Append(" LIMIT 1 ");

            BEDRIJF_ZIEKTE bz = new BEDRIJF_ZIEKTE();
            bool hasresults = mDatabase.FillObject(mToken, bz, lQuery);
            return hasresults ? bz : null;
        }

        public List<DIER_ZIEKTE> getCurrentDierZiekteStatus(int pAniId, int pProgID)
        {
            string db = "";
            if (pProgID == 5)
            {
                db = "agrobase_goat.";//alleen voor VWA inkijk bedoelt
            }
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT DISTINCT dz.dz_AniId, dz.dz_ZiekteId, ");
            lQuery.Append("(SELECT MAX(dz2.dz_Datum) FROM " + db + "DIER_ZIEKTE dz2 WHERE dz2.dz_AniId = dz.dz_AniId AND dz2.dz_ZiekteId = dz.dz_ZiekteId) AS Datum, ");
            lQuery.Append("(SELECT dz3.dz_StatusId FROM " + db + "DIER_ZIEKTE dz3 WHERE dz3.dz_AniId = dz.dz_AniId AND dz3.dz_ZiekteId = dz.dz_ZiekteId AND dz3.dz_Datum = Datum) AS Status ");
            lQuery.Append("FROM " + db + "DIER_ZIEKTE dz ");
            lQuery.AppendFormat("WHERE dz.dz_AniID = {0}", pAniId);

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            var lResultList = new List<DIER_ZIEKTE>();
            foreach (DataRow dr in tbl.Rows)
            {
                var l = new DIER_ZIEKTE();
                if (mDatabase.FillObject(l, dr))
                {
                    l.Dz_StatusId = Convert.ToSByte(dr["Status"].ToString());
                    DateTime DzDatum = DateTime.MinValue;
                    DateTime.TryParse(dr["Datum"].ToString(), out DzDatum);
                    l.Dz_Datum = DzDatum;
                    lResultList.Add(l);
                }
            }

            return lResultList;
        }

        #region aanwezigheid functies

        //*** LET OP! houdt deze up-to-date met Delphi
        //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)

        //private StringBuilder getQuery_Aanwezigheid(int farmId, int pUbnID, int aniId, DateTime datum, int groupId, int mede_eigenaar, int pProgId)
        //{
        //    //Laatste update aanwezigheid-Query; 04-11-2011 (DELPHI VERSIE IS LEIDEND!)
        //    //Laatste update aanwezigheid-Query; 11-09-2013 
        //    //laatste Update aanwezigheid-Query; 06-03-2015 MovId>0 7 X toegepast bij de eerste subqueries

        //    string database = "agrobase.";//LET OP DE PUNT
        //    if (pProgId == 5)
        //    {
        //        database = "agrobase_goat.";
        //    }
        //    else if (pProgId == 3)
        //    {
        //        database = "agrobase_sheep.";
        //    }

        //    StringBuilder qry = new StringBuilder();

        //    string strDate = datum.ToString("yyyy-MM-dd HH:mm:ss");

        //    string sQ_farmId = "";
        //    string sQ_aniId = "";
        //    string sQ_groupId = "";
        //    string sQ_mede_eigenaar = "";

        //    if (farmId > 0 || pUbnID > 0)
        //    {
        //        if (pUbnID <= 0)
        //        {
        //            sQ_farmId = " AND (ac.FarmId=" + farmId.ToString() + ") ";
        //        }
        //        else
        //        {
        //            sQ_farmId = "  AND (ac.FarmId IN (SELECT FarmId from agrofactuur.BEDRIJF b2 WHERE b2.UbnID=" + pUbnID.ToString() + " AND b2.FarmID>0 )) ";
        //        }
        //    }
        //    if (aniId > 0)
        //        sQ_aniId = " AND (a.AniId=" + aniId.ToString() + ") ";

        //    if (groupId > 0)
        //        sQ_groupId = " AND ((SELECT Groupnr FROM " + database + "MOVEMENT " +
        //                          " WHERE AniId=a.AniId AND UbnId=be.UbnId AND Groupnr > 0 " +
        //                          " AND MovDate <= " + strDate +
        //                          " ORDER BY MovDate DESC LIMIT 1) = " + groupId.ToString() + ") ";

        //    if (mede_eigenaar != 0)
        //        sQ_mede_eigenaar = " OR (ac.Ani_Mede_Eigenaar=1) ";

        //    if (datum.Date == DateTime.Today.Date)
        //    {
        //        //vandaag
        //        qry.Append(
        //            " SELECT DISTINCT a.AniId, ac.AniCategory, a.AniBirthDate " +
        //            " FROM " + database + "ANIMAL a " +
        //            " LEFT JOIN " + database + "ANIMALCATEGORY ac ON (a.AniId=ac.AniId) " +
        //            " LEFT JOIN agrofactuur.BEDRIJF be ON (be.FarmId=ac.FarmId) " +
        //            " WHERE ((ac.AniCategory BETWEEN 0 AND 3)" + sQ_mede_eigenaar + ") " +

        //            sQ_farmId +
        //            sQ_aniId +
        //            sQ_groupId +
        //            //" GROUP BY a.AniId, ac.AniCategory ");
        //            " GROUP BY a.AniId  ");
        //    }
        //    else
        //    {
        //        //Datum is uit het verleden (of toekomst). Achterhaal aanwezigheid dmv. movements + geboorte
        //        string sDtCol = " ADDTIME(MovDate, IF(ISNULL(MovTime), TIME('00:00'),  TIME(MovTime))) ";

        //        //qry.Append(" SELECT DISTINCT a.AniId, ac.AniCategory, a.AniBirthDate, a.ThrId as a_thrid, u.ThrId as u_thrid ");
        //        //qry.Append(" , (SELECT MIN( " + sDtCol + " ) AS dtA FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId AND MovKind IN (1, 4, 7)) AS minAanvoer ");
        //        //qry.Append(" , (SELECT MIN( " + sDtCol + " ) AS dtB FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId AND MovKind IN (2, 3, 5, 6)) AS minAfvoer ");
        //        //qry.Append(" , (SELECT MAX( " + sDtCol + " ) AS dtC FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId AND MovKind IN (1, 4, 7) HAVING dtC <= '" + strDate + "') AS maxAanvoer ");
        //        //qry.Append(" , (SELECT MAX( " + sDtCol + " ) AS dtD FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId AND MovKind IN (2, 3, 5, 6) HAVING dtD <= '" + strDate + "') AS maxAfvoer ");

        //        //qry.Append("  FROM " + database + "ANIMAL a ");
        //        //qry.Append("  LEFT JOIN " + database + "ANIMALCATEGORY ac ON (a.AniId=ac.AniId) ");
        //        //qry.Append("  LEFT JOIN agrofactuur.BEDRIJF be ON (be.FarmId=ac.FarmId) ");
        //        //qry.Append("  LEFT JOIN agrofactuur.UBN u ON (u.UBNid=be.UbnId) ");

        //        //qry.Append("  WHERE ((ac.AniCategory BETWEEN 0 AND 4)" + sQ_mede_eigenaar + ") ");

        //        //qry.Append(sQ_farmId);
        //        //qry.Append(sQ_aniId);
        //        //qry.Append(sQ_groupId);

        //        //qry.Append("  AND ((DATE(a.AniBirthDate) <= '" + strDate + "') OR ISNULL(a.AniBirthDate)) ");

        //        //qry.Append("  GROUP BY a.AniId, ac.AniCategory ");

        //        //qry.Append("  HAVING (   (ISNULL(minAanvoer) OR (minAanvoer <= '" + strDate + "'))  OR  ");
        //        //qry.Append("  (NOT(ISNULL(minAanvoer) AND ISNULL(minAfvoer))  ");
        //        //// IF statement is er voor aan en afvoer zelfde dag dan nemen we aan dat ie aanwezig is
        //        //// want de TIME kan niet chronologisch zijn 
        //        //// 
        //        //qry.Append("  AND (  IF( DATE(minAanvoer)=DATE(minAfvoer),DATE(minAanvoer) >= DATE(minAfvoer),minAanvoer > minAfvoer)   ))  ) ");
        //        ////eerste Having regel

        //        //qry.Append("  AND (  ISNULL(maxAfvoer) OR ");
        //        //qry.Append("  (NOT(ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) ");

        //        //qry.Append("  AND (    IF(DATE(maxAanvoer)=DATE(maxAfvoer),DATE(maxAanvoer) >= DATE(maxAfvoer),maxAanvoer>maxAfvoer)    ))  ) ");
        //        ////tweede Having regel

        //        //qry.Append("  AND NOT (ISNULL(AniBirthDate) AND ISNULL(minAanvoer) AND ISNULL(minAfvoer) AND ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) ");
        //        ////derde Having regel

        //        //qry.Append("  AND NOT( (ac.AniCategory = 4) AND (ISNULL(minAfvoer)) ) ");
        //        //vierde Having regel

        //        /////////////////////                ////////////////////////////////////////////////////////////

        //        qry = new StringBuilder();

        //        qry.AppendLine("  SELECT DISTINCT ac.AniId, ac.AniCategory, a.AniBirthDate, a.ThrId AS a_thrid, u.ThrId AS u_thrid, ");
        //        qry.AppendLine("  (SELECT MIN( " + sDtCol + " ) AS dtA FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR ISNULL(UbnID)) AND MovKind IN (1, 4, 7)  AND MovId>0  ) AS minAanvoer, ");
        //        qry.AppendLine("  (SELECT MIN( " + sDtCol + " ) AS dtB FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR ISNULL(UbnID)) AND MovKind IN (2, 3, 5, 6) AND MovId>0  ) AS minAfvoer, ");
        //        qry.AppendLine("  (SELECT MAX( " + sDtCol + " ) AS dtC FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR ISNULL(UbnID)) AND MovKind IN (1, 4, 7) AND MovId>0    AND MovDate <= '" + strDate + "' HAVING dtC <= '" + strDate + "') AS maxAanvoer, ");
        //        qry.AppendLine("  (SELECT MAX( " + sDtCol + " ) AS dtD FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR ISNULL(UbnID)) AND MovKind IN (2, 3, 5, 6) AND MovId>0  AND MovDate <= '" + strDate + "' HAVING dtD <= '" + strDate + "') AS maxAfvoer, ");
        //        qry.AppendLine("  (SELECT MAX( " + sDtCol + " ) AS dtE FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR isnull(UbnID)) AND MovKind IN (3) AND MovId>0  HAVING dtE <= '" + strDate + "') AS MaxDood, ");
        //        qry.AppendLine("  (SELECT MAX(MovID) FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR ISNULL(UbnID)) AND MovKind IN (1, 4, 7)  AND MovId>0   AND MovDate <='" + strDate + "' ) AS maxAanvoer_ID, ");
        //        qry.AppendLine("  (SELECT MAX(MovID) FROM " + database + "MOVEMENT WHERE AniId=a.AniId AND (UbnId=be.UbnId OR ISNULL(UbnID)) AND MovKind IN (2, 3, 5, 6) AND MovId>0  AND MovDate <='" + strDate + "' ) AS maxAfvoer_ID ");

        //        qry.AppendLine("  FROM " + database + "ANIMAL a ");

        //        qry.AppendLine("  LEFT JOIN " + database + "ANIMALCATEGORY ac ON (a.AniId=ac.AniId) ");
        //        qry.AppendLine("  LEFT JOIN agrofactuur.BEDRIJF be ON (be.FarmId=ac.FarmId) ");
        //        qry.AppendLine("  LEFT JOIN agrofactuur.UBN u ON (u.UBNid=be.UbnId) ");

        //        qry.AppendLine("  WHERE ((ac.AniCategory BETWEEN 0 AND 4) " + sQ_mede_eigenaar + ") ");

        //        qry.AppendLine(sQ_farmId);
        //        qry.AppendLine(sQ_aniId);
        //        qry.AppendLine(sQ_groupId);

        //        qry.AppendLine("  AND (( DATE(a.AniBirthDate) <= DATE('" + strDate + "')) OR ISNULL(a.AniBirthDate)) ");

        //        //qry.Append("  GROUP BY a.AniId, ac.AniCategory  HAVING (   (ISNULL(minAanvoer)  OR (minAanvoer <= '" + strDate + "'))  ");


        //        //qry.Append("  OR (NOT(ISNULL(minAanvoer) AND ISNULL(minAfvoer))  AND (minAanvoer > minAfvoer) ) ) ");
        //        //qry.Append("  OR ( (NOT(ISNULL(maxAanvoer)) AND NOT(ISNULL(maxAfvoer)))  AND (maxAanvoer = maxAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID)) ");
        //        //qry.Append("  OR ( (ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) AND (minAanvoer = minAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID))  ");
        //        //qry.Append("  AND (  ISNULL(maxAfvoer) OR (NOT(ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) AND (maxAanvoer > maxAfvoer))   ");
        //        //qry.Append("  OR ( NOT(ISNULL(maxAanvoer)) AND NOT(ISNULL(maxAfvoer)) AND (maxAanvoer = maxAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID)) ");
        //        //qry.Append("  OR ( (ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) AND (minAanvoer = minAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID)) ) ");
        //        //qry.Append("  AND NOT (ISNULL(AniBirthDate) AND ISNULL(minAanvoer) AND ISNULL(minAfvoer) AND ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) ");
        //        //qry.Append("  AND ((maxDood >= '" + strDate + "') OR ISNULL(MaxDood)) ");

        //        //aangepast ivm dubbele dieren 
        //        //qry.AppendLine("  GROUP BY a.AniId, ac.AniCategory  HAVING (   (ISNULL(minAanvoer)  OR (minAanvoer <= '" + strDate + "'))  ");
        //        qry.AppendLine("  GROUP BY a.AniId   HAVING (   (ISNULL(minAanvoer)  OR (minAanvoer <= '" + strDate + "'))  ");


        //        qry.AppendLine("  OR (NOT(ISNULL(minAanvoer) AND ISNULL(minAfvoer))  AND (minAanvoer > minAfvoer) ) OR ( (NOT(ISNULL(maxAanvoer)) AND NOT(ISNULL(maxAfvoer))) AND (maxAanvoer = maxAfvoer)  ");
        //        qry.AppendLine("  AND (maxAanvoer_ID > maxAfvoer_ID)) OR ( (ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) AND (minAanvoer = minAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID)) )  ");
        //        qry.AppendLine("  AND (  ISNULL(maxAfvoer) OR (NOT(ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) AND (maxAanvoer > maxAfvoer))    ");
        //        qry.AppendLine("  OR ( NOT(ISNULL(maxAanvoer)) AND NOT(ISNULL(maxAfvoer)) AND (maxAanvoer = maxAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID))  ");
        //        qry.AppendLine("  OR ( (ISNULL(maxAanvoer) AND ISNULL(maxAfvoer)) AND (minAanvoer = minAfvoer) AND (maxAanvoer_ID > maxAfvoer_ID)) ) AND NOT (ISNULL(AniBirthDate)  ");
        //        qry.AppendLine("  AND ISNULL(minAanvoer) AND ISNULL(minAfvoer) AND ISNULL(maxAanvoer) AND ISNULL(maxAfvoer))  ");
        //        qry.AppendLine(" AND NOT( (ac.AniCategory = 4) AND (ISNULL(minAfvoer)) ) ");
        //        qry.AppendLine(" AND ((maxDood >= '" + strDate + "') OR ISNULL(MaxDood)) ");
        //        ////////////////////////////////////////////////////////////////////////////////////
        //    }
        //    unLogger.WriteInfo(qry.ToString());
        //    return qry;
        //}

        [Obsolete("Verplaatst naar RDBTools")]
        public bool rdDierAanwezig(int aniId, int farmId, int pUbnID, DateTime datum, int groupId, int mede_eigenaar, int pProgId)
        {
            return RDBTools.rdDierAanwezig(aniId, farmId, pUbnID, datum, groupId, mede_eigenaar, pProgId);
            //if (farmId == 0) { return false; }

            //StringBuilder qry = getQuery_Aanwezigheid(farmId, pUbnID, aniId, datum, groupId, mede_eigenaar, pProgId);

            //DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), qry);

            //return (dtResults.Rows.Count > 0);
        }

        [Obsolete("Verplaatst naar RDBTools")]
        public int rdCountDierAanwezig(int farmId, int pUbnId, DateTime datum, int groupId, int mede_eigenaar, int pProgramId)
        {
            return RDBTools.rdCountDierAanwezig(farmId, pUbnId, datum, groupId, mede_eigenaar, pProgramId);
            //if (farmId == 0) { return 0; }

            //StringBuilder qry = getQuery_Aanwezigheid(farmId, pUbnId, 0, datum, groupId, mede_eigenaar, pProgramId);

            //DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), qry);

            //return dtResults.Rows.Count;
        }

        [Obsolete("Verplaatst naar RDBTools")]
        public List<int> rdAanwezigeDieren(int farmId, int pUbnID, DateTime datum, int groupId, int mede_eigenaar, int pProgId)
        {
            return RDBTools.rdAanwezigeDieren(farmId, pUbnID, datum, groupId, mede_eigenaar, pProgId);

            //    if (farmId == 0) { return null; }

            //    List<int> returnList = new List<int>();

            //    StringBuilder qry = getQuery_Aanwezigheid(farmId, pUbnID, 0, datum, groupId, mede_eigenaar, pProgId);

            //    DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), qry);

            //    foreach (DataRow drRow in dtResults.Rows)
            //    {
            //        returnList.Add(int.Parse(drRow["AniId"].ToString()));
            //    }

            //    return returnList;
        }

        public DataTable getDierenAanwezigInPeriode_minascategorie(int pFarmId, DateTime pBegindate, DateTime pEnddate)
        {
            StringBuilder qry = new StringBuilder();
            //qry.AppendFormat("SET @dtBegin='{0}'; " + Environment.NewLine, pBegindate.ToString("yyyy-MM-dd HH:mm:ss"));
            //qry.AppendFormat("SET @dtEnd='{0}'; " + Environment.NewLine, pEnddate.ToString("yyyy-MM-dd HH:mm:ss"));
            //qry.AppendFormat("SET @farmId={0}; " + Environment.NewLine, pFarmId);

            string sBegindate = pBegindate.ToString("yyyy-MM-dd HH:mm:ss");
            string sEnddate = pEnddate.ToString("yyyy-MM-dd HH:mm:ss");


            qry.Append("SELECT DISTINCT a.AniId, a.AniAlternatenumber, a.AniBirthDate, a.AniSex, a.AniHaircolor_Memo, a.Anihaircolor," +
                                      " IF(ISNULL(a.AniMinasCategory), 0, a.AniMinasCategory) as AniMinasCategory");
            qry.AppendFormat(", (SELECT movKind FROM MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId HAVING MIN( ADDTIME(MovDate, IF(ISNULL(MovTime), TIME('00:00'),  TIME(MovTime))) ) >= '{0}') AS eersteMovKindNaDtEnd ", sEnddate);
            qry.AppendFormat(", (SELECT MAX( ADDTIME(MovDate, IF(ISNULL(MovTime), TIME('00:00'),  TIME(MovTime))) ) AS dtC FROM MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId AND MovKind IN (1, 4, 7) HAVING dtC <= '{0}') AS maxAanvoer ", sEnddate);
            qry.AppendFormat(", (SELECT MAX( ADDTIME(MovDate, IF(ISNULL(MovTime), TIME('00:00'),  TIME(MovTime))) ) AS dtD FROM MOVEMENT WHERE AniId=a.AniId AND UbnId=be.UbnId AND MovKind IN (2, 3, 5, 6) HAVING dtD <= '{0}') AS maxAfvoer ", sEnddate);

            qry.Append("FROM ANIMAL a ");

            qry.Append("LEFT JOIN ANIMALCATEGORY ac ON (a.AniId=ac.AniId) ");
            qry.Append("LEFT JOIN agrofactuur.BEDRIJF be ON (be.FarmId=ac.FarmId) ");
            qry.Append("LEFT JOIN agrofactuur.UBN u ON (u.UBNid=be.UbnId) ");

            qry.AppendFormat("WHERE (ac.FarmId={0}) AND (ac.AniCategory BETWEEN 0 AND 4) ", pFarmId);
            qry.AppendFormat("AND ((a.AniBirthDate <= '{0}') OR ISNULL(a.AniBirthDate)) ", sEnddate); //dieren die geboren zijn voor einddatum

            qry.Append("GROUP BY a.AniId, ac.AniCategory ");

            qry.Append("HAVING ");
            qry.Append("( ");
            qry.Append("(((maxAanvoer > maxAfvoer) OR ISNULL(maxAfvoer)) AND NOT ISNULL(maxAanvoer)) "); //meest recente movement voor dtEnd IS een aanvoer
            qry.Append("OR ");
            qry.AppendFormat("(  ((maxAfvoer > maxAanvoer) OR ISNULL(maxAanvoer)) AND NOT ISNULL(maxAfvoer) AND maxAfvoer >= '{0}') ", sBegindate); //afgevoerd IN periode, dus aanwezig geweest.
            qry.Append("OR ");
            qry.Append("((ISNULL(maxAfvoer) AND ISNULL(maxAanvoer)) AND (eersteMovKindNaDtEnd IN (2,3,5,6) OR ISNULL(eersteMovKindNaDtEnd)) ) "); //geen movements, dus dier geboren op bedrijf voor einddatum
            qry.Append(") ");

            return mDatabase.QueryData(mToken.getLastChildConnection(), qry);
        }

        #endregion

        public DateTime getMinAanvoerDatum(int farmId, int groupId)
        {
            if (farmId == 0) { return DateTime.MinValue; }

            StringBuilder sql = new StringBuilder(
                "SELECT MIN(MovDate) AS dt" +
               " FROM agrofactuur.BEDRIJF b" +
               " LEFT JOIN MOVEMENT m ON (m.UbnId=b.UbnId )" + // AND m.ProgId=b.ProgId)" +
               " WHERE (b.FarmId=" + farmId.ToString() + ") AND (m.Groupnr=" + groupId.ToString() + ") AND (m.MovKind=1)");

            DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), sql);

            if (dtResults.Rows.Count == 1)
            {
                DateTime dt;
                DateTime.TryParse(dtResults.Rows[0]["dt"].ToString(), out dt);
                return dt;
            }
            else
            {
                return DateTime.MinValue;
            }
        }

        public DataTable getGroepsGewijzeDeklijstSchaap(int pFarmId, int pLimit, int pOffset, string pSort)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("SELECT a.AniId, a.AniLifeNumber,a.AniAlternateNumber, ac.AniWorknumber, ");
            sb.Append("a.AniBirthDate, s.LabLabel AS scrapie, Substr(lstatus.LabLabel, 1, 1) AS status, ");
            sb.Append("(");
            sb.Append("SELECT CAST(GROUP_CONCAT(l.LabLabel, sr.SraRate ORDER BY sr.SraRate DESC, l.LabLabel ASC SEPARATOR '') AS CHAR) AS conRasBalk ");
            sb.Append("FROM SECONRAC sr ");
            sb.Append("JOIN agrofactuur.AGRO_LABELS l ON (l.labKind = 206 AND l.LabCountry = 0 AND l.LabProgId = 3 AND l.LabProgramId = 0 AND l.LabId = sr.RacId ) ");
            sb.Append("WHERE sr.AniId = a.AniId ");
            sb.Append("GROUP BY sr.AniId ");
            sb.Append(") AS rasbalk ");

            sb.Append("FROM ANIMAL a ");
            sb.Append("JOIN ANIMALCATEGORY ac USING(aniId) ");
            sb.Append("LEFT JOIN agrofactuur.LABELS s ON ((a.AniScrapie = s.LabId) AND (s.LabKind = 49) AND (s.LabCountry = 528)) ");
            sb.Append("LEFT JOIN agrofactuur.LABELS lstatus ON ((a.AniStatus = lstatus.LabId) AND (lstatus.Labkind = 37) AND (lstatus.LabCountry = 528)) ");

            sb.AppendFormat("WHERE ac.FarmId = {0} ", pFarmId);
            sb.Append("AND ac.AniCategory IN (1,2,3) ");
            sb.Append("AND a.AniSex = 2 ");



            if (pSort != "")
            {
                if (pSort.Contains("AniWorknumber"))
                {
                    sb.Append("ORDER BY ac." + pSort + " ");
                }
                else
                {
                    sb.Append("ORDER BY a." + pSort + " ");
                }
            }
            else
            {
                sb.Append("ORDER BY a.AniLifeNumber ");
            }

            if (pLimit > 0 && pOffset > 0)
            {
                sb.AppendFormat("LIMIT {0}, {1}", pOffset, pLimit);
            }

            return mDatabase.QueryData(mToken.getLastChildConnection(), sb);
        }

        public DataTable getDekkingEventLijstDekperiode(int pFarmId, DateTime pBegindatum, DateTime pEindDatum, int pProgId)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append(" SELECT e.AniId,a.AniLifeNumber, e.EveDate, e.eveKind,lbl.LabLabel AS Soort, e.EventId, i.insKind, ");
            sb.Append(" i.AniIdFather AS insFather,aI.AniLifeNumber AS insFatherLifeNumber, i.insChargeNumber, i.insPmsg, ");
            sb.Append(" g.EndDate, g.AniIdFather as gfather , aG.AniLifeNumber AS gFatherLifeNumber ");
            sb.Append(" FROM EVENT e ");
            sb.Append(" LEFT JOIN INSEMIN i ON ((e.EventId = i.EventId) AND (e.EveKind = 2)) ");
            sb.Append(" LEFT JOIN GRZTOGTH g ON ((e.EventId = g.EventId) AND (e.EveKind = 12)) ");

            sb.Append(" LEFT JOIN ANIMAL aI ON aI.AniId= i.AniIdFather ");
            sb.Append(" LEFT JOIN ANIMAL aG ON aG.AniId= g.AniIdFather ");
            sb.Append("  LEFT JOIN ANIMAL a ON a.AniId= e.AniId ");
            sb.Append("  LEFT JOIN agrofactuur.AGRO_LABELS lbl ON (lbl.LabId=e.eveKind  AND lbl.LabKind=2 AND lbl.LabCountry=528 AND lbl.LabProgId=" + pProgId.ToString() + "  ) ");
            sb.Append(" WHERE e.EveKind IN (2, 12) ");
            sb.AppendFormat(" AND Date(e.EveDate) BETWEEN Date('{0}') and Date('{1}') ", getDatabaseDateFormat(pBegindatum), getDatabaseDateFormat(pEindDatum));
            sb.Append(" AND e.AniId IN ");
            sb.Append(" ( ");
            sb.Append(" SELECT a.AniId ");
            sb.Append(" FROM ANIMAL a ");
            sb.Append(" JOIN ANIMALCATEGORY ac USING(aniId) ");
            sb.AppendFormat(" WHERE ac.FarmId = {0} ", pFarmId);
            sb.Append(" AND a.AniSex = 2 ");
            sb.Append(" ) ");
            sb.Append(" AND e.EventId>0 ");
            sb.Append(" ORDER BY AniId, EveDate ");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            DataTable cloon = tbl.Clone();
            cloon.Columns["EveDate"].DataType = typeof(System.DateTime);
            cloon.Columns["EndDate"].DataType = typeof(System.DateTime);
            foreach (DataRow rw in tbl.Rows)
            {
                cloon.ImportRow(rw);
            }
            tbl = cloon;
            return tbl;
        }

        public DataTable getDekrammenByFarmId(int pFarmid)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT a.AniId, a.AniLifeNumber ");
            sb.Append("FROM BULLUBN b ");
            sb.Append("JOIN ANIMAL a ON a.AniId = b.BullId ");
            sb.AppendFormat("WHERE b.FarmId = {0}", pFarmid);
            sb.Append("ORDER BY b.Preferred DESC ");

            return mDatabase.QueryData(mToken.getLastChildConnection(), sb);
        }

        #region farmconfig_oud_obsolete

        public List<FARMCONFIG> getFarmConfigs(int pFarmId)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM FARMCONFIG  WHERE FarmId = " + pFarmId.ToString());
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<FARMCONFIG> lResultList = new List<FARMCONFIG>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                FARMCONFIG lFarmconf = new FARMCONFIG();
                if (mDatabase.FillObject(lFarmconf, drtrns))
                {
                    SettingsDecrypter Decrypt = new SettingsDecrypter();
                    Decrypt.DecryptFarmConfig(ref lFarmconf);
                    lResultList.Add(lFarmconf);
                }
            }
            return lResultList;
        }

        public List<FARMCONFIG> getFarmConfigsByKey(string pKey)
        {
            StringBuilder lsb = new StringBuilder("SELECT * FROM FARMCONFIG  WHERE Fkey = '" + pKey + "'");
            DataTable tbl = mDatabase.QueryData(mToken, lsb);
            List<FARMCONFIG> lResultList = new List<FARMCONFIG>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                FARMCONFIG lFarmconf = new FARMCONFIG();
                if (mDatabase.FillObject(lFarmconf, drtrns))
                {
                    SettingsDecrypter Decrypt = new SettingsDecrypter();
                    Decrypt.DecryptFarmConfig(ref lFarmconf);
                    lResultList.Add(lFarmconf);
                }
            }
            return lResultList;
        }

        public List<FARMCONFIG> getFarmConfigsByStartKey(int pFarmID, string pKey)
        {
            List<FARMCONFIG> lResultList = new List<FARMCONFIG>();
            if (pFarmID > 0 && pKey != null)
            {
                StringBuilder lsb = new StringBuilder("SELECT * FROM FARMCONFIG  WHERE FarmId=" + pFarmID.ToString() + " AND Fkey LIKE '" + pKey + "%'");
                DataTable tbl = mDatabase.QueryData(mToken, lsb);

                foreach (DataRow drtrns in tbl.Rows)
                {
                    FARMCONFIG lFarmconf = new FARMCONFIG();
                    if (mDatabase.FillObject(lFarmconf, drtrns))
                    {
                        SettingsDecrypter Decrypt = new SettingsDecrypter();
                        Decrypt.DecryptFarmConfig(ref lFarmconf);
                        lResultList.Add(lFarmconf);
                    }
                }
            }
            return lResultList;
        }

        public bool DeleteFarmConfig(FARMCONFIG pFConfig)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFConfig);
            String[] DeleteParams = new String[]
             {
                 "FarmId",
                 "FKey"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pFConfig, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pFConfig, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        #endregion

        #region farmconfig

        public FARMCONFIG getFarmConfig(int pFarmId, string pKey, string pDefaultValue)
        {
            FARMCONFIG lFarmConfig = getFarmConfig(pFarmId, pKey);
            if (lFarmConfig.FarmId == 0)
            {
                lFarmConfig.FarmId = pFarmId;
                lFarmConfig.FKey = pKey;
                lFarmConfig.FValue = pDefaultValue;
            }
            return lFarmConfig;
        }

        public FARMCONFIG getFarmConfig(int pFarmId, string pKey)
        {
            FARMCONFIG lFarmConfig = new FARMCONFIG();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM FARMCONFIG");
            lQuery.AppendFormat(" WHERE FarmId = {0} AND FKey = '{1}' ", pFarmId, pKey);
            mDatabase.FillObject(mToken, lFarmConfig, lQuery);
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.DecryptFarmConfig(ref lFarmConfig);
            return lFarmConfig;
        }

        private bool UpdateFarmConfig(FARMCONFIG pFarmConf)
        {
            SettingsDecrypter Encrypt = new SettingsDecrypter();
            Encrypt.EncryptFarmConfig(ref pFarmConf);
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFarmConf);
            String[] UpdateParams = new String[]
            {
                            "FKey",
                            "FValue"
            };
            string[] keys = { "FarmId", "FKey" };
            String CommandText = mDatabase.CreateUpdateCommandTextDP(pFarmConf, keys, UpdateParams);
            Encrypt.DecryptFarmConfig(ref pFarmConf);
            if (mDatabase.ModifyObject(mToken, pFarmConf, CommandText) != 1) return false;
            return true;
        }

        private void InsertFarmConfig(FARMCONFIG pFarmConf)
        {
            SettingsDecrypter Encrypt = new SettingsDecrypter();
            Encrypt.EncryptFarmConfig(ref pFarmConf);
            try
            {
                WriteActions.SaveObject(pFarmConf);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
            }
            finally
            {
                Encrypt.DecryptFarmConfig(ref pFarmConf);
            }
        }

        private void updateFarmConfig(int farmid, string key, string value)
        {
            FARMCONFIG fc = new FARMCONFIG();
            fc.FarmId = farmid;
            fc.FKey = key;
            fc.FValue = value;
            UpdateFarmConfig(fc);
        }

        private void insertFarmConfig(int farmid, string key, string value)
        {
            FARMCONFIG fc = new FARMCONFIG();
            fc.FarmId = farmid;
            fc.FKey = key;
            fc.FValue = value;
            InsertFarmConfig(fc);
        }

        public string GetFarmConfigValue(int pFarmId, string pFKey, string pDefaultValue)
        {
            string value = GetFarmConfigValue(pFarmId, pFKey);
            if (value != string.Empty) { return value; } else { return pDefaultValue; }
        }

        public string GetFarmConfigValue(int pFarmId, string pFKey)
        {
            FARMCONFIG fc = getFarmConfig(pFarmId, pFKey);
            if (fc.FKey == pFKey) { return fc.FValue; }

            //niets gevonden
            return string.Empty;
        }

        public void SetFarmConfigValue(int pFarmId, string pFKey, string pFValue)
        {
            FARMCONFIG frmcnfg = getFarmConfig(pFarmId, pFKey);

            if (frmcnfg == null || frmcnfg.FarmId == 0)
            {
                insertFarmConfig(pFarmId, pFKey, pFValue);
            }
            else
            {
                updateFarmConfig(pFarmId, pFKey, pFValue);
            }
        }
        public void SetFarmConfigValue(int pFarmId, string pFKey, string pFValue, bool pEncrypt)
        {
            FARMCONFIG frmcnfg = getFarmConfig(pFarmId, pFKey);

            if (frmcnfg == null || frmcnfg.FarmId == 0)
            {
                frmcnfg.FarmId = pFarmId;
                frmcnfg.FKey = pFKey;
                frmcnfg.FValue = pFValue;
                SettingsDecrypter Encrypt = new SettingsDecrypter();
                Encrypt.EncryptFarmConfig(ref frmcnfg, pEncrypt);
                //DbCommand cmd = mDatabase.CreateParameters(mToken, frmcnfg);

                string CommandText = mDatabase.CreateInsertCommandText(frmcnfg);

                try
                {
                    WriteActions.SaveObject(frmcnfg);
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                }
                Encrypt.DecryptFarmConfig(ref frmcnfg);
            }
            else
            {
                SettingsDecrypter Encrypt = new SettingsDecrypter();
                Encrypt.EncryptFarmConfig(ref frmcnfg, pEncrypt);
                //DbCommand cmd = mDatabase.CreateParameters(mToken, frmcnfg);
                String[] UpdateParams = new String[]
                {
                                "FValue"
                };
                string[] keys = { "FarmId", "FKey" };
                string CommandText = mDatabase.CreateUpdateCommandTextDP(frmcnfg, keys, UpdateParams);
                mDatabase.ModifyObject(mToken, frmcnfg, CommandText);
                //mDatabase.ExecuteNonQueryCommand(cmd);
                Encrypt.DecryptFarmConfig(ref frmcnfg);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pKey"></param>
        /// <param name="ubnId"></param>
        /// <returns></returns>
        public IEnumerable<FARMCONFIG> GetFarmConfigValueByKeyForUBN(string pKey, int ubnId)
        {
            string sql =
              string.Format(@"SELECT fc.*
                
                FROM agrofactuur.FARMCONFIG fc 
                JOIN agrofactuur.BEDRIJF b ON fc.FarmId = b.FarmId

                WHERE fc.FKey = '{0}'
                AND	b.UbnId = {1} 
                AND b.FarmId > 0", pKey, ubnId);
            ;
            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<FARMCONFIG>(tbl);
        }


        #endregion

        #region ANIMAL_PROPERTY

        private ANIMAL_PROPERTY GetAnimalProperty(int pFarmID, int pAniID, string pAP_Key)
        {
            ANIMAL_PROPERTY lRetVal = new ANIMAL_PROPERTY();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM ANIMAL_PROPERTY");
            lQuery.AppendFormat(" WHERE FarmID = {0} AND AniID= {1} AND AP_Key = '{2}' ", pFarmID, pAniID, pAP_Key);

            mDatabase.FillObject(mToken.getLastChildConnection(), lRetVal, lQuery);

            return lRetVal;
        }

        private ANIMAL_PROPERTY GetAnimalProperty(int pAniID, string pAP_Key)
        {
            ANIMAL_PROPERTY lRetVal = new ANIMAL_PROPERTY();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM ANIMAL_PROPERTY");
            lQuery.AppendFormat(" WHERE  AniID= {0} AND AP_Key = '{1}' ", pAniID, pAP_Key);

            mDatabase.FillObject(mToken.getLastChildConnection(), lRetVal, lQuery);

            return lRetVal;
        }

        public List<ANIMAL_PROPERTY> getAnimalPropertys(int pFarmID, int pAniID)
        {
            List<ANIMAL_PROPERTY> lAnimalPropertys = new List<ANIMAL_PROPERTY>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM ANIMAL_PROPERTY");
            lQuery.AppendFormat(" WHERE FarmID = {0} AND AniID= {1} AND NOT ANIMAL_PROPERTY.AP_Key LIKE 'KEN%'  ", pFarmID, pAniID);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drtrns in tbl.Rows)
            {
                ANIMAL_PROPERTY lProgramconfig = new ANIMAL_PROPERTY();
                if (mDatabase.FillObject(lProgramconfig, drtrns))
                {
                    lAnimalPropertys.Add(lProgramconfig);
                }
            }
            return lAnimalPropertys;
        }

        public List<ANIMAL_PROPERTY> getAnimalPropertys(int pFarmID, List<string> pAP_Keys)
        {
            List<ANIMAL_PROPERTY> lAnimalPropertys = new List<ANIMAL_PROPERTY>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM ANIMAL_PROPERTY");
            lQuery.AppendFormat(" WHERE FarmID = {0}  AND ANIMAL_PROPERTY.AP_Key IN (" + stringListToString(pAP_Keys) + ")  ", pFarmID);
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);

            foreach (DataRow drtrns in tbl.Rows)
            {
                ANIMAL_PROPERTY lProgramconfig = new ANIMAL_PROPERTY();
                if (mDatabase.FillObject(lProgramconfig, drtrns))
                {
                    lAnimalPropertys.Add(lProgramconfig);
                }
            }
            return lAnimalPropertys;
        }

        private bool SaveAnimalProperty(ANIMAL_PROPERTY pObj)
        {
            try
            {
                if (WriteActions.SaveObject(pObj) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public string GetAnimalPropertyValue(int pFarmID, int pAniID, string pAP_Key, string pDefaultValue)
        {
            string value = GetAnimalPropertyValue(pFarmID, pAniID, pAP_Key);
            if (value != string.Empty) { return value; } else { return pDefaultValue; }
        }

        public string GetAnimalPropertyValue(int pFarmID, int pAniID, string pAP_Key)
        {
            ANIMAL_PROPERTY pc = GetAnimalProperty(pFarmID, pAniID, pAP_Key);
            if (pc.AP_Key == pAP_Key) { return pc.AP_Value; }

            //niets gevonden
            return string.Empty;
        }

        public string GetAnimalPropertyValue(int pAniID, string pAP_Key)
        {
            ANIMAL_PROPERTY pc = GetAnimalProperty(pAniID, pAP_Key);
            if (pc.AP_Key == pAP_Key) { return pc.AP_Value; }

            //niets gevonden
            return string.Empty;
        }

        public void SetAnimalPropertyValue(int pUbnId, int pFarmID, int pAniID, string pAP_Key, string pAP_Value)
        {
            ANIMAL_PROPERTY pc = GetAnimalProperty(pFarmID, pAniID, pAP_Key);
            if (pc.FarmID <= 0 && pAP_Key == "TES_Predikaat_Punten")
            {
                pc = GetAnimalProperty(pAniID, pAP_Key);
                if (pc.FarmID <= 0)
                {
                    pc.AniID = pAniID;
                    pc.FarmID = pFarmID;
                    pc.UbnID = pUbnId;
                    pc.AP_Key = pAP_Key;
                }
                pc.AP_Value = pAP_Value;
                SaveAnimalProperty(pc);
                return;
            }
            pc.AniID = pAniID;
            pc.FarmID = pFarmID;
            pc.UbnID = pUbnId;
            pc.AP_Key = pAP_Key;
            pc.AP_Value = pAP_Value;

            SaveAnimalProperty(pc);
        }

        public void SetAnimalPropertyValues(int farmid, int ubnid, List<int> dieren, string ap_key, string ap_value, int changedby, int sourceid)
        {
            try
            {
                if (dieren.Count() > 0)
                {
                    string[] keys = { ap_key };
                    List<ANIMAL_PROPERTY> props = getAnimalPropertys(farmid, keys.ToList()).FindAll(x => dieren.Contains(x.AniID));
                    if (props.Count() > 0)
                    {
                        mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), $@"UPDATE ANIMAL_PROPERTY SET UbnID={ubnid}, AP_VALUE='{ap_value}' ,Changed_By={changedby}, SourceID={sourceid} WHERE FarmID={farmid} AND AP_Key='{ap_key}' AND AniID IN ({string.Join(",", props.Select(y => y.AniID).ToArray())}) ");

                    }
                    if (props.Count() < dieren.Count())
                    {
                        StringBuilder sqlinsert = new StringBuilder($@"INSERT INTO ANIMAL_PROPERTY (UbnID,FarmID,AniID,AP_Key,AP_Value, Changed_By, SourceID) VALUES ");
                        List<int> insertdieren = dieren;
                        foreach (int it in props.Select(x => x.AniID))
                        {
                            insertdieren.RemoveAll(item => item == it);
                        }
                        foreach (int it in insertdieren)
                        {
                            sqlinsert.AppendLine($@"({ubnid},{farmid},{it},'{ap_key}','{ap_value}',{changedby},{sourceid})").Append(",");
                        }
                        sqlinsert.Length--;
                        mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), sqlinsert.ToString());
                    }
                }
            }
            catch (Exception exc) { unLogger.WriteError(exc.ToString()); }
        }

        public bool DeleteAnimalProperty(ANIMAL_PROPERTY pObj)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pObj);
            String[] DeleteParams = new String[]
             {
                 "AniID",
                 "FarmID",
                 "AP_Key"
             };
            string CommandText = mDatabase.CreateDeleteCommandText(pObj, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pObj, CommandText) == 1;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        #endregion

        #region programconfig

        private PROGRAMCONFIG GetProgramConfig(int pProgramId, string pFKey)
        {
            PROGRAMCONFIG lRetVal = new PROGRAMCONFIG();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM agrofactuur.PROGRAMCONFIG");
            lQuery.AppendFormat(" WHERE ProgramId = {0} AND FKey = '{1}' ", pProgramId, pFKey);
            //TODO als ge encrypt dan getProgramConfigs ook doen
            mDatabase.FillObject(mToken, lRetVal, lQuery);
            SettingsDecrypter Decrypt = new SettingsDecrypter();
            Decrypt.DecryptProgramConfig(ref lRetVal);
            return lRetVal;
        }

        public List<PROGRAMCONFIG> getProgramConfigs(int pProgramId)
        {
            List<PROGRAMCONFIG> lProgramconfigs = new List<PROGRAMCONFIG>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM agrofactuur.PROGRAMCONFIG");
            lQuery.AppendFormat(" WHERE ProgramId = {0} AND NOT PROGRAMCONFIG.FKey LIKE 'KEN%'  ", pProgramId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drtrns in tbl.Rows)
            {
                PROGRAMCONFIG lProgramconfig = new PROGRAMCONFIG();
                if (mDatabase.FillObject(lProgramconfig, drtrns))
                {
                    SettingsDecrypter Decrypt = new SettingsDecrypter();
                    Decrypt.DecryptProgramConfig(ref lProgramconfig);
                    lProgramconfigs.Add(lProgramconfig);
                }
            }
            return lProgramconfigs;
        }

        public List<PROGRAMCONFIG> getProgramConfigsByKeyAndValue(string pKey, string pValue)
        {
            List<PROGRAMCONFIG> lProgramconfigs = new List<PROGRAMCONFIG>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM agrofactuur.PROGRAMCONFIG");
            lQuery.AppendFormat(" WHERE FKey = '{0}' AND FValue= '{1}' ", pKey, pValue);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drtrns in tbl.Rows)
            {
                PROGRAMCONFIG lProgramconfig = new PROGRAMCONFIG();
                if (mDatabase.FillObject(lProgramconfig, drtrns))
                {
                    SettingsDecrypter Decrypt = new SettingsDecrypter();
                    Decrypt.DecryptProgramConfig(ref lProgramconfig);
                    lProgramconfigs.Add(lProgramconfig);
                }
            }
            return lProgramconfigs;
        }

        private bool SaveProgramConfig(PROGRAMCONFIG pObj)
        {
            try
            {
                if (WriteActions.SaveObject(pObj) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public string GetProgramConfigValue(int pProgramId, string pFKey, string pDefaultValue)
        {
            string value = GetProgramConfigValue(pProgramId, pFKey);
            if (value != string.Empty) { return value; } else { return pDefaultValue; }
        }

        public string GetProgramConfigValue(int pProgramId, string pFKey)
        {
            PROGRAMCONFIG pc = GetProgramConfig(pProgramId, pFKey);
            if (pc.FKey == pFKey) { return pc.FValue; }

            //niets gevonden
            return string.Empty;
        }

        public void SetProgramConfigValue(int pProgramId, string pFKey, string pFValue)
        {
            PROGRAMCONFIG pc = GetProgramConfig(pProgramId, pFKey);
            pc.ProgramId = pProgramId;
            pc.FKey = pFKey;
            pc.FValue = pFValue;
            SaveProgramConfig(pc);
        }

        public List<PROGRAMCONFIG> GetProgramConfigsAdminCredentials(int pProgramId, out string pUsername, out string pPassword, out string pBrsnummer)
        {
            pUsername = "";
            pPassword = "";
            pBrsnummer = "";
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT p1.* FROM PROGRAMCONFIG p1 ");
            lQuery.Append(" WHERE p1.ProgramId = ( ");
            lQuery.AppendFormat(" SELECT PROGRAMCONFIG.FValue FROM PROGRAMCONFIG WHERE PROGRAMCONFIG.ProgramId={0} AND PROGRAMCONFIG.FKey='adminprogramid' ", pProgramId);
            lQuery.Append(" ) AND NOT p1.FKey LIKE 'KEN%' ");
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            List<PROGRAMCONFIG> lProgramconfigs = new List<PROGRAMCONFIG>();
            foreach (DataRow drtrns in tbl.Rows)
            {
                PROGRAMCONFIG lProgramconfig = new PROGRAMCONFIG();
                if (mDatabase.FillObject(lProgramconfig, drtrns))
                {
                    SettingsDecrypter Decrypt = new SettingsDecrypter();
                    Decrypt.DecryptProgramConfig(ref lProgramconfig);
                    lProgramconfigs.Add(lProgramconfig);
                }
            }
            if (lProgramconfigs.Count() > 0)
            {
                var user = from n in lProgramconfigs
                           where n.FKey == "LNV2IRCredidentialsUserName"
                           select n;
                if (user.Count() > 0)
                {
                    pUsername = user.ElementAt(0).FValue;
                }
                var pwuser = from n in lProgramconfigs
                             where n.FKey == "LNV2IRCredidentialsPassword"
                             select n;
                if (pwuser.Count() > 0)
                {
                    pPassword = pwuser.ElementAt(0).FValue;
                }
                var lbrsnummer = from n in lProgramconfigs
                                 where n.FKey == "LNV2IRCredidentialsBrsnummer"
                                 select n;
                if (lbrsnummer.Count() > 0)
                {
                    pBrsnummer = lbrsnummer.ElementAt(0).FValue;
                }
            }
            return lProgramconfigs;
        }

        public void getStandaardKetoConfigWaardes(int pProgramId, int pFarmId, int pAniId, out int ketodagen, out int ketodagendubbel, out double ketoml)
        {

            string strketodagen = GetFarmConfigValue(pFarmId, "ketoboxdagen", "");
            string strketodagendubbel = GetFarmConfigValue(pFarmId, "ketoboxdagendubbel", "");
            string strketoml = "";// GetFarmConfigValue(pFarmId, "ketoboxmlproduct", "");
            if (strketodagen == "")
            {
                strketodagen = GetProgramConfigValue(pProgramId, "ketodagendefault");
            }
            if (strketoml == "")
            {
                strketoml = GetProgramConfigValue(pProgramId, "ketomldefault");
            }
            ketodagen = int.Parse(strketodagen);
            ketodagendubbel = 0;
            if (!string.IsNullOrWhiteSpace(strketodagendubbel))
            {
                int.TryParse(strketodagendubbel, out ketodagendubbel); ;
            }
            ketoml = double.Parse(strketoml);
            if (pAniId > 0)
            {
                List<ANIMAL_PROPERTY> aps = getAnimalPropertys(pFarmId, pAniId);
                var kd = from n in aps where n.AP_Key == "ketoboxdagen" select n;
                if (kd.Count() > 0)
                {
                    strketodagen = kd.ElementAt(0).AP_Value;
                    ketodagen = int.Parse(strketodagen);
                }
                var kdd = from n in aps where n.AP_Key == "ketoboxdagendubbel" select n;
                if (kdd.Count() > 0)
                {
                    strketodagendubbel = kdd.ElementAt(0).AP_Value;
                    int.TryParse(strketodagendubbel,out ketodagendubbel);
                }
                //kd = from n in aps where n.AP_Key == "ketoboxmlproduct" select n;
                //if (kd.Count() > 0)
                //{
                //    strketoml = kd.ElementAt(0).AP_Value;
                //    ketoml = double.Parse(strketoml);
                //}
            }
        }

        public IEnumerable<PROGRAMCONFIG> GetProgramConfigValueByKeyForUBN(string pKey, int ubnId, int? filterOnProgId = null)
        {
            string sql =
              string.Format(@"SELECT pc.*
                
                FROM agrofactuur.PROGRAMCONFIG pc 
                JOIN agrofactuur.BEDRIJF b ON pc.ProgramId = b.Programid

                WHERE pc.FKey = '{0}'
                AND	b.UbnId = {1}
                ", pKey, ubnId);

            if (filterOnProgId.HasValue)
                sql = sql + " AND b.ProgId = " + filterOnProgId.Value.ToString();

            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql), MissingSchemaAction.Add);
            return getList<PROGRAMCONFIG>(tbl);
        }



        #endregion

        #region groupconfig

        private GROUPCONFIG GetGroupConfig(int pFarmId, int pGroupId, string pFKey)
        {
            GROUPCONFIG lRetVal = new GROUPCONFIG();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM agrofactuur.GROUPCONFIG");
            lQuery.AppendFormat(" WHERE FarmId = {0} AND GroupId = {1} AND FKey like '{2}' ", pFarmId, pGroupId, pFKey);

            mDatabase.FillObject(mToken, lRetVal, lQuery);

            return lRetVal;
        }

        private bool SaveGroupConfig(GROUPCONFIG pObj)
        {
            try
            {
                if (WriteActions.SaveObject(pObj) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public string GetGroupConfigValue(int pFarmId, int pGroupId, string pFKey, string pDefaultValue)
        {
            string value = GetGroupConfigValue(pFarmId, pGroupId, pFKey);

            if (value != string.Empty) { return value; } else { return pDefaultValue; }
        }

        public string GetGroupConfigValue(int pFarmId, int pGroupId, string pFKey)
        {
            GROUPCONFIG gc = GetGroupConfig(pFarmId, pGroupId, pFKey);
            if (gc.FKey == pFKey) { return gc.FValue; }

            //niets gevonden
            return string.Empty;
        }

        public string GetGroupConfigValue(int pProgramId, int pFarmId, int pGroupId, string pFKey, string pDefaultValue)
        {
            string s = GetGroupConfigValue(pFarmId, pGroupId, pFKey);

            if (s == string.Empty)
            {
                //als setting nog niet ingesteld is, haal default op  
                s = GetConfigValue(pProgramId, pFarmId, pFKey, pDefaultValue);

                //sla default standaard op onder groupId
                //lMstb.SetGroupConfigValue(pFarmId, pGroupId, pFKey, s);             
            }

            return s;
        }

        public void SetGroupConfigValue(int pFarmId, int pGroupId, string pFKey, string pFValue)
        {
            GROUPCONFIG gc = GetGroupConfig(pFarmId, pGroupId, pFKey);
            gc.FarmId = pFarmId;
            gc.GroupId = pGroupId;
            gc.FKey = pFKey;
            gc.FValue = pFValue;
            SaveGroupConfig(gc);
        }

        #endregion

        #region artikel_bedrijf_config

        private ARTIKEL_BEDRIJF_CONFIG GetArtikelBedrijfConfig(int pFarmId, int pArtId, string pFKey)
        {
            ARTIKEL_BEDRIJF_CONFIG lRetVal = new ARTIKEL_BEDRIJF_CONFIG();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM agrofactuur.ARTIKEL_BEDRIJF_CONFIG");
            lQuery.AppendFormat(" WHERE FarmId = {0} AND ArtId = {1} AND FKey like '{2}' ", pFarmId, pArtId, pFKey);

            mDatabase.FillObject(mToken, lRetVal, lQuery);

            return lRetVal;
        }

        private bool SaveArtikelBedrijfConfig(ARTIKEL_BEDRIJF_CONFIG pObj)
        {
            try
            {
                if (WriteActions.SaveObject(pObj) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public string GetArtikelBedrijfConfigValue(int pFarmId, int pArtId, string pFKey, string pDefaultValue)
        {
            string value = GetArtikelBedrijfConfigValue(pFarmId, pArtId, pFKey);

            if (value != string.Empty) { return value; } else { return pDefaultValue; }
        }

        public string GetArtikelBedrijfConfigValue(int pFarmId, int pArtId, string pFKey)
        {
            ARTIKEL_BEDRIJF_CONFIG abc = GetArtikelBedrijfConfig(pFarmId, pArtId, pFKey);
            if (abc.FKey == pFKey) { return abc.FValue; }

            //niets gevonden
            return string.Empty;
        }

        public void SetArtikelBedrijfConfigValue(int pFarmId, int pArtId, string pFKey, string pFValue)
        {
            ARTIKEL_BEDRIJF_CONFIG abc = GetArtikelBedrijfConfig(pFarmId, pArtId, pFKey);
            abc.FarmId = pFarmId;
            abc.ArtId = pArtId;
            abc.FKey = pFKey;
            abc.FValue = pFValue;
            SaveArtikelBedrijfConfig(abc);
        }

        #endregion

        #region config-algemeen

        public string GetConfigValue(int pProgramId, int pFarmId, string pFKey, string pDefaultValue)
        {
            string value = GetConfigValue(pProgramId, pFarmId, pFKey);

            if (value != string.Empty) { return value; } else { return pDefaultValue; }
        }

        public string GetConfigValue(int pProgramId, int pFarmId, string pFKey)
        {
            FARMCONFIG fc = getFarmConfig(pFarmId, pFKey);
            if (fc.FKey == pFKey && fc.FValue != "")
            {
                return fc.FValue;
            }

            PROGRAMCONFIG pc = GetProgramConfig(pProgramId, pFKey);
            if (pc.FKey == pFKey)
            {
                return pc.FValue;
            }

            //niets gevonden
            return string.Empty;
        }



        #endregion

        public double getArtVastePrijs(int farmId, int artId)
        {
            double prijs = 0;

            //1 - probeer uit ARTIKEL_BEDRIJF_CONFIG                        
            string FKey = "ArtVastePrijs";
            ARTIKEL_BEDRIJF_CONFIG abc = GetArtikelBedrijfConfig(farmId, artId, FKey);

            if (abc.FValue != "")
            {
                double.TryParse(abc.FValue, out prijs);
            }
            else
            {
                //2 - vervolgens de prijs uit Artikel.ArtVastePrijs
                ARTIKEL art = GetArtikelById(artId);
                prijs = art.ArtVasteprijs;
            }

            return prijs;
        }

        public List<int> getFarmIdsByProgramId(int pProgramId)
        {
            List<int> lst = new List<int>();
            lst.Add(pProgramId);

            return getFarmIdsByProgramId(lst);
        }

        [Obsolete("Gebruik EnumerableToCommaSeperatedString")]
        public string intListToString(List<int> intList)
        {

            return EnumerableToCommaSeperatedString(intList);
            //String str = "";
            //String sKomma = "";

            //foreach (int i in intList)
            //{
            //    str += sKomma + i.ToString();
            //    sKomma = ",";
            //}

            //return str;
        }

        public string stringListToString(List<string> stringList)
        {
            StringBuilder str = new StringBuilder();
            if (stringList.Count() > 0)
            {

                for (int i = 0; i < stringList.Count(); i++)
                {
                    str.Append("'" + stringList[i] + "'");
                    if (i < stringList.Count() - 1)
                    {
                        str.Append(",");
                    }
                }
            }
            return str.ToString(); ;
        }


        [Obsolete("Gebruik EnumerableToCommaSeperatedString")]
        public string intArrToString(int[] intArr)
        {

            return EnumerableToCommaSeperatedString(intArr);
            //String str = "";
            //String sKomma = "";

            //foreach (int i in intArr)
            //{
            //    str += sKomma + i.ToString();
            //    sKomma = ",";
            //}

            //return str;
        }

        public List<int> getFarmIdsByProgramId(List<int> pProgramIdList)
        {
            List<int> returnList = new List<int>();

            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT b.FarmId");
            sb.Append(" FROM agrofactuur.BEDRIJF b");

            if (pProgramIdList.Count == 1)
            {
                sb.Append(" WHERE (b.ProgramId = " + pProgramIdList[0].ToString() + ")");
            }
            else
            {
                String sProgramIds = intListToString(pProgramIdList);
                sb.Append(" WHERE (b.ProgramId IN (" + sProgramIds + "))");
            }

            sb.Append(" AND (b.UbnId>0)");
            sb.Append(" ORDER BY b.FarmId");

            DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            foreach (DataRow drRow in dtResults.Rows)
            {
                returnList.Add(int.Parse(drRow["FarmId"].ToString()));
            }

            return returnList;
        }

        /// <summary>
        /// Let OP, de functie heet GetEMMData maar het is getUnreportedEMMData
        /// </summary>
        /// <param name="ubn"></param>
        /// <param name="progId"></param>
        /// <param name="aniId"></param>
        /// <param name="beginDatum"></param>
        /// <param name="eindDatum"></param>
        /// <returns></returns>
        public IEnumerable<EMMMILK> GetEMMData(UBN ubn, int progId, int aniId, DateTime beginDatum, DateTime eindDatum)
        {
            string sql = string.Format(@"SELECT agrodata.EMMMILK.*
                            FROM agrodata.EMMMILK
                            JOIN agrofactuur.BEDRIJF ON agrodata.EMMMILK.FarmId = agrofactuur.BEDRIJF.FarmId
                            WHERE agrofactuur.BEDRIJF.UBNid = {0}
                            AND agrofactuur.BEDRIJF.ProgId = {1}
                            AND AniId = {2}
                            AND Date(DateMilking) BETWEEN Date('{3}') and Date('{4}') 
                            AND ISNULL(Reportdate) ", ubn.UBNid, progId, aniId, getDatabaseDateDateFormat(beginDatum), getDatabaseDateDateFormat(eindDatum));
            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<EMMMILK>(tbl);
        }

        /// <summary>
        /// Alternatief voor GetEMMData, deze haalt ook reeds gemelde emm records op.
        /// </summary>
        /// <param name="ubn"></param>
        /// <param name="progId"></param>
        /// <param name="aniId"></param>
        /// <param name="beginDatum"></param>
        /// <param name="eindDatum"></param>
        /// <returns></returns>
        public IEnumerable<EMMMILK> GetAllEmmData(UBN ubn, int progId, int aniId, DateTime beginDatum, DateTime eindDatum)
        {
            string sql = string.Format(@"SELECT agrodata.EMMMILK.*
                            FROM agrodata.EMMMILK
                            JOIN agrofactuur.BEDRIJF ON agrodata.EMMMILK.FarmId = agrofactuur.BEDRIJF.FarmId
                            WHERE agrofactuur.BEDRIJF.UBNid = {0}
                            AND agrofactuur.BEDRIJF.ProgId = {1}
                            AND AniId = {2}
                            AND Date(DateMilking) BETWEEN Date('{3}') and Date('{4}')", ubn.UBNid, progId, aniId, getDatabaseDateDateFormat(beginDatum), getDatabaseDateDateFormat(eindDatum));
            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<EMMMILK>(tbl);
        }


        public List<EMMMILK> getEMMdata(UBN UBN, int ProgId, DateTime pBegindatum, DateTime pEindDatum)
        {
            List<EMMMILK> Result = new List<EMMMILK>();

            StringBuilder sb = new StringBuilder();
            sb.Append("       SELECT agrodata.EMMMILK.*");
            sb.Append("       FROM agrodata.EMMMILK");
            sb.Append("       JOIN agrofactuur.BEDRIJF");
            sb.Append("       on  agrodata.EMMMILK.FarmId = agrofactuur.BEDRIJF.FarmId");
            sb.AppendFormat(" WHERE agrofactuur.BEDRIJF.UBNid = {0}", UBN.UBNid);
            sb.AppendFormat(" AND agrofactuur.BEDRIJF.ProgId = {0}", ProgId);
            sb.AppendFormat(" AND Date(DateMilking) BETWEEN Date('{0}') and Date('{1}') ", getDatabaseDateFormat(pBegindatum), getDatabaseDateFormat(pEindDatum));
            sb.Append("       AND ISNULL(Reportdate) ");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new EMMMILK();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;

        }

        [Obsolete("Gebruik de functie met UBN + Progid")]
        public List<EMMMILK> getEMMdata(int pFarmId, DateTime pBegindatum, DateTime pEindDatum)
        {
            List<EMMMILK> Result = new List<EMMMILK>();

            StringBuilder sb = new StringBuilder();
            sb.Append("       SELECT *");
            sb.Append("       FROM agrodata.EMMMILK");
            sb.AppendFormat(" WHERE FarmId = {0}", pFarmId);
            sb.AppendFormat(" AND Date(DateMilking) BETWEEN Date('{0}') and Date('{1}') ", getDatabaseDateFormat(pBegindatum), getDatabaseDateFormat(pEindDatum));
            sb.Append("       AND ISNULL(Reportdate) ");
            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new EMMMILK();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;

        }

        public List<EMMMILK> getEMMdata(int pFarmId, int pAniId, DateTime pBegindatum, DateTime pEindDatum)
        {
            List<EMMMILK> Result = new List<EMMMILK>();

            StringBuilder sb = new StringBuilder();
            sb.Append("       SELECT *");
            sb.Append("       FROM agrodata.EMMMILK");
            sb.AppendFormat(" WHERE FarmId = {0}", pFarmId);
            sb.AppendFormat(" AND AniId = {0}", pAniId);
            sb.AppendFormat(" AND Date(DateMilking) BETWEEN Date('{0}') and Date('{1}') ", getDatabaseDateFormat(pBegindatum), getDatabaseDateFormat(pEindDatum));

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new EMMMILK();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;

        }
        public bool SetEMMReportDate(EMMMILK pEMMMilk)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pEMMMilk);
            String[] Update = new String[]
            {
                "Reportdate"
            };
            String[] keys = {
                                "EMM_ID",
                            };
            String CommandText = mDatabase.CreateUpdateCommandTextDP(pEMMMilk, keys, Update).Replace("EMMMILK", "agrodata.EMMMILK");
            return mDatabase.ModifyObject(mToken.getLastChildConnection(), pEMMMilk, CommandText) == 1;
            //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
        }


        //public REPORT_INFORMATION SaveEventReportDate(EVENT pEvent, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization ReportedToOrganization)
        //{
        //    SOAPLOG tmpsoaplog = new SOAPLOG();
        //    tmpsoaplog.Date = DateTime.Today;
        //    tmpsoaplog.Time = DateTime.Now;
        //    return SaveEventReportDate(pEvent, tmpsoaplog, ReportedToOrganization);
        //}

        public REPORT_INFORMATION SaveEventReportDate(EVENT pEvent, SOAPLOG SoapResult, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization ReportedToOrganization, int changedBy = 0, int sourceId = 0)
        {
            REPORT_INFORMATION lRI = new REPORT_INFORMATION();
            lRI.RI_ReportDate = SoapResult.Date.AddHours(SoapResult.Time.Hour).AddMinutes(SoapResult.Time.Minute).AddSeconds(SoapResult.Time.Second);
            lRI.EventID = pEvent.EventId;
            lRI.Soaplog_ID = SoapResult.Internalnr;
            lRI.RI_To = (int)ReportedToOrganization;
            lRI.Changed_By = changedBy;
            lRI.SourceID = sourceId;
            SaveReportInformation(lRI);
            return lRI;
        }

        public REPORT_INFORMATION SaveEventImportedDate(EVENT pEvent, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization ReceivedFromOrganization, DateTime ImportDateTime, int changedBy = 0, int sourceId = 0)
        {
            REPORT_INFORMATION lRI = new REPORT_INFORMATION();
            lRI.RI_ReportDate = ImportDateTime;
            lRI.EventID = pEvent.EventId;
            lRI.RI_From = (int)ReceivedFromOrganization;
            lRI.RI_To = 0;
            lRI.Changed_By = changedBy;
            lRI.SourceID = sourceId;

            SaveReportInformation(lRI);
            return lRI;
        }

        //public REPORT_INFORMATION SaveEventReportDate(MOVEMENT pMovement, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization ReportedToOrganization)
        //{
        //    SOAPLOG tmpsoaplog = new SOAPLOG();
        //    tmpsoaplog.Date = DateTime.Today;
        //    tmpsoaplog.Time = DateTime.Now;
        //    return SaveEventReportDate(pMovement, tmpsoaplog, ReportedToOrganization);
        //}

        public REPORT_INFORMATION SaveMovementReportDate(MOVEMENT pMovement, SOAPLOG SoapResult, VSM.RUMA.CORE.DB.LABELSConst.ReportOrganization ReportedToOrganization)
        {
            REPORT_INFORMATION lRI = new REPORT_INFORMATION();
            lRI.RI_ReportDate = SoapResult.Date.AddHours(SoapResult.Time.Hour).AddMinutes(SoapResult.Time.Minute).AddSeconds(SoapResult.Time.Second);
            lRI.MovID = pMovement.MovId;
            lRI.Soaplog_ID = SoapResult.Internalnr;
            lRI.RI_To = (int)ReportedToOrganization;

            SaveReportInformation(lRI);
            return lRI;
        }

        public bool SaveReportInformation(REPORT_INFORMATION pReportInfo)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pReportInfo);
            if (!isFilledByDb(pReportInfo))
            {
                if (WriteActions.SaveObject(pReportInfo) < 0) return false;
                return true;
            }
            else
            {
                String[] UpdateParams = new String[]
                    {
                        "RI_ReportDate"
                    };
                String CommandText = mDatabase.CreateUpdateALLCommandText(pReportInfo, UpdateParams);

                return mDatabase.ModifyObject(mToken, pReportInfo, CommandText) == 1;
            }

            //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
            //{
            //    return true;
            //}
            //else return false;

        }
        public List<Int32> getProcesserverComputerMachineIdsWithXmlFields(int FarmId, ulong RumaXmlFields)
        {
            List<Int32> Result = new List<Int32>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT pssrc.pspcmachineId");
            lQuery.Append(" FROM agrofactuur.UBN");
            lQuery.Append(" JOIN agrofactuur.BEDRIJF");
            lQuery.Append(" ON agrofactuur.UBN.UBNid = BEDRIJF.UBNid");
            lQuery.Append(" JOIN agrofactuur.PSC_SETTINGS");
            lQuery.Append(" on agrofactuur.UBN.UBNid = agrofactuur.PSC_SETTINGS.UbnId");
            lQuery.Append(" JOIN agrofactuur.PSC_PCLINK");
            lQuery.Append(" ON agrofactuur.PSC_SETTINGS.psId = agrofactuur.PSC_PCLINK.PsId");
            lQuery.Append(" AND  agrofactuur.PSC_PCLINK.TimerEnabled = 1");
            lQuery.Append(" JOIN agrofactuur.PSC_PROCESCOMPUTER AS pssrc");
            lQuery.Append(" ON agrofactuur.PSC_SETTINGS.psId = pssrc.psId");
            lQuery.Append(" AND agrofactuur.PSC_PCLINK.PsplSrcId = pssrc.pspcId");
            lQuery.AppendFormat(" WHERE  agrofactuur.PSC_PCLINK.PsplXMLFields & {0}  =  {0}", RumaXmlFields);
            lQuery.Append(" AND  pssrc.pspcmachineId > 100199");
            lQuery.AppendFormat(" AND agrofactuur.BEDRIJF.FarmId = '{0}'", FarmId);
            lQuery.Append(" AND  pssrc.pspcmachineId > 100199");
            lQuery.Append(" GROUP BY pssrc.pspcmachineId");
            System.Data.DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in tbl.Rows)
            {
                Result.Add(Convert.ToInt32(dr[0]));
            }
            return Result;
        }

        public List<Int32> getProcesserverComputerMachineIdsWithXmlFieldsByUbnId(int ubnId, ulong RumaXmlFields)
        {
            List<Int32> Result = new List<Int32>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT pssrc.pspcmachineId");
            lQuery.Append(" FROM agrofactuur.UBN");
            lQuery.Append(" JOIN agrofactuur.BEDRIJF");
            lQuery.Append(" ON agrofactuur.UBN.UBNid = BEDRIJF.UBNid");
            lQuery.Append(" JOIN agrofactuur.PSC_SETTINGS");
            lQuery.Append(" on agrofactuur.UBN.UBNid = agrofactuur.PSC_SETTINGS.UbnId");
            lQuery.Append(" JOIN agrofactuur.PSC_PCLINK");
            lQuery.Append(" ON agrofactuur.PSC_SETTINGS.psId = agrofactuur.PSC_PCLINK.PsId");
            lQuery.Append(" AND  agrofactuur.PSC_PCLINK.TimerEnabled = 1");
            lQuery.Append(" JOIN agrofactuur.PSC_PROCESCOMPUTER AS pssrc");
            lQuery.Append(" ON agrofactuur.PSC_SETTINGS.psId = pssrc.psId");
            lQuery.Append(" AND agrofactuur.PSC_PCLINK.PsplSrcId = pssrc.pspcId");
            lQuery.AppendFormat(" WHERE  agrofactuur.PSC_PCLINK.PsplXMLFields & {0}  =  {0}", RumaXmlFields);
            lQuery.Append(" AND  pssrc.pspcmachineId > 100199");
            lQuery.AppendFormat(" AND agrofactuur.UBN.UbnId = '{0}'", ubnId);
            lQuery.Append(" AND  pssrc.pspcmachineId > 100199");
            lQuery.Append(" GROUP BY pssrc.pspcmachineId");
            System.Data.DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in tbl.Rows)
            {
                Result.Add(Convert.ToInt32(dr[0]));
            }
            return Result;
        }

        public IEnumerable<Tuple<int, int>> GetProcesserverComputerMachineIdAndFarmIdWithXmlFieldsByUbnId(int ubnId, ulong rumaXMLFields)
        {
            try
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append("SELECT pssrc.pspcmachineId, BEDRIJF.FarmId");
                lQuery.Append(" FROM agrofactuur.UBN");
                lQuery.Append(" JOIN agrofactuur.BEDRIJF");
                lQuery.Append(" ON agrofactuur.UBN.UBNid = BEDRIJF.UBNid");
                lQuery.Append(" JOIN agrofactuur.PSC_SETTINGS");
                lQuery.Append(" on agrofactuur.UBN.UBNid = agrofactuur.PSC_SETTINGS.UbnId");
                lQuery.Append(" JOIN agrofactuur.PSC_PCLINK");
                lQuery.Append(" ON agrofactuur.PSC_SETTINGS.psId = agrofactuur.PSC_PCLINK.PsId");
                lQuery.Append(" AND  agrofactuur.PSC_PCLINK.TimerEnabled = 1");
                lQuery.Append(" JOIN agrofactuur.PSC_PROCESCOMPUTER AS pssrc");
                lQuery.Append(" ON agrofactuur.PSC_SETTINGS.psId = pssrc.psId");
                lQuery.Append(" AND agrofactuur.PSC_PCLINK.PsplSrcId = pssrc.pspcId");
                lQuery.AppendFormat(" WHERE  agrofactuur.PSC_PCLINK.PsplXMLFields & {0}  =  {0}", rumaXMLFields);
                lQuery.Append(" AND  pssrc.pspcmachineId > 100199");
                lQuery.AppendFormat(" AND agrofactuur.UBN.UbnId = '{0}'", ubnId);
                lQuery.Append(" AND  pssrc.pspcmachineId > 100199");
                lQuery.Append(" GROUP BY pssrc.pspcmachineId");
                System.Data.DataTable tbl = mDatabase.QueryData(mToken, lQuery);

                List<Tuple<int, int>> results = new List<Tuple<int, int>>(tbl.Rows.Count);

                foreach (DataRow dr in tbl.Rows)
                {
                    results.Add(new Tuple<int, int>(Convert.ToInt32(dr[0]), Convert.ToInt32(dr[1])));
                }
                return results;
            }
            catch (Exception ex)
            {
                string msg = $"{nameof(DBMasterQueries)}.{nameof(GetProcesserverComputerMachineIdAndFarmIdWithXmlFieldsByUbnId)} - Ex: {ex.Message}";
                unLogger.WriteError(msg);
                unLogger.WriteDebug(msg, ex);

                return new List<Tuple<int, int>>(0);
            }
        }

        public PSC_SETTINGS getProcesserverSettings(String UserName)
        {
            PSC_SETTINGS lSettings = new PSC_SETTINGS();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_SETTINGS ");
            lQuery.AppendFormat(" WHERE psUserName = {0}", UserName);
            mDatabase.FillObject(mToken, lSettings, lQuery);
            return lSettings;
        }

        public int SaveProcesserverSettings(PSC_SETTINGS pSettings)
        {
            try
            {
                return WriteActions.SaveObject(pSettings);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public List<PSC_PROCESCOMPUTER> getProcesserverComputers(int psId)
        {
            List<PSC_PROCESCOMPUTER> Result = new List<PSC_PROCESCOMPUTER>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_PROCESCOMPUTER ");
            lQuery.AppendFormat(" WHERE psId = {0}", psId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new PSC_PROCESCOMPUTER();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;
        }

        public PSC_PROCESCOMPUTER getProcesserverComputer(int psId, int pspcmachineId)
        {
            PSC_PROCESCOMPUTER Result = new PSC_PROCESCOMPUTER();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_PROCESCOMPUTER ");
            lQuery.AppendFormat(" WHERE psId = {0}", psId);
            lQuery.AppendFormat(" AND pspcmachineId = {0}", pspcmachineId);
            mDatabase.FillObject(mToken, Result, lQuery);
            return Result;
        }

        public PSC_PROCESCOMPUTER getProcesserverComputer(int psId, String pspcType)
        {
            PSC_PROCESCOMPUTER Result = new PSC_PROCESCOMPUTER();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT pspc.* FROM PSC_PROCESCOMPUTER as pspc");
            lQuery.Append(" JOIN PSC_PROCESCOMPUTERTYPE");
            lQuery.Append(" ON pspc.pspcType = PSC_PROCESCOMPUTERTYPE.pspcType");
            lQuery.AppendFormat(" WHERE pspc.psId = {0}", psId);
            lQuery.AppendFormat(" AND PSC_PROCESCOMPUTERTYPE.pspcTypeName = '{0}'", pspcType);
            mDatabase.FillObject(mToken, Result, lQuery);
            return Result;
        }

        public PSC_PROCESCOMPUTER_VALUE getProcesserverComputerValue(int PspcId, string PspcKey)
        {
            PSC_PROCESCOMPUTER_VALUE Result = new PSC_PROCESCOMPUTER_VALUE();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_PROCESCOMPUTER_VALUE ");
            lQuery.AppendFormat(" WHERE PspcId = {0}", PspcId);
            lQuery.AppendFormat(" AND PspcKey = '{0}'", PspcKey);
            mDatabase.FillObject(mToken, Result, lQuery);
            return Result;
        }

        public List<PSC_PROCESCOMPUTER_VALUE> getProcesserverComputerValues(int PspcId)
        {
            List<PSC_PROCESCOMPUTER_VALUE> Result = new List<PSC_PROCESCOMPUTER_VALUE>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_PROCESCOMPUTER_VALUE ");
            lQuery.AppendFormat(" WHERE PspcId = {0}", PspcId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new PSC_PROCESCOMPUTER_VALUE();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;
        }


        public List<PSC_PCLINK> getProcesserverComputerPclinks(int psId)
        {
            List<PSC_PCLINK> Result = new List<PSC_PCLINK>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_PCLINK ");
            lQuery.AppendFormat(" WHERE psId = {0}", psId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new PSC_PCLINK();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;
        }

        public List<PSC_RATIONADVICE> getProcesserverRationAdvice(int psId)
        {
            List<PSC_RATIONADVICE> Result = new List<PSC_RATIONADVICE>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM PSC_RATIONADVICE ");
            lQuery.AppendFormat(" WHERE psId = {0}", psId);
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);
            foreach (DataRow dr in tbl.Rows)
            {
                var lrecord = new PSC_RATIONADVICE();
                if (mDatabase.FillObject(lrecord, dr))
                {
                    Result.Add(lrecord);
                }
            }
            return Result;
        }



        public int SaveProcesserverComputer(PSC_PROCESCOMPUTER pProcescomputer)
        {
            try
            {
                return WriteActions.SaveObject(pProcescomputer);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int SaveProcesserverComputerValue(PSC_PROCESCOMPUTER_VALUE pProcescomputerValue)
        {
            try
            {
                return WriteActions.SaveObject(pProcescomputerValue);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int SaveProcesserverComputerPcLink(PSC_PCLINK pProcescomputerPclink)
        {
            try
            {
                return WriteActions.SaveObject(pProcescomputerPclink);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int SaveProcesserverRationAdvice(PSC_RATIONADVICE pRationAdvice)
        {
            try
            {
                return WriteActions.SaveObject(pRationAdvice);
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public bool DeleteProcesserverComputerPclinks(int psId)
        {
            String qry = String.Format("DELETE FROM agrofactuur.PSC_PCLINK WHERE psId = {0}", psId);
            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = qry;
            //int ret = mDatabase.ExecuteNonQueryCommand(cmd);
            //if (ret == 1)
            //{
            //    return true;
            //}
            //return false;
            return mDatabase.ExecuteNonQuery(mToken, qry) == 1;
        }

        public bool DeleteProcesserverRationAdviceBySettingsId(int psId)
        {
            String qry = String.Format("DELETE FROM agrofactuur.PSC_RATIONADVICE WHERE psId = {0}", psId);
            //DbCommand cmd = mDatabase.CreateCommand(mToken);
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = qry;
            //int ret = mDatabase.ExecuteNonQueryCommand(cmd);
            //if (ret == 1)
            //{
            //    return true;
            //}
            //return false;
            return mDatabase.ExecuteNonQuery(mToken, qry) == 1;
        }

        public TreatmentTimes getTreatmentTimes(DateTime EveDate,
                                                         int DaysTreat, int HoursRepeat,
                                                         int DaysWaitingMeat, int HoursWaitingMeat,
                                                         int DaysWaitingMilk, int HoursWaitingMilk)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)

            TreatmentTimes tt = new TreatmentTimes();
            tt.EveDate = EveDate;

            int i = (DaysTreat * (HoursRepeat / 24));
            tt.dtEnd_Treatment = EveDate.AddDays(i);

            DateTime dtA = tt.dtEnd_Treatment.AddDays(DaysWaitingMeat);
            DateTime dtB = tt.dtEnd_Treatment.AddHours(HoursWaitingMeat);
            tt.dtEnd_WaitingMeat = dtA >= dtB ? dtA : dtB;

            dtA = tt.dtEnd_Treatment.AddDays(DaysWaitingMilk);
            dtB = tt.dtEnd_Treatment.AddHours(HoursWaitingMilk);
            tt.dtEnd_WaitingMilk = dtA >= dtB ? dtA : dtB;

            tt.dtEnd_WaitingTotal = tt.dtEnd_WaitingMeat >= tt.dtEnd_WaitingMilk ? tt.dtEnd_WaitingMeat : tt.dtEnd_WaitingMilk;

            TimeSpan ts = tt.dtEnd_Treatment - tt.EveDate;
            tt.dgn_Treatment = ts.Days;

            ts = tt.dtEnd_WaitingMeat - tt.dtEnd_Treatment;
            tt.dgn_WaitingMeat = ts.Days;

            ts = tt.dtEnd_WaitingMilk - tt.dtEnd_Treatment;
            tt.dgn_WaitingMilk = ts.Days;

            ts = tt.dtEnd_WaitingTotal - tt.dtEnd_Treatment;
            tt.dgn_WaitingTotal = ts.Days;

            return tt;
        }

        public TreatmentTimes getTreatmentTimes(int eventId)
        {
            EVENT e = GetEventdByEventId(eventId);
            TREATMEN t = GetTreatmen(eventId);

            TreatmentTimes tt = getTreatmentTimes(e.EveDate,
                                                  t.TreMedDaysTreat, t.TreMedHoursRepeat,
                                                  t.TreDaysWaitingMeat, t.TreHoursWaitingMeat,
                                                  t.TreDaysWaitingMilk, t.TreHoursWaitingMilk);
            return tt;
        }

        public FILELOG getFileLogById(int Filelog_id)
        {
            FILELOG lFilelog = new FILELOG();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT FILELOG.* FROM FILELOG");
            lQuery.AppendFormat(" WHERE Filelog_id = {0}", Filelog_id);
            mDatabase.FillObject(mToken, lFilelog, lQuery);
            return lFilelog;
        }

        public FILELOG getFileLogByHostnameAndFileName(String Hostname, String filepath)
        {
            FILELOG lFilelog = new FILELOG();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT FILELOG.* FROM FILELOG");
            lQuery.AppendFormat(" WHERE filehost = '{0}'", Hostname);
            lQuery.AppendFormat(" AND filepath = '{0}'", filepath);
            lQuery.Append("  AND retcode = 1");
            mDatabase.FillObject(mToken, lFilelog, lQuery);
            return lFilelog;
        }

        public List<FILELOG> getFileLogsByHostnameAndFileName(String Hostname, String filepath)
        {

            List<FILELOG> lResultList = new List<FILELOG>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT FILELOG.* FROM FILELOG");
            lQuery.AppendFormat(" WHERE filehost = '{0}'", Hostname);
            lQuery.AppendFormat(" AND filepath = '{0}'", filepath);
            lQuery.Append("  AND retcode = 1");
            DataTable tbl = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow dr in tbl.Rows)
            {
                var l = new FILELOG();
                if (mDatabase.FillObject(l, dr))
                {
                    lResultList.Add(l);
                }
            }
            return lResultList;
        }


        public FILELOG_READER getFileLogReaderById(int reader_id)
        {
            FILELOG_READER lFilelogreader = new FILELOG_READER();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT FILELOG_READER.* FROM FILELOG_READER");
            lQuery.AppendFormat(" WHERE Filelog_reader_id = {0}", reader_id);
            mDatabase.FillObject(mToken, lFilelogreader, lQuery);
            return lFilelogreader;
        }

        public FILELOG_READER getFileLogReaderByDLLName(String dllname)
        {
            FILELOG_READER lFilelogreader = new FILELOG_READER();

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT FILELOG_READER.* FROM FILELOG_READER");
            lQuery.AppendFormat(" WHERE Filereader_dll = '{0}'", dllname);
            mDatabase.FillObject(mToken, lFilelogreader, lQuery);
            return lFilelogreader;
        }

        /// <summary>
        /// Returns id or negative in case of error.
        /// </summary>
        /// <param name="pFileLog"></param>
        /// <returns></returns>
        public int saveFileLog(FILELOG pFileLog)
        {
            try
            {
                return WriteActions.SaveObject(pFileLog);

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }

        }

        public DataTable BloedonderzoekAuthorisatie_GetEventData(int pUbnId, int pProgId)
        {
            string database = "agrobase_sheep.";//LET OP DE PUNT
            if (pProgId == 5)
            {
                database = "agrobase_goat.";
            }
            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT DISTINCT b.FarmId, a.AniId, a.AniBirthDate, e.EventId" +
                      ", DATE(e.EveDate) as dtUitslag" +
                      ", DATE(IF(brd.BRD_Date_Sampled IS NULL, e.EveDate, brd.BRD_Date_Sampled)) AS dtMonster" +
                      ", a.AniId, a.AniLifeNumber, a.AniAlternateNumber, bl.BloKind as 'dierZiekteId'" +
                      ", bl.BloAuthorized, bl.BloAuthorizedByThrID, bl.BloAuthorizedDate, bl.BloAuthorizedComment" +
                      ", l1.LabLabel AS soortZiekte, e.EveComment, t.ThrCompanyName as BloAuthorizedBy" +

                      ", brd.BRD_Sendin_ID" +
                      ", IF(POSITION('-' IN BRD_Sendin_ID)>0" +
                            ", SUBSTRING(BRD_Sendin_ID, 1, POSITION('-' IN BRD_Sendin_ID)-1)" +
                            ", BRD_Sendin_ID) as BRD_Sendin_ID_Formatted" +

                      ", brd.BRD_Vet_Name, brd.BRD_Vet_Adres, brd.BRD_Vet_Zipcode" +
                      ", brd.BRD_Vet_City, brd.BRD_Vet_Email, brd.BRD_Cl_Name, brd.BRD_Levnr" +
                      ", brd.BRD_Serl_EAE, brd.BRD_CLA_PP, brd.BRD_CLA_Result, brd.BRD_MV, brd.BRD_SGHSAELISA" +
                      ", brd.BRD_JohnesEIA, brd.BRD_JohnesP, brd.BRD_MVOD_RatoP, brd.BRD_MV_CAEPool, brd.BRD_MV_CAE_IND, brd.BRD_MV_CAE_AGID, brd.BRD_RBPTDUTCH" +
                      ", brd.BRD_SGHSASAGID, brd.BRD_Genotype, brd.BRD_Genotype_Class, brd.BR_File_ID" +

                " FROM " + database + "ANIMAL a" +
                " LEFT JOIN " + database + "ANIMALCATEGORY ac ON (ac.AniId=a.AniId)" +
                " RIGHT JOIN agrofactuur.BEDRIJF b ON (b.FarmId=ac.FarmId)" +
                " RIGHT JOIN " + database + "EVENT e ON (e.AniId=a.AniId)" +
                " LEFT JOIN " + database + "BLOOD bl ON (bl.EventId=e.EventId)" +
                " LEFT JOIN agrofactuur.BLOOD_RESEARCH_DETAIL brd ON (brd.BRD_BloID=bl.BRD_BloID)" +
                " LEFT JOIN agrofactuur.THIRD t ON (t.ThrId=bl.BloAuthorizedByThrID)" +
                " LEFT JOIN agrofactuur.AGRO_LABELS l1 ON (l1.LabKind=133 AND l1.LabID=bl.BloKind" +
                                                     " AND l1.LabProgID=" + pProgId.ToString() + " AND l1.LabProgramID=0 AND l1.LabCountry=0)" +
                " WHERE (b.UbnId=" + pUbnId.ToString() + ")" +
                " AND (e.EveKind=11)" +
                " AND (bl.BloKind < 0)" +
                " AND (a.AniId > 0) AND (e.EventId > 0) AND  IF(bl.BloKind=-8,(e.UbnId=0 OR e.UbnId=b.UbnId),e.UbnId=b.UbnId) " +
                //IF BloKind= scrapie(-8 labkind =133) THEN is er geen UbnId ingevuld daarom mag die 0 zijn ELSE moet ubnId == ubnid zijn
                //dit omdat het dieren moet betreffen die ten tijde op het bedrijf waren
                //
                "  GROUP BY AniID,dtUitslag,dierZiekteID   ORDER BY e.eveDate, a.AniAlternateNumber");
            // " GROUP BY AniID ORDER BY e.eveDate, a.AniAlternateNumber");

            DataTable dt = null;
            try
            {
                if (pUbnId > 0)
                {
                    dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

                    if (pProgId == 3)
                    {
                        DataRow[] scrapiedats = dt.Select(" dierZiekteId=-8 ");
                        if (scrapiedats.Count() > 0)
                        {
                            List<DateTime> aanwezigheden = new List<DateTime>();
                            foreach (DataRow rw in scrapiedats)
                            {
                                DateTime d = getDatumFormat(rw["dtMonster"], "dtMonster");
                                if (d > DateTime.MinValue)
                                {
                                    if (!aanwezigheden.Contains(d.Date))
                                    {
                                        aanwezigheden.Add(d.Date);
                                    }
                                }

                            }
                            List<int> aanwezigedieren = new List<int>();
                            List<BEDRIJF> lBedrijven = getBedrijvenByUBNId(pUbnId);
                            foreach (DateTime d in aanwezigheden)
                            {
                                foreach (BEDRIJF lb in lBedrijven)
                                {
                                    if (lb.ProgId == pProgId)
                                    {
                                        List<int> aanwezigedierenPerDate = rdAanwezigeDieren(lb.FarmId, lb.UBNid, d, 0, 0, pProgId);
                                        aanwezigedieren.AddRange(aanwezigedierenPerDate);

                                    }
                                }
                            }
                            //er kunnen meerdere scrapie datums zijn en dieren die dan wel en dan niet aanwezig zijn
                            //nu moet er op bloedonderzoekauthorisatie.aspx
                            //alleen die dieren met 1 bepaalde datum komen 
                            //wanneer je op een datum monstername klikt(onderste tabbladen ,linkse tab)
                            //want zo moet het werken volgens nico
                            //dus moet het cacheObject telkens aangepast worden bij elke klik
                            foreach (DataRow rw in scrapiedats)
                            {
                                int aniid = int.Parse(rw["AniId"].ToString());


                                if (!aanwezigedieren.Contains(aniid))
                                {

                                    dt.Rows.Remove(rw);
                                }

                            }
                        }
                    }
                    else
                    {
                        if (dt.Rows.Count > 0)
                        {
                            DataRow[] scrapiedats = dt.Select(" NOT dierZiekteId=-8 ");
                            if (scrapiedats.Count() > 0)
                            {
                                dt = scrapiedats.CopyToDataTable();
                            }
                        }
                    }



                }
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            return dt;
        }
        public DateTime getDatumFormat(Object pColumnDateValue, string ColumnName)
        {
            DateTime returnwaarde = DateTime.MinValue;
            if (pColumnDateValue == null || pColumnDateValue.ToString() == "")
            {

                //unLogger.WriteDebug("Event_functions getDatumFormat(Object pColumnDateValue) is NULL of lege Datum betreft: " + ColumnName);

                return returnwaarde;
            }
            try
            {
                MySql.Data.Types.MySqlDateTime datum = (MySql.Data.Types.MySqlDateTime)pColumnDateValue;
                returnwaarde = new DateTime(datum.Year, datum.Month, datum.Day, datum.Hour, datum.Minute, datum.Second);
            }
            catch (Exception exc)
            {
                unLogger.WriteDebug("Event_functions getDatumFormat(Object pColumnDateValue) Unable to convert " + pColumnDateValue.ToString() + " to MySqlDateTime " + ColumnName);
                unLogger.WriteDebug(exc.ToString());

                DateTime.TryParse(pColumnDateValue.ToString(), out returnwaarde);
                if (returnwaarde.CompareTo(DateTime.MinValue) == 0)
                {
                    //unLogger.WriteDebug("Event_functions getDatumFormat(Object pColumnDateValue)  Unable to convert " + pColumnDateValue.ToString() + " to NET DateTime " + ColumnName);
                }
            }
            return returnwaarde;
        }

        [Obsolete("Verplaatst naar TempTable", true)]
        public DataTable BloedonderzoekAuthorisatie_GetBedrijvenMetData(int show, int pProgramId)
        {
            return TempTable.BloedonderzoekAuthorisatie_GetBedrijvenMetData(show, pProgramId);
            //            //verkrijgt bedrijven met bloedauthorisatie-data
            //            //(zodat niet alle bedrijven ingeladen hoeven te worden)

            //            //LET OP: DEZE FUNCTIE MAAKT GEBRUIK VAN temptable_ubnIds
            //            //Zorg dat deze aangemaakt is met functie init_temptable_ubnIds

            //            string database = "agrobase_sheep.";//LET OP DE PUNT
            //            if (pProgramId == 5)
            //            {
            //                database = "agrobase_goat.";
            //            }

            //            string sHaving = "";

            //            switch (show)
            //            {
            //                case 0: //Alle bedrijven met openstaande (nog niet-geauthoriseerde) bloedonderzoeken
            //                    sHaving = " HAVING cntNonAuthorized>0";
            //                    break;
            //                case 1: //Alle bedrijven met verwerkte (geauthoriseerde) bloedonderzoeken
            //                    sHaving = " HAVING cntAuthorized>0";
            //                    break;
            //                case 2: //Alle bedrijven met bloedonderzoeken (zowel geauthoriseerd als niet-geauthoriseerd)
            //                    sHaving = " HAVING cntEvents>0";
            //                    break;
            //            }

            //            StringBuilder sb = new StringBuilder();
            //            sb.Append(
            //                @"SELECT DISTINCT 
            //                     u.UBNid, u.Bedrijfsnummer 
            //                    , b.FarmId, b.ProgramId
            //                    , t.ThrId, t.ThrCompanyName, t.ThrStreet1, t.ThrExt, t.ThrZipCode, t.ThrCity, t.ThrEmail
            //                    , l.LabLabel as prognaam
            //
            //                    , COUNT(e.EventId) as cntEvents
            //                    , COUNT((SELECT EventId FROM " + database + @"BLOOD WHERE EventId=bl.EventId AND (BloAuthorized=0 OR ISNULL(BloAuthorized)) )) as cntNonAuthorized
            //                    , COUNT((SELECT EventId FROM " + database + @"BLOOD WHERE EventId=bl.EventId AND BloAuthorized=1)) as cntAuthorized
            //
            //                    , DATE(MAX(IF(brd.BRD_Date_Sampled IS NULL, e.EveDate, brd.BRD_Date_Sampled))) AS maxDtMonster
            //
            //                    , bz1.bz_StatusID as 'status1', lbz1.LabLabel as 'lab_status1'
            //                    , bz2.bz_StatusID as 'status2', lbz2.LabLabel as 'lab_status2'
            //                    , bz3.bz_StatusID AS 'status3', lbz3.LabLabel AS 'lab_status3' 
            //                    , bz4.bz_StatusID as 'status4', lbz2.LabLabel as 'lab_status4'
            //                    , bz5.bz_StatusID AS 'status5', lbz3.LabLabel AS 'lab_status5' 
            //
            //                 FROM " + database + @"ANIMAL a
            //                 LEFT JOIN " + database + @"ANIMALCATEGORY ac ON (ac.AniId=a.AniId)
            //
            //                 RIGHT JOIN agrofactuur.BEDRIJF b ON (b.FarmId=ac.FarmId )  
            //
            //                 RIGHT JOIN agrofactuur.UBN u ON (u.UbnId=b.UbnId)
            //                 LEFT JOIN agrofactuur.THIRD t ON (t.ThrId=u.ThrID)
            //
            //                 RIGHT JOIN agrofactuur.temptable_ubnIds tmpt ON (tmpt.UbnId=u.UbnId)
            //
            //                 LEFT JOIN agrofactuur.AGRO_LABELS l ON (l.LabKind=9100 AND l.LabProgID=0 AND l.LabProgramID=0 AND l.LabCountry=0 AND l.LabID=b.Programid AND b.Programid>0)
            //
            //                 LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz1 ON (bz1.bz_FarmID=b.FarmId AND bz1.bz_ZiekteID=1
            //                     AND bz1.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz1.bz_ZiekteID))
            //
            //                 LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz2 ON (bz2.bz_FarmID=b.FarmId AND bz2.bz_ZiekteID=2
            //                     AND bz2.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz2.bz_ZiekteID))
            //
            //                  LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz3 ON (bz3.bz_FarmID=b.FarmId AND bz3.bz_ZiekteID=3 
            //                     AND bz3.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz3.bz_ZiekteID)) 
            //
            //                  LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz4 ON (bz4.bz_FarmID=b.FarmId AND bz4.bz_ZiekteID=4 
            //                     AND bz4.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz4.bz_ZiekteID)) 
            //
            //                 LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz5 ON (bz5.bz_FarmID=b.FarmId AND bz5.bz_ZiekteID=5 
            //                     AND bz5.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz5.bz_ZiekteID)) 
            //
            //
            //                 LEFT JOIN agrofactuur.AGRO_LABELS lbz1 ON (lbz1.LabKind=251 AND lbz1.LabProgID=0 AND lbz1.LabProgramID=0 AND lbz1.LabCountry=0 AND lbz1.LabID=bz1.bz_StatusID)
            //                 LEFT JOIN agrofactuur.AGRO_LABELS lbz2 ON (lbz2.LabKind=251 AND lbz2.LabProgID=0 AND lbz2.LabProgramID=0 AND lbz2.LabCountry=0 AND lbz2.LabID=bz2.bz_StatusID)
            //                 LEFT JOIN agrofactuur.AGRO_LABELS lbz3 ON (lbz3.LabKind=251 AND lbz3.LabProgID=0 AND lbz3.LabProgramID=0 AND lbz3.LabCountry=0 AND lbz3.LabID=bz3.bz_StatusID)
            //                 LEFT JOIN agrofactuur.AGRO_LABELS lbz4 ON (lbz4.LabKind=251 AND lbz4.LabProgID=0 AND lbz4.LabProgramID=0 AND lbz4.LabCountry=0 AND lbz4.LabID=bz4.bz_StatusID)
            //                 LEFT JOIN agrofactuur.AGRO_LABELS lbz5 ON (lbz5.LabKind=251 AND lbz5.LabProgID=0 AND lbz5.LabProgramID=0 AND lbz5.LabCountry=0 AND lbz5.LabID=bz5.bz_StatusID)
            //
            //
            //                 RIGHT JOIN " + database + @"EVENT e ON (e.AniId=a.AniId )
            //                 LEFT JOIN " + database + @"BLOOD bl ON (bl.EventId=e.EventId)
            //                 LEFT JOIN agrofactuur.BLOOD_RESEARCH_DETAIL brd ON (brd.BRD_BloID=bl.BRD_BloID)
            //
            //                 WHERE (e.EveKind=11)
            //                 AND (bl.BloKind < 0)
            //                 AND (e.AniId > 0) AND (e.EventId > 0) AND (u.UBNid > 0) 
            //                 AND (NOT b.ProgramId = 100)
            //                 GROUP BY
            //                     u.UBNid, u.Bedrijfsnummer
            //                    , b.FarmId, b.ProgramId
            //                    , t.ThrCompanyName, t.ThrStreet1, t.ThrExt, t.ThrZipCode, t.ThrCity, t.ThrEmail
            //                    , l.LabLabel
            //                    , status1, lab_status1, status2, lab_status2 " +

            //                sHaving +

            //                " ORDER BY u.Bedrijfsnummer");

            //            DataTable dt = null;
            //            try
            //            {
            //                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            //            }
            //            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            //            return dt;
        }
        public DataTable BloedonderzoekAuthorisatie_GetBedrijven(int show, int pProgId)
        {
            //BUG 1938 voor ziekteid 1 en 2 schapen
            //              ziekteid 4 en 5 geiten
            //List<int> pProgramIds = getStamboekenDieMeedoenMetScrapieZiekte().ToList();
            string database = "agrobase_sheep.";//LET OP DE PUNT
            if (pProgId == 5)
            {
                database = "agrobase_goat.";
            }
            StringBuilder sb = new StringBuilder();

            sb.Append(@"SELECT  Distinct(u.UbnId), t.ThrId, t.ThrCompanyName,t.ThrStreet1, t.ThrZipCode, t.ThrCity, t.ThrEmail,u.Bedrijfsnummer, b.Fokkers_nr, bz.bz_ZiekteId, b.ProgramId, b.ProgId, 
            (SELECT MAX(bz2.bz_Datum) as bDatum FROM agrofactuur.BEDRIJF_ZIEKTE bz2 WHERE bz2.bz_FarmId = bz.bz_FarmId AND bz2.bz_ZiekteId = bz.bz_ZiekteId) AS Datum,  
            (SELECT bz3.bz_StatusId FROM agrofactuur.BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS Status , 
            (SELECT bz3.bz_NSFO_Dierziekte_Geldigheid FROM agrofactuur.BEDRIJF_ZIEKTE bz3 WHERE bz3.bz_FarmId = bz.bz_FarmId AND bz3.bz_ZiekteId = bz.bz_ZiekteId AND bz3.bz_Datum = Datum) AS bz_NSFO_Dierziekte_Geldigheid ,
           
             ( SELECT agrofactuur.THIRD.ThrInitials 
            
              FROM agrofactuur.THIRD  
             WHERE agrofactuur.THIRD.ThrId= 
             		(SELECT agrologs.BEDRIJFZIEKTELOG.bzlThrId FROM agrologs.BEDRIJFZIEKTELOG WHERE bzlFarmId=bz.bz_FarmId AND bzlZiekteId=bz.bz_ZiekteID  
             AND DATE_FORMAT(bzlDatum,'%Y-%m-%d')=DATE_FORMAT(Datum,'%Y-%m-%d')  
             AND bzlStatusID=Status  
             ORDER BY bzlLogDateTime DESC LIMIT 1) 
             ) AS ThrInitials 

            FROM agrofactuur.BEDRIJF_ZIEKTE bz  
            LEFT JOIN agrofactuur.BEDRIJF b ON bz.bz_FarmId = b.FarmId 
            LEFT JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId 
            LEFT JOIN agrofactuur.THIRD t ON u.ThrId = t.thrId 
      
            ");

            sb.AppendLine(" WHERE b.FarmId>0 ");
            if (pProgId == 3)
            {
                sb.AppendLine(" AND b.ProgId=3 AND bz.bz_ZiekteId IN (1,2,3) ");
                sb.AppendLine(" AND ProgramId IN (" + intListToString(utils.getNsfoProgramIds()) + ",47,49) ");
            }
            else if (pProgId == 5)
            {
                sb.AppendLine(" AND b.ProgId=5 AND bz.bz_ZiekteId IN (4,5) ");
                sb.AppendLine(" AND ProgramId IN (" + intListToString(utils.getNsfoProgramIds()) + ",47,49) ");
            }
            //sb.Append(" OR b.ProgramId IN (" + intListToString(pProgramIds) + ")) ");

            sb.AppendLine(" AND LENGTH(u.Bedrijfsnummer)>0 AND LENGTH(u.Bedrijfsnaam)>0   GROUP BY UbnId ");// Om niet allerlei rommel in de grid te krijgen
            ////////////////////////////////////
            if (pProgId == 5)
            {
                sb.Append("     UNION ");
                sb.Append(" SELECT Distinct(u.UbnId),t.ThrId,  t.thrCompanyName,t.ThrStreet1, t.thrZipCode, t.thrCity, t.ThrEmail, u.Bedrijfsnummer, b.Fokkers_nr,  0 as bz_ZiekteId, b.ProgramId, b.ProgId,  ");
                sb.Append("  NOW() AS Datum,   ");
                sb.Append("  0 AS Status ,  ");
                sb.Append("  24 AS bz_NSFO_Dierziekte_Geldigheid , ");

                sb.Append("  '' AS ThrInitials ");
                sb.Append("  FROM BEDRIJF b ");
                sb.Append("  LEFT JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId  ");
                sb.Append(" LEFT JOIN agrofactuur.THIRD t ON u.ThrId = t.thrId ");
                sb.Append(" WHERE b.UbnID IN ");
                sb.Append(" ( ");
                sb.Append(" 	SELECT UBN.UBNid FROM UBN ");
                sb.Append(" 	JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid ");
                sb.Append(" 	WHERE BEDRIJF.Programid IN(40,47) ");
                sb.Append(" ) ");
                sb.Append(" AND b.ProgId=5 GROUP BY UbnId ");
                //sb.Append(" AND NOT b.FarmId IN (SELECT DISTINCT(BEDRIJF_ZIEKTE.bz_FarmID) FROM BEDRIJF_ZIEKTE  WHERE BEDRIJF_ZIEKTE.bz_ZiekteID IN" + ZiekteId.ToString() + ") ");

            }
            else if (pProgId == 3)
            {
                sb.Append("     UNION ");// b.FarmId,
                sb.Append(@" SELECT Distinct(u.UbnId), t.ThrId, t.thrCompanyName,t.ThrStreet1, t.thrZipCode, t.thrCity, t.ThrEmail, u.Bedrijfsnummer, b.Fokkers_nr,  0 as bz_ZiekteId, b.ProgramId, b.ProgId,  
                  NOW() AS Datum,   
                  0 AS Status ,  
                  24 AS bz_NSFO_Dierziekte_Geldigheid , 

                  '' AS ThrInitials 
                  FROM BEDRIJF b 
                  RIGHT JOIN agrofactuur.UBN u ON b.UBNid = u.UbnId  AND u.UbnId>0
                 RIGHT JOIN agrofactuur.THIRD t ON u.ThrId = t.thrId 
                 WHERE b.UbnID IN 
                 ( 
                 	SELECT Distinct(UBN.UBNid) FROM UBN 
                 	JOIN BEDRIJF ON BEDRIJF.UBNid=UBN.UBNid 
                 	WHERE BEDRIJF.Programid IN(49) 
                 ) 
                 AND b.ProgId=3 AND b.FarmId>0  
                 AND NOT b.FarmId IN (SELECT DISTINCT(BEDRIJF_ZIEKTE.bz_FarmID) FROM BEDRIJF_ZIEKTE  WHERE BEDRIJF_ZIEKTE.bz_ZiekteID IN (1,2,3,4,5)) 
                 GROUP BY UbnId ");

            }
            ///////////////////////////
            sb.Append("  ORDER BY thrCompanyName, bz_ZiekteId, Datum DESC ");

            DataSet ds = new DataSet();
            DataTable dt = mDatabase.QueryData(mToken, ds, sb, "deelnemers", MissingSchemaAction.Add);
            return dt;
        }
        public DataTable BloedonderzoekAuthorisatie_GetBedrijven2(int show, int pProgramId)
        {
            //verkrijgt bedrijven met bloedauthorisatie-data
            //(zodat niet alle bedrijven ingeladen hoeven te worden)

            //LET OP: DEZE FUNCTIE MAAKT GEBRUIK VAN temptable_ubnIds
            //Zorg dat deze aangemaakt is met functie init_temptable_ubnIds

            string database = "agrobase_sheep.";//LET OP DE PUNT
            if (pProgramId == 5)
            {
                database = "agrobase_goat.";
            }

            string sHaving = "";

            switch (show)
            {
                case 0: //Alle bedrijven met openstaande (nog niet-geauthoriseerde) bloedonderzoeken
                    sHaving = " HAVING cntNonAuthorized>0";
                    break;
                case 1: //Alle bedrijven met verwerkte (geauthoriseerde) bloedonderzoeken
                    sHaving = " HAVING cntAuthorized>0";
                    break;
                case 2: //Alle bedrijven met bloedonderzoeken (zowel geauthoriseerd als niet-geauthoriseerd)
                    sHaving = " HAVING cntEvents>0";
                    break;
            }

            StringBuilder sb = new StringBuilder();
            sb.Append(
                @"SELECT DISTINCT 
                     u.UBNid, u.Bedrijfsnummer 
                    , b.FarmId, b.ProgramId
                    , t.ThrId, t.ThrCompanyName, t.ThrStreet1, t.ThrExt, t.ThrZipCode, t.ThrCity, t.ThrEmail
                    , l.LabLabel as prognaam

                    , COUNT(e.EventId) as cntEvents
                    , COUNT((SELECT EventId FROM " + database + @"BLOOD WHERE EventId=bl.EventId AND (BloAuthorized=0 OR ISNULL(BloAuthorized)) )) as cntNonAuthorized
                    , COUNT((SELECT EventId FROM " + database + @"BLOOD WHERE EventId=bl.EventId AND BloAuthorized=1)) as cntAuthorized

                    , DATE(MAX(IF(brd.BRD_Date_Sampled IS NULL, e.EveDate, brd.BRD_Date_Sampled))) AS maxDtMonster

                    , bz1.bz_StatusID as 'status1', lbz1.LabLabel as 'lab_status1'
                    , bz2.bz_StatusID as 'status2', lbz2.LabLabel as 'lab_status2'
                    , bz3.bz_StatusID AS 'status3', lbz3.LabLabel AS 'lab_status3' 
                    , bz4.bz_StatusID as 'status4', lbz2.LabLabel as 'lab_status4'
                    , bz5.bz_StatusID AS 'status5', lbz3.LabLabel AS 'lab_status5' 

                 FROM agrofactuur.UBN u 
                 RIGHT JOIN agrofactuur.BEDRIJF b ON (b.UbnID=u.UbnID )
                 LEFT JOIN " + database + @"ANIMALCATEGORY ac ON (ac.FarmId=b.FarmID)

                  

                 LEFT JOIN " + database + @"ANIMAL a ON (a.AniId=ac.AniId)
                 LEFT JOIN agrofactuur.THIRD t ON (t.ThrId=u.ThrID)

                 RIGHT JOIN (SELECT b45.UbnID FROM agrofactuur.BEDRIJF b45 WHERE b45.ProgramID IN (24,25,26,27,28,28,30,31,32,33)) tmpt ON (tmpt.UbnId=u.UbnId)

                 LEFT JOIN agrofactuur.AGRO_LABELS l ON (l.LabKind=9100 AND l.LabProgID=0 AND l.LabProgramID=0 AND l.LabCountry=0 AND l.LabID=b.Programid AND b.Programid>0)

                 LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz1 ON (bz1.bz_FarmID=b.FarmId AND bz1.bz_ZiekteID=1
                     AND bz1.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz1.bz_ZiekteID))

                 LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz2 ON (bz2.bz_FarmID=b.FarmId AND bz2.bz_ZiekteID=2
                     AND bz2.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz2.bz_ZiekteID))

                  LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz3 ON (bz3.bz_FarmID=b.FarmId AND bz3.bz_ZiekteID=3 
                     AND bz3.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz3.bz_ZiekteID)) 

                  LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz4 ON (bz4.bz_FarmID=b.FarmId AND bz4.bz_ZiekteID=4 
                     AND bz4.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz4.bz_ZiekteID)) 

                 LEFT JOIN agrofactuur.BEDRIJF_ZIEKTE bz5 ON (bz5.bz_FarmID=b.FarmId AND bz5.bz_ZiekteID=5 
                     AND bz5.bz_Datum = (SELECT MAX(bz_Datum) FROM agrofactuur.BEDRIJF_ZIEKTE WHERE bz_FarmID=b.FarmId AND bz_ZiekteID=bz5.bz_ZiekteID)) 


                 LEFT JOIN agrofactuur.AGRO_LABELS lbz1 ON (lbz1.LabKind=251 AND lbz1.LabProgID=0 AND lbz1.LabProgramID=0 AND lbz1.LabCountry=0 AND lbz1.LabID=bz1.bz_StatusID)
                 LEFT JOIN agrofactuur.AGRO_LABELS lbz2 ON (lbz2.LabKind=251 AND lbz2.LabProgID=0 AND lbz2.LabProgramID=0 AND lbz2.LabCountry=0 AND lbz2.LabID=bz2.bz_StatusID)
                 LEFT JOIN agrofactuur.AGRO_LABELS lbz3 ON (lbz3.LabKind=251 AND lbz3.LabProgID=0 AND lbz3.LabProgramID=0 AND lbz3.LabCountry=0 AND lbz3.LabID=bz3.bz_StatusID)
                 LEFT JOIN agrofactuur.AGRO_LABELS lbz4 ON (lbz4.LabKind=251 AND lbz4.LabProgID=0 AND lbz4.LabProgramID=0 AND lbz4.LabCountry=0 AND lbz4.LabID=bz4.bz_StatusID)
                 LEFT JOIN agrofactuur.AGRO_LABELS lbz5 ON (lbz5.LabKind=251 AND lbz5.LabProgID=0 AND lbz5.LabProgramID=0 AND lbz5.LabCountry=0 AND lbz5.LabID=bz5.bz_StatusID)


                 LEFT JOIN " + database + @"EVENT e ON (e.AniId=a.AniId AND e.EveKind=11)
                 LEFT JOIN " + database + @"BLOOD bl ON (bl.EventId=e.EventId AND bl.BloKind < 0)
                 LEFT JOIN agrofactuur.BLOOD_RESEARCH_DETAIL brd ON (brd.BRD_BloID=bl.BRD_BloID)

              
                 WHERE (e.AniId > 0) AND (e.EventId > 0) AND (u.UBNid > 0) 
                 AND (NOT b.ProgramId = 100)
                 GROUP BY
                    u.UBNid, u.Bedrijfsnummer,
                    b.FarmId, b.ProgramId
                    , t.ThrCompanyName, t.ThrStreet1, t.ThrExt, t.ThrZipCode, t.ThrCity, t.ThrEmail
                    , l.LabLabel
                    , status1, lab_status1, status2, lab_status2 " +
                    sHaving +
                 " ORDER BY u.Bedrijfsnummer");

            DataTable dt = null;
            try
            {
                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            return dt;
        }

        public int BloedonderzoekAuthorisatie_GetDMAantalMonsters(int programId, int ziekteId, int dmSoortId, int aantal)
        {
            int res = 0;

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT DM_Aantal_Monsters" +
                " FROM agrofactuur.DIERZIEKTE_MONSTERNAME" +
                " WHERE ProgramID=" + programId.ToString() +
                " AND ZiekteID=" + ziekteId.ToString() +
                " AND DM_SoortID=" + dmSoortId.ToString() +
                " AND (" + aantal.ToString() + " BETWEEN DM_Van_Aantal AND DM_TotMet_Aantal)");

            DataTable dt = null;
            try
            {
                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            if (dt.Rows.Count == 1)
            {
                int.TryParse(dt.Rows[0]["DM_Aantal_Monsters"].ToString(), out res);
            }

            return res;
        }

        public int BloedonderzoekAuthorisatie_CountDierAanwezig(int farmId, int pUbnId, DateTime datum, int groupId, int mede_eigenaar, int pProgId)
        {
            //Verkrijg eerst de dieren
            string database = "agrobase_sheep.";//LET OP DE PUNT
            if (pProgId == 5)
            {
                database = "agrobase_goat.";
            }

            List<int> aanwezigeDieren = rdAanwezigeDieren(farmId, pUbnId, datum, groupId, mede_eigenaar, pProgId);

            if (aanwezigeDieren == null)
                return 0;

            if (aanwezigeDieren.Count == 0)
            {
                return 0;
            }
            else
            {
                //Voorwaarde, alleen dieren ouder dan 1 jaar.
                int res = 0;

                StringBuilder sb = new StringBuilder();

                //zoals in ophalenLeeftijdLaatsteWorp tellen we de leeftijd met hele jaartallen

                sb.Append(
                    "SELECT COUNT(AniId) as cnt" +
                    " FROM " + database + "ANIMAL" +
                    " WHERE AniId IN (" + intListToString(aanwezigeDieren) + ")" +
                    " AND TIMESTAMPDIFF(YEAR, AniBirthDate, " + MySQL_Datum(datum, 1) + ")");

                //OUD: "((YEAR("+ MySQL_Datum(datum, 1) +") - YEAR(AniBirthDate)) >= 1)" +
                //unLogger.WriteDebug(sb.ToString());
                DataTable dt = null;
                try
                {
                    dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
                }
                catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

                if (dt.Rows.Count == 1)
                    int.TryParse(dt.Rows[0]["cnt"].ToString(), out res);

                return res;
            }
        }

        public DataTable getDataTableAdministraties(int pProgramId, int pProgId, List<BEDRIJF> listBedrijfFromSoap)
        {
            //TODO - DIT IS EEN KOPIE UIT MAIN.ASPX (main.aspx hier naartoe verwijzen). 
            //TODO2 - GEBRUIK QUERY UIT getDataTableBedrijven

            DataTable dt = new DataTable();
            dt.Columns.Add("Bedrijfsnummer");
            dt.Columns.Add("Omschrijving");
            dt.Columns.Add("prognaam");
            dt.Columns.Add("FarmId");
            dt.Columns.Add("ProgramId");
            dt.Columns.Add("Adres");
            dt.Columns.Add("Huisnummer");
            dt.Columns.Add("Postcode");
            dt.Columns.Add("Woonplaats");
            //Trace.Write("DSUBNSelect() getDataTableAdministraties() begin");
            //IEnumerator itr = DSUBNSelect();

            //Trace.Write("getDataTableAdministraties() BEDRIJFListSelect()");
            List<int> ubns = new List<int>();
            foreach (BEDRIJF Record in listBedrijfFromSoap)
            {
                if (!ubns.Contains(Record.UBNid))
                {
                    if (Record.UBNid > 0)
                    {
                        ubns.Add(Record.UBNid);
                    }
                }
            }
            StringBuilder bld = new StringBuilder();
            bld.Append("SELECT UBN.UbnId, UBN.Bedrijfsnummer,THIRD.ThrId ,THIRD.ThrStreet1, THIRD.ThrExt,THIRD.ThrZipCode, THIRD.ThrCity ");
            bld.Append(" FROM UBN INNER JOIN THIRD ON UBN.ThrId = THIRD.ThrId ");
            bld.Append(" WHERE UBN.UbnId IN (" + intListToString(ubns) + ") ");

            DataTable tblUbns = new DataTable();
            if (ubns.Count() > 0)
            {
                tblUbns = GetDataBase().QueryData(mToken, bld);
            }
            //Trace.Write("DSUBNSelect() getDataTableAdministraties() end");
            //List<LABELS> Labels = lMstb.GetLabels(9100, Convert.ToInt32(utils.getLabelsLabcountrycode()));

            List<AGRO_LABELS> Labels = GetAgroLabels(VSM.RUMA.CORE.DB.LABELSConst.labKind.PROGRAMID, Convert.ToInt32(utils.getLabelsLabcountrycode()),
                 pProgramId, pProgId);

            foreach (BEDRIJF Record in listBedrijfFromSoap)
            {
                //BEDRIJF Record = (BEDRIJF)itr.Current;
                //UBN lUBN = lMstb.GetubnById(Record.UBNid);
                //THIRD thr = lMstb.GetThirdByThirId(lUBN.ThrID.ToString());

                string Bedrijfsnummer = "";// lMstb.getBedrijfsnummer(Record.UBNid);

                string Adres = "";
                string Huisnummer = "";
                string Postcode = "";
                string Woonplaats = "";
                if (ubns.Count() > 0)
                {
                    DataRow[] foundRows;
                    foundRows = tblUbns.Select("UbnId = " + Record.UBNid.ToString());
                    if (foundRows.Count() > 0)
                    {
                        Bedrijfsnummer = foundRows.ElementAt(0)["Bedrijfsnummer"].ToString();
                        Adres = foundRows.ElementAt(0)["ThrStreet1"].ToString();
                        Huisnummer = foundRows.ElementAt(0)["ThrExt"].ToString();
                        Postcode = foundRows.ElementAt(0)["ThrZipCode"].ToString();
                        Woonplaats = foundRows.ElementAt(0)["ThrCity"].ToString();
                    }
                }

                var ProgLabel = from CurLabel in Labels
                                where CurLabel.LabID == Convert.ToInt32(Record.Programid)
                                select CurLabel;

                string prognaam = "";
                if (ProgLabel.Count() > 0)
                {
                    prognaam = ProgLabel.First().LabLabel;
                }

                DataRow dr = dt.NewRow();
                dr["Bedrijfsnummer"] = Bedrijfsnummer;// lUBN.Bedrijfsnummer;
                dr["Omschrijving"] = Record.Omschrijving;
                dr["prognaam"] = prognaam;
                dr["FarmId"] = Record.FarmId;
                dr["ProgramId"] = Record.Programid;
                dr["Adres"] = Adres;// thr.ThrStreet1;
                dr["Huisnummer"] = Huisnummer;// thr.ThrExt;
                dr["Postcode"] = Postcode;// thr.ThrZipCode;
                dr["Woonplaats"] = Woonplaats;// thr.ThrCity;

                dt.Rows.Add(dr);
            }
            dt.DefaultView.Sort = "Bedrijfsnummer";
            unLogger.WriteInfo("########### getDataTableAdministraties()");
            return dt;
        }

        public DataTable getForFarmersLaatsteWijzigingen(int pInterval)
        {
            if (pInterval < 1)
            { pInterval = 14; }
            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT COUNT(MOVEMENT.MovID) AS Aantal,MOVEMENT.MovDate AS Datum, ");
            lQuery.Append(" if(MOVEMENT.movkind = 3, 'Dood', if(MOVEMENT.movkind = 2, 'Afvoer', ");
            lQuery.Append(" if(MOVEMENT.movkind = 1, 'Aanvoer', 'onbekend'))) AS Soort, UBN.Bedrijfsnummer ");
            lQuery.Append(" AS UBN, UBN.Bedrijfsnaam FROM agrobase_calf.MOVEMENT ");
            lQuery.Append(" INNER JOIN agrobase_calf.ANIMALCATEGORY ");
            lQuery.Append(" ON ANIMALCATEGORY.aniid = MOVEMENT.aniid ");
            lQuery.Append(" INNER JOIN agrofactuur.BEDRIJF ");
            lQuery.Append(" ON BEDRIJF.FarmId = ANIMALCATEGORY.FarmID ");
            lQuery.Append(" INNER JOIN agrofactuur.UBN ");
            lQuery.Append(" ON UBN.ubnid = BEDRIJF.UBNid ");
            lQuery.Append(" WHERE (MOVEMENT.MovMutationBy = 15 OR MOVEMENT.MovMutationBy = 23) ");
            lQuery.AppendFormat(" AND MOVEMENT.MovDate >=  ADDDATE(CURRENT_DATE, INTERVAL -{0} DAY) ", pInterval);//14
            lQuery.Append(" AND BEDRIJF.programid = 9 ");
            lQuery.Append(" GROUP BY MOVEMENT.MovDate DESC, MOVEMENT.movkind, BEDRIJF.FarmId ");

            return GetDataBase().QueryData(mToken.getLastChildConnection(), lQuery);
        }
        public DataTable getVoerregistratieLaatsteWijzigingen(int pInterval, List<int> pProgramIds)
        {
            if (pInterval < 1)
            { pInterval = 14; }
            StringBuilder lQuery = new StringBuilder();

            lQuery.Append(" SELECT COUNT(MOVEMENT.MovID) AS Aantal,MOVEMENT.MovDate AS Datum, ");
            lQuery.Append(" if(MOVEMENT.movkind = 3, 'Dood', if(MOVEMENT.movkind = 2, 'Afvoer', ");
            lQuery.Append(" if(MOVEMENT.movkind = 1, 'Aanvoer', 'onbekend'))) AS Soort, UBN.Bedrijfsnummer ");
            lQuery.Append(" AS UBN, UBN.Bedrijfsnaam FROM agrobase_calf.MOVEMENT ");
            lQuery.Append(" INNER JOIN agrobase_calf.ANIMALCATEGORY ");
            lQuery.Append(" ON ANIMALCATEGORY.aniid = MOVEMENT.aniid ");
            lQuery.Append(" INNER JOIN agrofactuur.BEDRIJF ");
            lQuery.Append(" ON BEDRIJF.FarmId = ANIMALCATEGORY.FarmID ");
            lQuery.Append(" INNER JOIN agrofactuur.UBN ");
            lQuery.Append(" ON UBN.ubnid = BEDRIJF.UBNid ");
            //lQuery.Append(" WHERE (MOVEMENT.MovMutationBy = 15 OR MOVEMENT.MovMutationBy = 23) ");
            //lQuery.AppendFormat(" AND MOVEMENT.MovDate >=  ADDDATE(CURRENT_DATE, INTERVAL -{0} DAY) ", pInterval);//14
            lQuery.AppendFormat(" WHERE MOVEMENT.MovDate >=  ADDDATE(CURRENT_DATE, INTERVAL -{0} DAY) ", pInterval);//14
            lQuery.Append(" AND BEDRIJF.programid IN (" + intListToString(pProgramIds) + ") ");
            lQuery.Append(" GROUP BY MOVEMENT.MovDate DESC, MOVEMENT.movkind, BEDRIJF.FarmId ");

            return GetDataBase().QueryData(mToken.getLastChildConnection(), lQuery);
        }

        [Obsolete("Verplaatst naar RDBTools")]
        public List<int> getListUbnIdByListProgramId(List<int> listProgramId)
        {
            return RDBTools.getListUbnIdByListProgramId(listProgramId).ToList();

            //StringBuilder sb = new StringBuilder();

            //sb.Append(
            //    "SELECT DISTINCT UbnId" +
            //    " FROM agrofactuur.BEDRIJF" +
            //    " WHERE (ProgramId IN (" + intListToString(listProgramId) + "))" +
            //    " AND (UbnId > 0)");

            //DataTable dt = null;
            //try
            //{
            //    dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            //}
            //catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            //List<int> intList = DataTableColumnToList(dt, "UbnId");
            //return intList;
        }



        [Obsolete("Verplaatst naar RDBTools")]
        public List<int> getListUbnIdOndergeschikten(int pProgramId, List<BEDRIJF> listBedrijfFromSoap)
        {
            return RDBTools.getListUbnIdOndergeschikten(pProgramId, listBedrijfFromSoap);

            ////gebaseerd op Delphi -> rdbtools lst_getUbnIdArr

            ////VERKRIJG LIJST MET BEDRIJVEN BEHORENDE BIJ DE ADMINISTRATOR/GEBRUIKER           
            //// Verkrijgt ubnids op basis van programId of listBedrijf (verkregen vanuit SOAP)

            //List<int> listUbnIds = new List<int>();

            //if (getUbnIdOndergeschiktenType(pProgramId) == 1)
            //{
            //    //admins op basis van programIds;
            //    //bepaal de ubns voor het overzicht met de programIds van de admin            
            //    List<int> listProgramId = getListProgramIdOndergeschikten(pProgramId);
            //    listUbnIds = getListUbnIdByListProgramId(listProgramId);
            //}
            //else
            //{
            //    //admins zonder programIds (bijvoorbeeld Navobi en Vilatca;
            //    //haal de ubns voor het overzicht uit de agrobase soap
            //    foreach (BEDRIJF b in listBedrijfFromSoap)
            //    {
            //        listUbnIds.Add(b.UBNid);
            //    }
            //}

            //return listUbnIds;
        }

        [Obsolete("Verplaatst naar TempTable", true)]
        public int init_temptable_ubnIds(int pProgramId, List<BEDRIJF> listBedrijfFromSoap)
        {
            //Zelfde functie als getListUbnIdOndergeschikten, maar deze zet de resultaten in een MySQL temptable.
            return TempTable.init_temptable_ubnIds(pProgramId, listBedrijfFromSoap);


            //bool table_created = false;
            //bool table_filled = false;

            //DBConnectionToken con = mToken.getLastChildConnection();

            //StringBuilder sql_create = new StringBuilder();

            //sql_create.Append("CREATE TEMPORARY TABLE  IF NOT EXISTS  agrofactuur.temptable_ubnIds (" +
            //       "ubnId INT (11) NOT NULL," +
            //       "PRIMARY KEY(ubnId)" +
            //       ") ENGINE=MEMORY; " +
            //       " SELECT COUNT(ubnId) FROM agrofactuur.temptable_ubnIds; ");

            //try
            //{
            //    /*
            //     Make sure everywhere use same token mToken.getLastChildConnection()
            //     */
            //    unLogger.WriteDebug("init_temptable_ubnIds START");
            //    DataSet se = new DataSet();
            //    DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), se, sql_create, "temptable_ubnIds", MissingSchemaAction.Add);
            //    if (dt.Rows.Count > 0)
            //    {
            //        table_created = true;
            //        if (dt.Rows[0][0] != DBNull.Value && dt.Rows[0][0].ToString() != "")
            //        {
            //            unLogger.WriteDebug("init_temptable_ubnIds dt.Rows.Count:" + dt.Rows.Count.ToString());

            //            if (int.Parse(dt.Rows[0][0].ToString()) > 0)
            //            {
            //                table_filled = true;
            //            }
            //        }
            //    }
            //    unLogger.WriteDebug("init_temptable_ubnIds table_created:" + table_created.ToString() + " table_filled:" + table_filled.ToString());
            //}
            //catch (Exception ex)
            //{
            //    unLogger.WriteError(ex.Message, ex);//We krijgen anders erg veel mail
            //}

            ////EXECUTE QUERY
            //if (table_created)
            //{
            //    if (!table_filled)
            //    {
            //        string sql_fill = string.Empty;

            //        if (getUbnIdOndergeschiktenType(pProgramId) == 1)
            //        {
            //            //admins op basis van programIds;

            //            List<int> listProgramId = getListProgramIdOndergeschikten(pProgramId);

            //            sql_fill =
            //                "INSERT INTO agrofactuur.temptable_ubnIds (" +
            //                    "SELECT DISTINCT UbnId" +
            //                    " FROM agrofactuur.BEDRIJF" +
            //                    " WHERE (ProgramId IN (" + intListToString(listProgramId) + "))" +
            //                    " AND (UbnId > 0)" +
            //                ");";
            //        }
            //        else
            //        {
            //            //admins zonder programIds (bijvoorbeeld Navobi en Vilatca;
            //            //haal de ubns voor het overzicht uit de agrobase soap

            //            List<int> listUbnIds = new List<int>();

            //            foreach (BEDRIJF b in listBedrijfFromSoap)
            //            {
            //                listUbnIds.Add(b.UBNid);
            //            }

            //            sql_fill =
            //                "INSERT INTO agrofactuur.temptable_ubnIds (" +
            //                    "SELECT DISTINCT UbnId" +
            //                    " FROM agrofactuur.BEDRIJF" +
            //                    " WHERE (UbnId IN (" + intListToString(listUbnIds) + "))" +
            //                    " AND (UbnId > 0)" +
            //                ");";
            //        }

            //        try
            //        {
            //            DbCommand cmd = mDatabase.CreateCommand(con);
            //            cmd.CommandText = sql_fill;
            //            int res = mDatabase.ExecuteNonQueryCommand(cmd);
            //            table_filled = true;
            //        }
            //        catch (Exception ex)
            //        {
            //            unLogger.WriteError(ex.Message, ex);
            //        }
            //    }
            //}
            //unLogger.WriteDebug("init_temptable_ubnIds END table_created:" + table_created.ToString() + " table_filled:" + table_filled.ToString());
            //return (((table_created == true) && (table_filled == true)) == true) ? 1 : 0;
        }

        [Obsolete("Verplaatst naar SelectQuery TempTable", true)]
        //TODO verplaatsen naar TempTable
        public int init_temptable_rdAanwezigeDieren(int ubnId, int aniId, DateTime datum, int groupId, int mede_eigenaar, int pProgId)
        {
            return TempTable.init_temptable_rdAanwezigeDieren(ubnId, aniId, datum, groupId, mede_eigenaar, pProgId);

            //bool table_exists = false;
            //bool table_filled = true;

            //DBConnectionToken con = mToken.getLastChildConnection();



            //if (table_exists == false)
            //{
            //    //--------------------------
            //    // Create temptable
            //    //--------------------------

            //    try
            //    {
            //        //unLogger.WriteDebug("before CREATE TEMPORARY TABLE agrofactuur.temptable_rdAanwezigeDieren");

            //        string sql_create =
            //            "CREATE TEMPORARY TABLE  IF NOT EXISTS  agrofactuur.temptable_rdAanwezigeDieren (" +
            //            "aniId INT (11) NOT NULL," +
            //            "PRIMARY KEY(aniId)" +
            //            ") ENGINE=MEMORY;";

            //        System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(con);
            //        cmd.CommandText = sql_create;
            //        //TODO FIXEN TEMPTABLES
            //        int res = mDatabase.ExecuteNonQueryCommand(cmd);
            //        table_exists = true;

            //        try
            //        {
            //            //---------------------------------------------------
            //            // Clear old data (and check if the temptable exists)
            //            //---------------------------------------------------

            //            string sql_clear =
            //                "DELETE FROM agrofactuur.temptable_rdAanwezigeDieren";


            //            cmd.CommandText = sql_clear;
            //            //TODO FIXEN TEMPTABLES
            //            res = mDatabase.ExecuteNonQueryCommand(cmd);
            //            table_exists = true;
            //        }
            //        catch (Exception ex)
            //        {
            //            //Exception means that the table does not exists and needs to be created
            //            //Console.WriteLine(ex.Message);
            //            unLogger.WriteError(ex.ToString());
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        unLogger.WriteError(ex.Message, ex);
            //    }
            //}

            //if (table_exists == true)
            //{
            //    //--------------------------
            //    // Load temptable content
            //    //--------------------------

            //    try
            //    {
            //        List<BEDRIJF> farms = getBedrijvenByUBNId(ubnId);
            //        List<int> aanw = new List<int>();
            //        foreach (BEDRIJF b in farms)
            //        {

            //            if (b.ProgId == pProgId)
            //            {

            //                List<int> aanw2 = rdAanwezigeDieren(b.FarmId, b.UBNid, datum, 0, mede_eigenaar, pProgId);
            //                aanw.AddRange(aanw2);
            //                aanw = aanw.Distinct().ToList();


            //            }
            //        }
            //        StringBuilder bld = new StringBuilder(" INSERT INTO agrofactuur.temptable_rdAanwezigeDieren (aniId) VALUES ");
            //        if (aanw.Count() > 0)
            //        {
            //            for (int i = 0; i < aanw.Count(); i++)
            //            {
            //                if (i == aanw.Count() - 1)
            //                {
            //                    bld.AppendLine("(" + aanw[i].ToString() + ")");
            //                }
            //                else
            //                {
            //                    bld.AppendLine("(" + aanw[i].ToString() + "),");
            //                }
            //            }
            //            System.Data.Common.DbCommand cmd = mDatabase.CreateCommand(con);
            //            cmd.CommandText = bld.ToString();
            //            //TODO FIXEN TEMPTABLES
            //            int res = mDatabase.ExecuteNonQueryCommand(cmd);
            //            table_filled = true;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        unLogger.WriteError(ex.Message, ex);
            //        unLogger.WriteDebug("exception INSERT INTO agrofactuur.temptable_rdAanwezigeDieren");
            //    }
            //}

            //return (table_filled == true) ? 1 : 0;
        }

        public DataTable getDataTableBedrijven(List<int> listUbnId)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT DISTINCT u.UBNid, u.Bedrijfsnummer," +
                    " b.FarmId, b.ProgramId, t.ThrCompanyName," +
                    " t.ThrStreet1 as Adres, t.ThrExt as Huisnummer, t.ThrZipCode as Postcode, t.ThrCity as Woonplaats," +
                    " l.LabLabel as prognaam" +
                " FROM agrofactuur.UBN u" +
                " RIGHT JOIN agrofactuur.BEDRIJF b ON (b.UBNid=u.UBNid)" +
                " LEFT JOIN agrofactuur.THIRD t ON (t.ThrId=u.ThrID)" +
                " LEFT JOIN agrofactuur.AGRO_LABELS l ON (l.LabKind=9100 AND l.LabProgID=0 AND l.LabProgramID=0 AND l.LabCountry=0 AND l.LabID=b.Programid AND b.Programid>0)" +
                " WHERE u.UbnId IN (" + intListToString(listUbnId) + ")" +
                " ORDER BY u.Bedrijfsnummer"
            );

            DataTable dt = null;
            try
            {
                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            return dt;
        }

        private bool animal_check_geworpen(int aniId, DateTime datum)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT COUNT(aniId) AS cnt" +
                " FROM ANIMAL" +
                " WHERE (AniIdMother=" + aniId.ToString() + ")" +
                " AND (AniBirthDate <= " + MySQL_Datum(datum, 1) + ")"
            );

            DataTable dt = null;
            try
            {
                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            int cnt = int.Parse(dt.Rows[0]["cnt"].ToString());
            if (cnt > 0) { return true; } else { return false; }
        }

        private int animal_check_aantMovements(int aniId, DateTime datum)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT COUNT(MovId) AS cnt" +
                " FROM MOVEMENT" +
                " WHERE (AniId=" + aniId.ToString() + ")" +
                " AND (MovDate <= " + MySQL_Datum(datum, 1) + ")"
            );

            DataTable dt = null;
            try
            {
                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            int cnt = int.Parse(dt.Rows[0]["cnt"].ToString());
            return cnt;
        }

        private DateTime animal_getDatumOverleden(int aniId)
        {
            DateTime dtResult = DateTime.MinValue;

            StringBuilder sb = new StringBuilder();
            sb.Append(
                "SELECT m.MovDate" +
                " FROM ANIMAL a" +
                " LEFT JOIN MOVEMENT m ON (m.AniId=a.AniId)" +
                " LEFT JOIN SALE s ON (s.MovId=m.MovId)" +
                " WHERE (a.AniId=" + aniId.ToString() + ")" +
                " AND ((m.MovKind=3) OR (m.MovKind=2 AND (s.SalKind=2 OR s.SalSlaughter=1)))");

            DataTable dt = null;
            try
            {
                dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);

                if (dt.Rows.Count > 0)
                {
                    String s = dt.Rows[0]["MovDate"].ToString();
                    DateTime.TryParse(s, out dtResult);
                }
            }
            catch (Exception exc) { unLogger.WriteDebug(exc.ToString()); }

            return dtResult;
        }

        private int mineraal_bepaalCategory_mestbeleid_2010_2013(int progId, int programId, int aniSex, int geworpen, int verplaatst,
                                                                 DateTime aniBirthDate, DateTime datum)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas)

            //TODO - bij gebruik nog even nalopen!!!

            //bron; Mestbeleid 2010-2013
            //      Tabel 4 - diergebonden normen

            //MINERAAL constanten
            int MND_SCHAPEN_25_KG = 3;
            int DGN_GEITEN_10_KG = 60;

            int category = 0;

            TimeSpan ts = datum - aniBirthDate;
            int leeftijd_dagen = (int)ts.TotalDays;
            int leeftijd_jaren = (int)(leeftijd_dagen / 365);

            //Verschil in maanden berekenen
            System.Globalization.Calendar kalender = System.Threading.Thread.CurrentThread.CurrentCulture.Calendar;

            int leeftijd_maanden = ((((kalender.GetYear(datum)
                                      - kalender.GetYear(aniBirthDate)) * 12)
                                      + kalender.GetMonth(datum))
                                      - kalender.GetMonth(aniBirthDate));

            if ((progId == 1) ||
                (progId == 2) ||
                (progId == 4) ||
                (progId == 6) ||
                (progId == 7) ||
                (progId == 8))
            {
                //------------
                //RUND [10]
                //------------

                if ((progId == 1) || (progId == 4))
                {
                    //RUNDVEE, MELKVEE, ZOOGKOEIEN

                    if ((progId == 1) && (geworpen == 1))
                    {
                        category = 100; //Melk- en kalfkoeien
                    }
                    else if ((progId == 4) && (geworpen == 1))
                    {
                        category = 120; //Weide- en zoogkoeien                    
                    }
                    else
                    {
                        if (leeftijd_jaren < 1)
                        {
                            category = 101; //Jongvee < 1 jaar
                        }
                        else if (leeftijd_jaren >= 1)
                        {
                            if ((aniSex == 1) && (leeftijd_jaren >= 2))
                            {
                                category = 104; //fokstier >= 2 jaar                            
                            }
                            else
                            {
                                category = 102; //Jongvee >= 1 jaar
                            }
                        }
                    }
                }
                else if (progId == 2)
                {
                    //STIEREN, ROODVLEES

                    if (category == 0)
                    {
                        //automatisch (ANIMAL.AniMinasCategory=0)
                        category = 121;
                    }

                    if ((category == 121) || (category == 122))
                    {
                        //oorspronkelijk: "startkalveren voor roodvlees" [121],
                        //na 3 maanden: "roodvleesstieren >3 maanden tot slacht (2 jr)" [122]
                        //na 2 jaar: "fokstieren" [104]

                        if (leeftijd_maanden < 3)
                        {
                            category = 121;
                        }
                        else
                        {
                            category = 122;
                            if (leeftijd_jaren >= 2) { category = 104; } //"fokstieren"
                        }
                    }
                }
                else if (progId == 6)
                {
                    //WITVLEES
                    if (category == 0) { category = 112; } //automatisch
                }
                else if (progId == 7)
                {

                    //ROSEVLEES
                    if (category == 0)
                    {
                        //automatisch
                        category = 117;
                    }
                    else if ((category == 115) || (category == 116))
                    {
                        //Ingesteld via ANIMAL.AniMinasCategory
                        //oorspronkelijk: "startkalveren voor rosevlees" [115],
                        //na 3 maanden: "rosevleeskalveren 3-8 maanden" [116]
                        if (leeftijd_maanden < 3) { category = 115; } else { category = 116; }
                    }
                }
            } //end rundvee
            else if (progId == 3)
            {
                //------------
                //SCHAAP [55]
                //------------

                if (((aniSex == 2) && (geworpen > 0)) ||
                     ((leeftijd_maanden < MND_SCHAPEN_25_KG) && (verplaatst == 0)))
                {
                    category = 550; //fokschapen     
                }
                else
                {
                    category = 552; //overige schapen
                }
            }
            else if (progId == 5)
            {

                //------------
                //GEIT [60]
                //------------

                if (category == 0)
                {
                    //601 = vleesgeiten, wordt niet gebruikt
                    if (((aniSex == 2) && (geworpen > 0)) ||
                         (leeftijd_dagen < DGN_GEITEN_10_KG) ||
                         ((aniSex == 1) && (leeftijd_maanden >= 7)))
                    {
                        category = 600; //melkgeiten
                    }
                    else
                    {
                        category = 602; //overige geiten
                    }
                }
            }

            //============================================================================
            // CUSTOM OVERRIDES (Rietveld)
            //============================================================================

            if ((programId >= 60) && (programId <= 67)) //RIETVELD 
            {
                if (progId == 1)
                {
                    //Rundvee - Melk
                    if ((aniSex == 2) && (leeftijd_jaren >= 3)) { category = 100; }
                }
                else if (progId == 4)
                {
                    //Zoogkoeien
                    if (aniSex == 1)
                    {
                        if (leeftijd_maanden < 3)
                        {
                            category = 121;
                        }
                        else if ((leeftijd_maanden >= 3) && (leeftijd_maanden <= 24))
                        {
                            category = 122;
                        }
                        else if (leeftijd_maanden > 24)
                        {
                            category = 102;
                        }
                    }
                }
                else if (progId == 3)
                {
                    //Schapen
                    if (leeftijd_maanden < 3)
                    {
                        category = 0;
                    }
                    else if ((leeftijd_maanden >= 3) && (leeftijd_jaren < 1))
                    {
                        category = 552;
                    }
                    else if (leeftijd_jaren >= 1)
                    {
                        if (aniSex == 1)
                        {
                            category = 552;
                        }
                        else if (aniSex == 2)
                        {
                            category = 550;
                        }
                        else { category = 550; }
                    }
                }
            } //rietveld

            //----------------------------------------------------------------------------

            return category;
        }

        public int mineraal_bepaalCategory(int progId, int programId, int aniId, int pAniSex, DateTime pAniBirthDate, DateTime datum)
        {
            //*** LET OP! houdt deze up-to-date met Delphi
            //(Z:\prog\DELPHI\RUMAMYSQLDB\rdbtools.pas) 

            //TODO - bij gebruik nog even nalopen!!!

            //--------------------------------------------------
            // Verzamel sleutelkenmerken voor bepalen categorie
            //--------------------------------------------------

            int category = 0;

            //ANIMAL a = GetAnimalById(aniId);

            //ANIMAL.AniMinasCategory, 0=automatisch
            /*
            category = a.AniMinasCategory;

            if (category > 0) 
            {
                return category;
            }
            */

            int geworpen = 0;
            if (pAniSex == 2)
            {
                bool bGeworpen = animal_check_geworpen(aniId, datum);
                if (bGeworpen == true) { geworpen = 1; }
            }

            int verplaatst = 0;
            if (progId == 3)
            {
                int aantMovements = animal_check_aantMovements(aniId, datum);
                if (aantMovements > 0) { verplaatst = 1; }
            }

            //-------------------------------------------------
            // Bepaal minascategorie met de gevonden kenmerken
            //-------------------------------------------------

            //als dier is overleden, dan wordt hij niet meer ouder...
            DateTime datumOverleden = animal_getDatumOverleden(aniId);

            if ((datumOverleden != DateTime.MinValue) && (datumOverleden < datum))
            {
                //dier is overleden voor datum
                datum = datumOverleden;
            }

            category = mineraal_bepaalCategory_mestbeleid_2010_2013(progId, programId, pAniSex, geworpen, verplaatst, pAniBirthDate, datum);
            return category;
        }

        public int mineraal_bepaalCategory(int progId, int programId, int aniSex, int geworpen, int verplaatst, DateTime aniBirthDate, DateTime datum)
        {
            int category = mineraal_bepaalCategory_mestbeleid_2010_2013(progId, programId, aniSex, geworpen, verplaatst, aniBirthDate, datum);
            return category;
        }

        public DataTable getVKIAfvoerByUbn(string ubn)
        {
            StringBuilder sql = new StringBuilder(
                    "SELECT VKIINFO.Internalnr, VerwAfvDatum, COUNT(VKIDIER.aniid) AS aantal" +
                    " FROM VKIINFO" +
                    " INNER JOIN VKIDIER ON VKIINFO.Internalnr = VKIDIER.Internalnr" +
                    " WHERE FarmNumber='" + ubn + "'" +
                    " GROUP BY VKIINFO.internalnr");

            DataTable res = mDatabase.QueryData(mToken.getLastChildConnection(), sql);
            return res;
        }

        private void addBedrijfziekteLogNew(int pThrId, BEDRIJF_ZIEKTE bz)
        {
            try
            {
                String qry = String.Format("INSERT INTO agrologs.BEDRIJFZIEKTELOG (bzlLogDateTime, bzlThrid, bzlAction, bzlFarmid, bzlZiekteId, bzlStatusId, bzlDatum,Bz_Comment,Bz_NSFO_Dierziekte,Bz_NSFO_Dierziekte_Geldigheid) VALUES (now(), {0}, 0, {1}, {2}, {3}, {4},'{5}',{6},{7})", pThrId, bz.Bz_FarmID, bz.Bz_ZiekteID, bz.Bz_StatusID, MySQL_Datum(bz.Bz_Datum, 0), bz.Bz_Comment.Replace("'", ""), bz.Bz_NSFO_Dierziekte, bz.Bz_NSFO_Dierziekte_Geldigheid);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                if (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) != 1)
                {
                    unLogger.WriteError(String.Format("addBedrijfziekteLogNew ERROR: thrid {0} FarmId {1} ziekteId {2} statusId {3} Datum {4}", pThrId, bz.Bz_FarmID, bz.Bz_ZiekteID, bz.Bz_StatusID, bz.Bz_Datum));
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(String.Format("addBedrijfziekteLogNew DB ERROR: thrid {0} FarmId {1} ziekteId {2} statusId {3} Datum {4}", pThrId, bz.Bz_FarmID, bz.Bz_ZiekteID, bz.Bz_StatusID, bz.Bz_Datum));
                unLogger.WriteDebug("addBedrijfziekteLogNew DB ERROR:" + ex.Message, ex);
            }
        }

        private void addBedrijfziekteLogDelete(int pThrId, BEDRIJF_ZIEKTE bz)
        {
            try
            {
                String qry = String.Format("INSERT INTO agrologs.BEDRIJFZIEKTELOG (bzlLogDateTime, bzlThrid, bzlAction, bzlFarmid, bzlZiekteId, bzlStatusId, bzlDatum,Bz_Comment,Bz_NSFO_Dierziekte,Bz_NSFO_Dierziekte_Geldigheid) VALUES (now(), {0}, 1, {1}, {2}, {3}, {4},'{5}',{6},{7})", pThrId, bz.Bz_FarmID, bz.Bz_ZiekteID, bz.Bz_StatusID, MySQL_Datum(bz.Bz_Datum, 0), bz.Bz_Comment.Replace("'", ""), bz.Bz_NSFO_Dierziekte, bz.Bz_NSFO_Dierziekte_Geldigheid);
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                if (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) != 1)
                {
                    unLogger.WriteError(String.Format("addBedrijfziekteLogDelete ERROR: thrid {0} FarmId {1} ziekteId {2} statusId {3} Datum {4}", pThrId, bz.Bz_FarmID, bz.Bz_ZiekteID, bz.Bz_StatusID, bz.Bz_Datum));
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(String.Format("addBedrijfziekteLogDelete DB ERROR: thrid {0} FarmId {1} ziekteId {2} statusId {3} Datum {4}", pThrId, bz.Bz_FarmID, bz.Bz_ZiekteID, bz.Bz_StatusID, bz.Bz_Datum));
                unLogger.WriteDebug("addBedrijfziekteLogDelete DB ERROR:" + ex.Message, ex);

            }
        }

        private int getProgIdByDBName(string dbName)
        {
            switch (dbName)
            {
                case "agrobase":
                    return 1;
                case "agrobase_sheep":
                    return 3;
                case "agrobase_goat":
                    return 5;
                case "agrobase_calf":
                    return 6;
                case "agrobase_dog":
                    return 25;
                default:
                    return 0;
            }
        }

        #region DIERZIEKTE

        private DIER_ZIEKTE getDierziekte(int pDzId, int pProgID)
        {
            DIER_ZIEKTE bz = new DIER_ZIEKTE();
            string database = "";
            if (pProgID == 5)
            {
                database = "agrobase_goat.";
            }
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT *");
            lQuery.Append(" FROM " + database + "DIER_ZIEKTE");
            lQuery.AppendFormat(" WHERE dz_ID = {0}", pDzId);
            bool hasresults = mDatabase.FillObject(mToken.getLastChildConnection(), bz, lQuery);
            return bz;
        }

        public bool addDierziekte(int pThrId, DIER_ZIEKTE dz, int pProgID)
        {

            if (dz.Dz_Datum < new DateTime(1800, 1, 1))
                dz.Dz_Datum = new DateTime(1900, 1, 1);

            string database = "";
            if (pProgID == 5)
            {
                database = "agrobase_goat.";
            }
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append("SELECT * FROM  " + database + "DIER_ZIEKTE ");
            lQuery.AppendFormat(" WHERE dz_AniId = {0}", dz.Dz_AniId);
            lQuery.AppendFormat(" AND dz_ZiekteId = {0}", dz.Dz_ZiekteId);
            lQuery.Append(" AND  date_format(dz_Datum,'%Y-%m-%d')= " + MySQL_Datum(dz.Dz_Datum, 1) + " ");

            DIER_ZIEKTE lBtemp = new DIER_ZIEKTE();
            mDatabase.FillObject(mToken.getLastChildConnection(), lBtemp, lQuery);

            if (!isFilledByDb(lBtemp))
            {


                // DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), dz);
                string CommandText = mDatabase.CreateInsertCommandText(dz);
                if (pProgID == 5)
                {
                    CommandText = CommandText.Replace("DIER_ZIEKTE", "agrobase_goat.DIER_ZIEKTE");
                }
                if (mDatabase.ModifyObject(mToken.getLastChildConnection(), dz, CommandText) == 1)
                {
                    addDierziekteLogNew(pThrId, dz);
                    return true;
                }
            }
            return false;
        }

        public bool deleteDierziekte(int pThrId, int pDz_Id, int pProgID)
        {
            DIER_ZIEKTE dz = getDierziekte(pDz_Id, pProgID);
            string database = "";
            if (pProgID == 5)
            {
                database = "agrobase_goat.";
            }
            String qry = String.Format("DELETE FROM " + database + "DIER_ZIEKTE WHERE dz_ID = {0}", pDz_Id);
            //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
            //cmd.CommandType = System.Data.CommandType.Text;
            //cmd.CommandText = qry;

            //int ret = mDatabase.ExecuteNonQueryCommand(cmd);
            int ret = mDatabase.ExecuteNonQuery(mToken, qry);
            if (ret == 1)
            {
                addDierziekteLogDelete(pThrId, dz);
                return true;
            }
            return false;
        }


        private void addDierziekteLogNew(int pThrId, DIER_ZIEKTE dz)
        {
            int ProgId = getProgIdByDBName(mToken.getLastChildConnection().getDBNameSlave());

            try
            {
                String qry = String.Format("INSERT INTO agrologs.DIERZIEKTELOG (dzlProgId, dzlLogDateTime, dzlThrid, dzlAction, dzlAniId, dzlZiekteId, dzlStatusId, dzlDatum) VALUES ({0}, now(), {1}, 1, {2}, {3}, {4}, {5})", ProgId, pThrId, dz.Dz_AniId, dz.Dz_ZiekteId, dz.Dz_StatusId, MySQL_Datum(dz.Dz_Datum, 0));
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                if (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) != 1)
                {
                    unLogger.WriteError(String.Format("addDierziekteLogDelete ERROR: thrid {0} ProgId {1} AniId {2} ziekteId {3} statusId {4} Datum {5}", pThrId, ProgId, dz.Dz_AniId, dz.Dz_ZiekteId, dz.Dz_StatusId, dz.Dz_Datum));
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(String.Format("addDierziekteLogNew DB ERROR: thrid {0} ProgId {1} AniId {2} ziekteId {3} statusId {4} Datum {5}", pThrId, ProgId, dz.Dz_AniId, dz.Dz_ZiekteId, dz.Dz_StatusId, dz.Dz_Datum));
                unLogger.WriteDebug("addDierziekteLogNew DB ERROR:" + ex.Message, ex);
            }
        }

        private void addDierziekteLogDelete(int pThrId, DIER_ZIEKTE dz)
        {
            int ProgId = getProgIdByDBName(mToken.getLastChildConnection().getDBNameSlave());

            try
            {
                String qry = String.Format("INSERT INTO agrologs.DIERZIEKTELOG (dzlProgId, dzlLogDateTime, dzlThrid, dzlAction, dzlAniId, dzlZiekteId, dzlStatusId, dzlDatum) VALUES ({0}, now(), {1}, 0, {2}, {3}, {4}, {5})", ProgId, pThrId, dz.Dz_AniId, dz.Dz_ZiekteId, dz.Dz_StatusId, MySQL_Datum(dz.Dz_Datum, 0));
                //DbCommand cmd = mDatabase.CreateCommand(mToken.getLastChildConnection());
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                if (mDatabase.ExecuteNonQuery(mToken.getLastChildConnection(), qry) != 1)
                {
                    unLogger.WriteError(String.Format("addDierziekteLogDelete ERROR: thrid {0} ProgId {1} AniId {2} ziekteId {3} statusId {4} Datum {5}", pThrId, ProgId, dz.Dz_AniId, dz.Dz_ZiekteId, dz.Dz_StatusId, dz.Dz_Datum));
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(String.Format("addDierziekteLogDelete DB ERROR: thrid {0} ProgId {1} AniId {2} ziekteId {3} statusId {4} Datum {5}", pThrId, ProgId, dz.Dz_AniId, dz.Dz_ZiekteId, dz.Dz_StatusId, dz.Dz_Datum));
                unLogger.WriteDebug("addDierziekteLogDelete DB ERROR:" + ex.Message, ex);
            }
        }

        #endregion



        public MEDLEVLOG GetMedlevlog(int mlId)
        {
            MEDLEVLOG ml = new MEDLEVLOG();
            StringBuilder sb = new StringBuilder("SELECT * FROM agrologs.MEDLEVLOG WHERE mlId=" + mlId.ToString());
            mDatabase.FillObject(mToken, ml, sb);
            return ml;
        }

        public MEDLEVLOG_DETAIL GetMedlevlog_Detail(int mldId)
        {
            MEDLEVLOG_DETAIL mld = new MEDLEVLOG_DETAIL();
            StringBuilder sb = new StringBuilder("SELECT * FROM agrologs.MEDLEVLOG_DETAIL WHERE mldId=" + mldId.ToString());
            mDatabase.FillObject(mToken, mld, sb);
            return mld;
        }

        public int SaveMedlevlog(MEDLEVLOG pMedlevlog)
        {
            try
            {
             
                String qry = $@"INSERT INTO agrologs.MEDLEVLOG (mlDtBegin,  mlResult, mlType, mlURL) 
                    VALUES ({MySQL_Datum(pMedlevlog.mlDtBegin, 0)} ,
                              {pMedlevlog.mlResult},{pMedlevlog.mlType},
                            '{pMedlevlog.mlURL}')";
                if (pMedlevlog.mlId > 0)
                {
                    qry = $@"   UPDATE agrologs.MEDLEVLOG ml
                                SET  ml.mlDtEnd =  {MySQL_Datum(pMedlevlog.mlDtEnd, 0)} ,
                                ml.mlResult = {pMedlevlog.mlResult},
                                ml.mlMemo = '{pMedlevlog.mlMemo}'  
                                WHERE ml.mlId={pMedlevlog.mlId} ";
                }

                if (mDatabase.ExecuteNonQuery(mToken, qry) != 1)
                {
                    unLogger.WriteError($@"InsertMedlevlog   Error:");
                    return -1;
                }
                else
                {
                    qry = $@" SELECT MAX(mlId) FROM agrologs.MEDLEVLOG ";
                    DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(qry));
                    try
                    {
                        return Convert.ToInt32(tbl.Rows[0][0]);
                    }
                    catch (Exception ex)
                    {
                        unLogger.WriteError($@" Medlevlog get max id   Error:" + ex.ToString());
                        return -1;
                    }
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError($@"InsertMedlevlog   Error:" + ex.ToString());
                return -1;
            }
         
        }

        public int SaveMedlevlog_Detail(MEDLEVLOG_DETAIL pMedlevlog_Detail)
        {
            try
            {
            

                String qry = $@"INSERT INTO agrologs.MEDLEVLOG_DETAIL (mlId, mldIdfield_id, mldIdfield_value,
                                mldError, mldMemo) 
                    VALUES ({pMedlevlog_Detail.mlId} ,{pMedlevlog_Detail.mldIdfield_id}
                             , {pMedlevlog_Detail.mldIdfield_value},{pMedlevlog_Detail.mldError},
                            '{pMedlevlog_Detail.mldMemo}')";
               

                if (mDatabase.ExecuteNonQuery(mToken, qry) != 1)
                {
                    unLogger.WriteError($@"SaveMedlevlog_Detail Insert   Error:");
                    return 0;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError($@"SaveMedlevlog_Detail Insert  Error:" + ex.ToString());
                return -1;
            }
            return 1;
        }

        //public int saveReportLog( int pRl_FarmId, int pRl_Ubnid, int pRl_Reportid, int pRl_State)
        //{

        //}

        public bool LOG_AgrologsLog(string pLogName, string pLogLevel, string pIP_Adress, string pThreadName
            , string pAgroUser, int pFarmID, int pUbnID, int pThirdID, int pLogCode, string pLogDescription, string pModule
            , string pFunctionCall, string pHTTP_Requesttype, string pPage, string pagrobase_versie, string pServerIP
            , string pMessage, string pStackTrace)
        {
            try
            {
                String qry = String.Format("INSERT INTO agrologs.log (LogName, LogLevel, LogTime, IP_Adress,ThreadName  " +
                    ", AgroUser, FarmID, UbnID, ThirdID, LogCode, LogDescription, Module " +
                    ", FunctionCall, HTTP_Requesttype, Page, agrobase_versie, ServerIP " +
                    ", Message, StackTrace ) " +
                    " VALUES ('{0}', '{1}', now(),  '{2}', '{3}', '{4}', {5},  {6}, {7}, {8}, '{9}',  '{10}', '{11}', '{12}', '{13}',  '{14}', '{15}', '{16}', '{17}' )"
                    , pLogName, pLogLevel, pIP_Adress, pThreadName
                    , pAgroUser, pFarmID, pUbnID, pThirdID, pLogCode, pLogDescription, pModule
                    , pFunctionCall, pHTTP_Requesttype, pPage, pagrobase_versie, pServerIP
                    , pMessage, pStackTrace);
                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = qry;

                //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1)
                if (mDatabase.ExecuteNonQuery(mToken, qry) != 1)
                {
                    unLogger.WriteError("saveAgrologsLogs(" + pLogName + "," + pLogLevel + "," + pIP_Adress + "," + pThreadName
                         + "," + pAgroUser + "," + pFarmID.ToString() + "," + pUbnID.ToString() + "," + pThirdID.ToString() + "," + pLogCode.ToString() + "," + pLogDescription + "," + pModule
                         + "," + pFunctionCall + "," + pHTTP_Requesttype + "," + pPage + "," + pagrobase_versie + "," + pServerIP
                         + "," + pMessage + "," + pStackTrace);
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.ToString());
            }
            return true;
        }
        public DataTable ucLijstenBullKeuze_loadDataGvBulls(int farmId)
        {
            StringBuilder sb = new StringBuilder(
                "SELECT DISTINCT a.AniId, a.AniLifeNumber, a.AniName" +
                    " , IF((a.AniSex=1) AND NOT (a.BullAiNumber='' OR ISNULL(a.BullAiNumber)), a.BullAiNumber, ac.AniWorknumber) as worknr" +
                " FROM ANIMAL a" +
                " LEFT JOIN ANIMALCATEGORY ac ON ac.AniId=a.AniId" +
                " RIGHT JOIN BULLUBN bu ON bu.BullId=ac.AniId AND bu.FarmId=ac.FarmId" +
                " WHERE ac.FarmId=" + farmId.ToString() +
                " AND a.AniSex=1" +
                " AND a.AniId>0" +
                " ORDER BY worknr, a.AniLifeNumber, a.AniName");

            DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb);
            //dt.PrimaryKey = new DataColumn[]{ dt.Columns["AniId"] };
            return dt;
        }

        public DataTable getDrachtcontrolesForAniIDsByDate(string pSeperatedAniIDs, int pUBNId, int pFarmId, DateTime pDate)
        {
            StringBuilder sb = new StringBuilder(
            "SELECT a.AniId, anicat.AniWorknumber, a.AniLifeNumber, a.AniName, e.EveDate, e.EventId, g.GesStatus, e.RemId, t.ThrId, t.ThrCompanyName" +
            " FROM EVENT e" +
            " JOIN ANIMAL a ON (a.AniId = e.AniId)" +
            " JOIN  ANIMALCATEGORY anicat ON (anicat.AniId = a.AniId)" +
            " JOIN GESTATIO g ON (g.EventId = e.EventId)" +
            " LEFT JOIN agrofactuur.THIRD t ON (t.ThrId = e.ThirdId)" +
            " WHERE e.EveKind='3'" +
            " AND e.UBNId='" + pUBNId + "'" +
            " AND e.EventId>'0'" +
            " AND anicat.Anicategory IN (1,2,3,4)" +
            " AND anicat.FarmId='" + pFarmId.ToString() + "'" +
            " AND a.AniId IN (" + pSeperatedAniIDs + ")" +
            " AND e.EveDate=" + MySQL_Datum(pDate, 1)
            );
            DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            return dt;
        }
        #region TILES

        /*
         in de tabellen staat programid maar er word  bedoeld ProgId ()
         */
        public DataTable getAvailableTiles(int pProgId, int pFarmId)
        {
            StringBuilder sb = new StringBuilder(
                "SELECT tSet.*" +
                " FROM agrofactuur.TILES_SETTINGS tSet" +
                " WHERE tSet.TileSet_Inhoud NOT in (SELECT tls.TileSet_Inhoud" +
                                                  " FROM agrofactuur.TILES tls" +
                                                  " WHERE tls.ThrFarmId='" + pFarmId + "')" +
                " AND tSet.TileSet_ProgramId='" + pProgId + "' ORDER BY tSet.TileSet_Title");
            DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            return dt;
        }

        public DataTable getSelectedTiles(int pFarmId, int pProgId)
        {
            StringBuilder sb = new StringBuilder(
                "SELECT tDet.*, tls.* ,TILES_SETTINGS.TileSet_Title " +
                " FROM TILES tls" +
                " INNER JOIN TILES_DETAIL tDet ON (tDet.Tile_Id = tls.Tile_Id)" +
                " INNER JOIN TILES_SETTINGS ON ( TILES_SETTINGS.TileSet_Inhoud = tls.TileSet_Inhoud AND TILES_SETTINGS.TileSet_ProgramId=" + pProgId.ToString() + " ) " +
                " WHERE tls.ThrFarmId=" + pFarmId.ToString() +
                " ORDER BY TILES_SETTINGS.TileSet_Title ");
            DataTable dt = mDatabase.QueryData(mToken, sb, MissingSchemaAction.Add);
            return dt;
        }

        public DataTable getWeergaveMogelijkhedenForTile(int pProgId, int pInhoud)
        {
            StringBuilder sb = new StringBuilder(
                "SELECT tSet.TileSet_Weergave1, tSet.TileSet_Weergave2, tSet.TileSet_Weergave3, tSet.TileSet_Weergave4" +
                " FROM agrofactuur.TILES_SETTINGS tSet" +
                " WHERE tSet.TileSet_ProgramId='" + pProgId + "'" +
                " AND tSet.TileSet_Inhoud='" + pInhoud + "'"
                );
            DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), sb, MissingSchemaAction.Add);
            return dt;
        }

        public bool saveTile(TILES pTile)
        {
            try
            {
                if (WriteActions.SaveObject(pTile) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveTile", ex);
                return false;
            }
        }

        public bool updateTile(TILES pTile)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pTile);
            String[] UpdateParams = new String[]
            {
                "ThrFarmId",
                "TileIndex",
                "TileSet_Inhoud",
            };
            string CommandText = mDatabase.CreateUpdateCommandText(pTile, "Tile_Id", UpdateParams);
            return mDatabase.ModifyObject(mToken, pTile, CommandText) == 1;
            //if (mDatabase.ExecuteNonQueryCommand(cmd) != 1) return false;
            //return true;
        }

        public bool deleteTile(TILES pTile)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pTile);
            String[] DeleteParams = new String[]
             {
                 "Tile_Id"
             };
            string CommandText = mDatabase.CreateDeleteCommandText(pTile, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken, pTile, CommandText) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool saveTileDetail(TILES_DETAIL pTileDetail)
        {
            try
            {
                if (WriteActions.SaveObject(pTileDetail) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteDebug("SaveTileDetail", ex);
                return false;
            }
        }

        public bool deleteTileDetail(TILES_DETAIL pTileDetail)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pTileDetail);
            String[] DeleteParams = new String[]
             {
                 "TileD_Id"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pTileDetail, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pTileDetail, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public TILES GetTileByTileId(int pTile_Id)
        {
            TILES lTile = new TILES();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT * FROM agrofactuur.TILES");
            lQuery.AppendFormat(" WHERE Tile_Id = {0}", pTile_Id);
            mDatabase.FillObject(mToken, lTile, lQuery);
            return lTile;
        }

        public List<TILES> GetListChoosenTilesByFarmId(int pFarmID)
        {
            List<TILES> lResult = new List<TILES>();
            if (pFarmID > 0)
            {
                StringBuilder sb = new StringBuilder(
                    "SELECT tiles.* FROM agrofactuur.TILES tiles WHERE tiles.ThrFarmId=" + pFarmID.ToString()
                    );
                DataTable dtTiles = mDatabase.QueryData(mToken, sb);

                foreach (DataRow drTile in dtTiles.Rows)
                {
                    TILES lTile = new TILES();
                    if (mDatabase.FillObject(lTile, drTile))
                    {
                        lResult.Add(lTile);
                    }
                }
            }
            return lResult;
        }

        public TILES_DETAIL GetTileDetailByTileId(int pTile_Id)
        {
            TILES_DETAIL tileDetail = new TILES_DETAIL();
            StringBuilder sb = new StringBuilder();
            sb.Append(" SELECT * FROM agrofactuur.TILES_DETAIL");
            sb.AppendFormat(" WHERE Tile_Id = {0}", pTile_Id);
            mDatabase.FillObject(mToken, tileDetail, sb);
            return tileDetail;
        }

        public TILES_SETTINGS GetTileSettingsByTileTitleProgId(string pTitle, int pProgId)
        {
            TILES_SETTINGS tileSettings = new TILES_SETTINGS();
            StringBuilder sb = new StringBuilder();
            sb.Append(" SELECT * FROM agrofactuur.TILES_SETTINGS");
            sb.AppendFormat(" WHERE TileSet_Title = {0} AND ProgramId = {1}", pTitle, pProgId);
            mDatabase.FillObject(mToken, tileSettings, sb);
            return tileSettings;
        }

        public TILES_SETTINGS getTileSettingsByInhoudProgId(int pTileInhoud, int pProgId)
        {
            TILES_SETTINGS lTileSettings = new TILES_SETTINGS();
            StringBuilder sb = new StringBuilder();
            sb.Append(" SELECT * FROM agrofactuur.TILES_SETTINGS");
            sb.AppendFormat(" WHERE TileSet_ProgramId = {0} AND TileSet_Inhoud = {1}", pProgId, pTileInhoud);
            mDatabase.FillObject(mToken, lTileSettings, sb);
            return lTileSettings;
        }

        public List<TILES_SETTINGS> GetListTileSettingsByProgID(int pProgId)
        {
            List<TILES_SETTINGS> lResult = new List<TILES_SETTINGS>();
            if (pProgId > 0)
            {
                StringBuilder sb = new StringBuilder(
                    "SELECT tileset.* FROM agrofactuur.TILES_SETTINGS tileset WHERE tileset.TileSet_ProgramId=" + pProgId.ToString()
                    );
                DataTable dtTiles = mDatabase.QueryData(mToken, sb);

                foreach (DataRow drTiles in dtTiles.Rows)
                {
                    TILES_SETTINGS lTileSet = new TILES_SETTINGS();
                    if (mDatabase.FillObject(lTileSet, drTiles))
                    {
                        lResult.Add(lTileSet);
                    }
                }
            }
            return lResult;
        }

        public TILES_SETTINGS_DETAIL getTileSettingsDetailByInhoudProgIdWeergave(int pTileInhoud, int pProgId, int pWeergave)
        {
            TILES_SETTINGS_DETAIL tsetDetail = new TILES_SETTINGS_DETAIL();
            StringBuilder sb = new StringBuilder();
            sb.Append(" SELECT * FROM agrofactuur.TILES_SETTINGS_DETAIL");
            sb.AppendFormat(" WHERE TileSet_Inhoud = {0} AND TileSet_ProgramID = {1} AND TileSet_Weergave = {2} ", pTileInhoud, pProgId, pWeergave);
            mDatabase.FillObject(mToken, tsetDetail, sb);
            return tsetDetail;
        }

        public List<TILES_SETTINGS_DETAIL> getTileSettingsDetailsByInhoudProgId(int pTileInhoud, int pProgId)
        {
            List<TILES_SETTINGS_DETAIL> tsetDetails = new List<TILES_SETTINGS_DETAIL>();
            StringBuilder sb = new StringBuilder();
            sb.Append(" SELECT * FROM agrofactuur.TILES_SETTINGS_DETAIL");
            sb.AppendFormat(" WHERE TileSet_Inhoud = {0} AND TileSet_ProgramID = {1}  ", pTileInhoud, pProgId);
            DataTable dtTilesSD = mDatabase.QueryData(mToken, sb);

            foreach (DataRow drTilesSD in dtTilesSD.Rows)
            {
                TILES_SETTINGS_DETAIL lTileSetD = new TILES_SETTINGS_DETAIL();
                if (mDatabase.FillObject(lTileSetD, drTilesSD))
                {
                    tsetDetails.Add(lTileSetD);
                }
            }
            return tsetDetails;
        }

        #endregion

        #region Mineraal Minas

        public List<LABMINAS> GetLabMinas(int pLabkind, int pLabCountry)
        {
            List<LABMINAS> lResultValue = new List<LABMINAS>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT LABMINAS.* FROM LABMINAS");
            lQuery.AppendFormat(" WHERE LabKind = {0} AND LabCountry = {1} ORDER BY LabId", pLabkind, pLabCountry);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);

            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                LABMINAS lbls = new LABMINAS();
                if (mDatabase.FillObject(lbls, drwLabels))
                {
                    lResultValue.Add(lbls);
                }
            }

            return lResultValue;
        }
        public List<LABMINAS> GetLabMinas(List<int> pLabkinds, int pLabCountry)
        {
            List<LABMINAS> lResultValue = new List<LABMINAS>();
            if (pLabkinds.Count() > 0)
            {
                StringBuilder lQuery = new StringBuilder();
                lQuery.Append(" SELECT LABMINAS.* FROM LABMINAS");
                lQuery.AppendFormat(" WHERE LabKind IN (" + intListToString(pLabkinds) + ") AND LabCountry = {0} ORDER BY LabId", pLabCountry);

                System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);

                foreach (DataRow drwLabels in dtLabels.Rows)
                {
                    LABMINAS lbls = new LABMINAS();
                    if (mDatabase.FillObject(lbls, drwLabels))
                    {
                        lResultValue.Add(lbls);
                    }
                }
            }
            return lResultValue;
        }
        public LABMINAS GetLabMina(int pLabkind, int pLabCountry, int pLabId)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT LABMINAS.* FROM LABMINAS");
            lQuery.AppendFormat(" WHERE LabKind = {0} AND LabCountry = {1} AND LabId={2} ", pLabkind, pLabCountry, pLabId);

            LABMINAS lLabel = new LABMINAS();
            mDatabase.FillObject(mToken, lLabel, lQuery);
            return lLabel;

        }

        public MBSEXCR getMbSexCr(string pMestnummer, int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MBSEXCR.* FROM MBSEXCR");
            lQuery.AppendFormat(" WHERE MBSEXCR.Mestnummer = '{0}' AND MBSEXCR.Jaar = {1}  ", pMestnummer, pJaar);
            MBSEXCR lmb = new MBSEXCR();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;
        }
        public bool saveMbsexcr(MBSEXCR pMbsexcr)
        {
            try
            {
                if (WriteActions.SaveObject(pMbsexcr) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMbsexcr(MBSEXCR pMbsexcr)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pMbsexcr);
            String[] DeleteParams = new String[]
             {
                 "Jaar" ,
                 "Mestnummer"
             };
            String CommandText = mDatabase.CreateDeleteCommandText(pMbsexcr, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pMbsexcr, CommandText) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<MGRGEBRK> getMgrgebrken(string pMestnummer, int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MGRGEBRK.* FROM MGRGEBRK");
            lQuery.AppendFormat(" WHERE MGRGEBRK.Mestnummer = '{0}' AND MGRGEBRK.Jaar = {1}  ", pMestnummer, pJaar);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MGRGEBRK> lResultValue = new List<MGRGEBRK>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MGRGEBRK lmb = new MGRGEBRK();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public bool saveMgrgebrk(MGRGEBRK pMgrgebrk)
        {
            try
            {
                if (pMgrgebrk.Gewas > 0 && pMgrgebrk.Gewasgroep > 0 && pMgrgebrk.Jaar > 0 && pMgrgebrk.Mestnummer != "")
                {
                    if (WriteActions.SaveObject(pMgrgebrk) < 0) return false;
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMgrgebrk(MGRGEBRK pMgrgebrk)
        {
            if (pMgrgebrk.Gewas > 0 && pMgrgebrk.Gewasgroep > 0 && pMgrgebrk.Jaar > 0 && pMgrgebrk.Mestnummer != "")
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMgrgebrk);
                String[] DeleteParams = new String[]
             {
                 "Jaar",
                 "Mestnummer",
                 "Gewasgroep",
                 "Gewas"
             };
                String CommandText = mDatabase.CreateDeleteCommandText(pMgrgebrk, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken, pMgrgebrk, CommandText) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }

        public List<MBEGIN> getMBeginnen(string pMestnummer, int pJaar, int pDiersoort)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MBEGIN.* FROM MBEGIN");
            lQuery.AppendFormat(" WHERE MBEGIN.Mestnummer = '{0}' AND MBEGIN.Year = {1} AND AnimalKind={2} ", pMestnummer, pJaar, pDiersoort);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MBEGIN> lResultValue = new List<MBEGIN>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MBEGIN lmb = new MBEGIN();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public bool saveMBegin(MBEGIN pMBegin)
        {
            try
            {
                if (pMBegin.Year > 0 && pMBegin.AnimalKind > 0 && pMBegin.AniCategory > 0 && pMBegin.Stalsysteem > 0 && pMBegin.Mestnummer != "")
                {
                    if (WriteActions.SaveObject(pMBegin) < 0) return false;
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMBegin(MBEGIN pMBegin)
        {
            if (pMBegin.Year > 0 && pMBegin.AnimalKind > 0 && pMBegin.AniCategory > 0 && pMBegin.Stalsysteem > 0 && pMBegin.Mestnummer != "")
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMBegin);
                String[] DeleteParams = new String[]
             {
                 "Mestnummer",
                 "Year",
                 "AnimalKind",
                 "AniCategory",
                 "Stalsysteem"
             };
                string CommandText = mDatabase.CreateDeleteCommandText(pMBegin, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken, pMBegin, CommandText) == 1;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }

        public List<MMUTAT> getMMutats(string pMestnummer, int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MMUTAT.* FROM MMUTAT");
            lQuery.AppendFormat(" WHERE MMUTAT.Mestnummer = '{0}' AND MMUTAT.Year = {1} AND Internalnr>0", pMestnummer, pJaar);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MMUTAT> lResultValue = new List<MMUTAT>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MMUTAT lmb = new MMUTAT();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public MMUTAT getMMutat(int pInternalnr)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MMUTAT.* FROM MMUTAT");
            lQuery.AppendFormat(" WHERE Internalnr={0}", pInternalnr);
            MMUTAT lmb = new MMUTAT();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMMutat(MMUTAT pMMutat)
        {
            try
            {
                if (WriteActions.SaveObject(pMMutat) < 0) return false;
                return true;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMMutat(MMUTAT pMMutat)
        {
            if (pMMutat.Internalnr > 0)
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMMutat);
                String[] DeleteParams = new String[]
                 {
                      "Internalnr"
                 };
                String CommandText = mDatabase.CreateDeleteCommandText(pMMutat, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken, pMMutat, CommandText) == 1;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }

        public List<MMNDTEL> getMMndtels(string pMestnummer, int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MMNDTEL.* FROM MMNDTEL");
            lQuery.AppendFormat(" WHERE MMNDTEL.Mestnummer = '{0}' AND MMNDTEL.Jaar = {1} AND Internalnr>0", pMestnummer, pJaar);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MMNDTEL> lResultValue = new List<MMNDTEL>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MMNDTEL lmb = new MMNDTEL();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public MMNDTEL getMMdtel(int pInternalnr)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MMNDTEL.* FROM MMNDTEL");
            lQuery.AppendFormat(" WHERE Internalnr={0}", pInternalnr);
            MMNDTEL lmb = new MMNDTEL();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMMdtel(MMNDTEL pMMdtel)
        {
            try
            {
                if (WriteActions.SaveObject(pMMdtel) < 0) return false;
                return true;
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMMdtel);
                //if (!isFilledByDb(pMMdtel))
                //    cmd.CommandText = mDatabase.CreateInsertCommandText(pMMdtel);
                //else
                //{
                //    String[] UpdateParams = new String[] 
                //    { 
                //        "Internalnr"
                //    };
                //    cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pMMdtel, UpdateParams);
                //}

                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                //{

                //    if (!isFilledByDb(pMMdtel))
                //    {
                //        pMMdtel.Internalnr = GetLastRowId(cmd.Connection);
                //    }
                //    return true;

                //}
                //return false;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMMdtel(MMNDTEL pMMdtel)
        {
            if (pMMdtel.Internalnr > 0)
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMMdtel);
                String[] DeleteParams = new String[]
             {
                  "Internalnr"
             };
                string CommandText = mDatabase.CreateDeleteCommandText(pMMdtel, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken, pMMdtel, CommandText) == 1;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }

        public MKOEMLK getMkoemlk(string pMestnummer, int pJaar, int pPrognose)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MKOEMLK.* FROM MKOEMLK");
            lQuery.AppendFormat(" WHERE Mestnummer='{0}' AND Jaar={1} AND Prognose={2} ", pMestnummer, pJaar, pPrognose);
            MKOEMLK lmb = new MKOEMLK();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMkoemlk(MKOEMLK pMkoemlk)
        {
            try
            {

                if (WriteActions.SaveObject(pMkoemlk) < 0) return false;
                return true;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<MAFWSTLS> getMafWstels(string pMestnummer, int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MAFWSTLS.* FROM MAFWSTLS");
            lQuery.AppendFormat(" WHERE MAFWSTLS.Mestnummer = '{0}' AND MAFWSTLS.Jaar = {1} AND Diergroep=1 ", pMestnummer, pJaar);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MAFWSTLS> lResultValue = new List<MAFWSTLS>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MAFWSTLS lmafstel = new MAFWSTLS();
                if (mDatabase.FillObject(lmafstel, drwLabels))
                {
                    lResultValue.Add(lmafstel);
                }
            }
            return lResultValue;
        }

        public bool saveMafWstels(MAFWSTLS pMafStel)
        {
            try
            {

                if (WriteActions.SaveObject(pMafStel) < 0) return false;
                return true;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public List<MSTLDRPR> getMstldrprs(string pMestnummer, int pJaar, int pPrognose)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MSTLDRPR.* FROM MSTLDRPR");
            lQuery.AppendFormat(" WHERE MSTLDRPR.Mestnummer = '{0}' AND MSTLDRPR.Jaar = {1} AND MSTLDRPR.Prognose={2}  AND Internalnr>0", pMestnummer, pJaar, pPrognose);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MSTLDRPR> lResultValue = new List<MSTLDRPR>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MSTLDRPR lmb = new MSTLDRPR();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public MSTLDRPR getMstldrpr(int pInternalnr)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MSTLDRPR.* FROM MSTLDRPR");
            lQuery.AppendFormat(" WHERE Internalnr={0}", pInternalnr);
            MSTLDRPR lmb = new MSTLDRPR();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMstldrpr(MSTLDRPR pMstldrpr)
        {
            try
            {
                if (WriteActions.SaveObject(pMstldrpr) < 0) return false;
                return true;
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMstldrpr);
                //if (!isFilledByDb(pMstldrpr))
                //    cmd.CommandText = mDatabase.CreateInsertCommandText(pMstldrpr);
                //else
                //{
                //    String[] UpdateParams = new String[] 
                //    { 
                //        "Internalnr"
                //    };
                //    cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pMstldrpr, UpdateParams);
                //}

                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                //{

                //    if (!isFilledByDb(pMstldrpr))
                //    {
                //        pMstldrpr.Internalnr = GetLastRowId(cmd.Connection);
                //    }
                //    return true;

                //}
                //return false;

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMstldrpr(MSTLDRPR pMstldrpr)
        {
            if (pMstldrpr.Internalnr > 0)
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMstldrpr);
                String[] DeleteParams = new String[]
             {
                  "Internalnr"
             };
                //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMstldrpr, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken, pMstldrpr, mDatabase.CreateDeleteCommandText(pMstldrpr, DeleteParams)) == 1;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }


        public List<MSTLDRGG> getMstldrggs(string pMestnummer, int pJaar, int pProductType, int pPrognose)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MSTLDRGG.* FROM MSTLDRGG");
            lQuery.AppendFormat(" WHERE MSTLDRGG.Mestnummer = '{0}' AND MSTLDRGG.Jaar = {1} AND MSTLDRGG.ProductType={2} AND MSTLDRGG.Prognose={3} AND Internalnr>0", pMestnummer, pJaar, pProductType, pPrognose);
            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MSTLDRGG> lResultValue = new List<MSTLDRGG>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MSTLDRGG lmb = new MSTLDRGG();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public MSTLDRGG getMstldrgg(int pInternalnr)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MSTLDRGG.* FROM MSTLDRGG");
            lQuery.AppendFormat(" WHERE Internalnr={0}", pInternalnr);
            MSTLDRGG lmb = new MSTLDRGG();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMstldrgg(MSTLDRGG pMstldrgg)
        {
            try
            {
                if (WriteActions.SaveObject(pMstldrgg) < 0) return false;
                return true;
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMstldrgg);
                //if (!isFilledByDb(pMstldrgg))
                //    cmd.CommandText = mDatabase.CreateInsertCommandText(pMstldrgg);
                //else
                //{
                //    String[] UpdateParams = new String[] 
                //    { 
                //        "Internalnr"
                //    };
                //    cmd.CommandText = mDatabase.CreateUpdateALLCommandText(pMstldrgg, UpdateParams);
                //}

                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                //{

                //    if (!isFilledByDb(pMstldrgg))
                //    {
                //        pMstldrgg.Internalnr = GetLastRowId(cmd.Connection);
                //    }
                //    return true;

                //}
                //return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMstldrgg(MSTLDRGG pMstldrgg)
        {
            if (pMstldrgg.Internalnr > 0)
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMstldrgg);
                String[] DeleteParams = new String[]
             {
                  "Internalnr"
             };
                //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMstldrgg, DeleteParams);

                try
                {
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;

                    return mDatabase.ModifyObject(mToken, pMstldrgg, mDatabase.CreateDeleteCommandText(pMstldrgg, DeleteParams)) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }

        public List<MANINORM> getManinormenByYear(int pJaar)
        {
            //MANINORM AniCategory is eigenlijk de AniSubCategory  
            //Subcategorie (AniSubcategory): LABMINAS -> Labkind = 120 + labid van diergroep

            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MANINORM.* FROM MANINORM ");
            lQuery.Append(" WHERE IF(  ");
            lQuery.AppendFormat(" (SELECT COUNT(Jaar) FROM MANINORM WHERE Jaar={0})>0  ", pJaar);
            lQuery.AppendFormat(" ,Jaar={0}  ", pJaar);
            lQuery.AppendFormat(" ,Jaar = (SELECT MAX(Jaar) FROM MANINORM WHERE Jaar<{0}) ", pJaar);
            lQuery.Append(" )  ");

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MANINORM> lResultValue = new List<MANINORM>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MANINORM lmb = new MANINORM();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;

        }
        public List<MEIEREN> getMeieren(int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MEIEREN.* FROM MEIEREN ");
            lQuery.Append(" WHERE IF(  ");
            lQuery.AppendFormat(" (SELECT COUNT(Jaar) FROM MEIEREN WHERE Jaar={0})>0  ", pJaar);
            lQuery.AppendFormat(" ,Jaar={0}  ", pJaar);
            lQuery.AppendFormat(" ,Jaar = (SELECT MAX(Jaar) FROM MEIEREN WHERE Jaar<{0}) ", pJaar);
            lQuery.Append(" )  ");

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MEIEREN> lResultValue = new List<MEIEREN>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MEIEREN lmb = new MEIEREN();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public List<MRUWVOER> getMRuwvoeren(int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MRUWVOER.* FROM MRUWVOER ");
            lQuery.Append(" WHERE IF(  ");
            lQuery.AppendFormat(" (SELECT COUNT(Jaar) FROM MRUWVOER WHERE Jaar={0})>0  ", pJaar);
            lQuery.AppendFormat(" ,Jaar={0}  ", pJaar);
            lQuery.AppendFormat(" ,Jaar = (SELECT MAX(Jaar) FROM MRUWVOER WHERE Jaar<{0}) ", pJaar);
            lQuery.Append(" )  ");

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MRUWVOER> lResultValue = new List<MRUWVOER>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MRUWVOER lmb = new MRUWVOER();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public List<MWCOEFF> getMWcoeffen(int pJaar)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MWCOEFF.* FROM MWCOEFF ");
            lQuery.Append(" WHERE IF(  ");
            lQuery.AppendFormat(" (SELECT COUNT(Jaar) FROM MWCOEFF WHERE Jaar={0})>0  ", pJaar);
            lQuery.AppendFormat(" ,Jaar={0}  ", pJaar);
            lQuery.AppendFormat(" ,Jaar = (SELECT MAX(Jaar) FROM MWCOEFF WHERE Jaar<{0}) ", pJaar);
            lQuery.Append(" )  ");

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MWCOEFF> lResultValue = new List<MWCOEFF>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MWCOEFF lmb = new MWCOEFF();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }


        public List<REMMINAS> getRemminassen(string pMestnummer)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT REMMINAS.* FROM REMMINAS ");
            lQuery.AppendFormat(" WHERE Mestnummer='{0}'  ", pMestnummer);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<REMMINAS> lResultValue = new List<REMMINAS>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                REMMINAS lmb = new REMMINAS();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }

        public bool saveRemminas(REMMINAS pRemminas)
        {
            try
            {
                if (pRemminas.Mestnummer.Length > 0 && pRemminas.RemKind > 0)
                {
                    if (WriteActions.SaveObject(pRemminas) < 0) return false;
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteRemminas(REMMINAS pRemminas)
        {
            if (pRemminas.RemId > 0)
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pRemminas);
                String[] DeleteParams = new String[]
             {
                  "RemKind",
                  "RemId",
                  "Mestnummer"
             };
                //cmd.CommandText = mDatabase.CreateDeleteCommandText(pRemminas, DeleteParams);

                try
                {
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                    return mDatabase.ModifyObject(mToken, pRemminas, mDatabase.CreateDeleteCommandText(pRemminas, DeleteParams)) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }


        public List<MMESTGG> getMMestggs(string pMestnummer, int pJaar, int pMestType, int pPrognose)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MMESTGG.* FROM MMESTGG");

            lQuery.AppendFormat(" WHERE MMESTGG.Mestnummer = '{0}' AND MMESTGG.Jaar = {1} AND MMESTGG.MestType={2} AND MMESTGG.Prognose={3} AND Internalnr>0", pMestnummer, pJaar, pMestType, pPrognose);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MMESTGG> lResultValue = new List<MMESTGG>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MMESTGG lmb = new MMESTGG();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public MMESTGG getMMestgg(int pInternalnr)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MMESTGG.* FROM MMESTGG ");
            lQuery.AppendFormat(" WHERE Internalnr={0}", pInternalnr);
            MMESTGG lmb = new MMESTGG();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMMestgg(MMESTGG pMMestgg)
        {
            try
            {
                if (WriteActions.SaveObject(pMMestgg) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMMestgg(MMESTGG pMMestgg)
        {
            if (pMMestgg.Internalnr > 0)
            {
                //DbCommand cmd = mDatabase.CreateParameters(mToken, pMMestgg);
                String[] DeleteParams = new String[]
             {
                  "Internalnr"
             };
                //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMMestgg, DeleteParams);

                try
                {
                    return mDatabase.ModifyObject(mToken, pMMestgg, mDatabase.CreateDeleteCommandText(pMMestgg, DeleteParams)) == 1;
                    //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                }
                catch (Exception ex)
                {
                    unLogger.WriteError(ex.Message, ex);
                    return false;
                }
            }
            return false;
        }

        public List<MAANTDRN> getMaantdrns(string pMestnummer, int pJaar, int pAnimalKind)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MAANTDRN.* FROM MAANTDRN");

            lQuery.AppendFormat(" WHERE MAANTDRN.Mestnummer = '{0}' AND MAANTDRN.Year = {1} AND MAANTDRN.AnimalKind={2}  ", pMestnummer, pJaar, pAnimalKind);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<MAANTDRN> lResultValue = new List<MAANTDRN>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                MAANTDRN lmb = new MAANTDRN();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }
        public MAANTDRN getMaantdrn(string pMestnummer, int pJaar, int pAnimalKind, int pAniCategory)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT MAANTDRN.* FROM MAANTDRN ");
            lQuery.AppendFormat(" WHERE MAANTDRN.Mestnummer = '{0}' AND MAANTDRN.Year = {1} AND MAANTDRN.AnimalKind={2} AND MAANTDRN.AniCategory={3} ", pMestnummer, pJaar, pAnimalKind, pAniCategory);
            MAANTDRN lmb = new MAANTDRN();
            mDatabase.FillObject(mToken, lmb, lQuery);
            return lmb;

        }
        public bool saveMaantdrn(MAANTDRN pMaantdrn)
        {
            try
            {
                if (WriteActions.SaveObject(pMaantdrn) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }
        public bool DeleteMaantdrn(MAANTDRN pMaantdrn)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken, pMaantdrn);
            String[] DeleteParams = new String[]
             {
                  "Mestnummer",
                  "Year",
                  "AnimalKind",
                  "AniCategory"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pMaantdrn, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken, pMaantdrn, mDatabase.CreateDeleteCommandText(pMaantdrn, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public DataTable getTablesnamesFilledByMestnummer(string pMestnummer)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat(" SELECT 'MBSEXCR' AS tblName, Mestnummer FROM MBSEXCR Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MGRGEBRK' AS tblName,  Mestnummer FROM MGRGEBRK Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MBEGIN' AS tblName,   Mestnummer FROM MBEGIN Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MMUTAT' AS tblName,   Mestnummer FROM MMUTAT Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MMNDTEL' AS tblName,   Mestnummer FROM MMNDTEL Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MKOEMLK' AS tblName,   Mestnummer FROM MKOEMLK Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MAFWSTLS' AS tblName,   Mestnummer FROM MAFWSTLS Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MSTLDRPR' AS tblName,   Mestnummer FROM MSTLDRPR Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MSTLDRGG' AS tblName,   Mestnummer FROM MSTLDRGG Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'REMMINAS' AS tblName,   Mestnummer FROM REMMINAS Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MMESTGG' AS tblName,   Mestnummer FROM MMESTGG Where Mestnummer='{0}' ", pMestnummer);
            lQuery.Append(" UNION ");
            lQuery.AppendFormat(" SELECT 'MAANTDRN' AS tblName,   Mestnummer FROM MAANTDRN Where Mestnummer='{0}' ", pMestnummer);
            return mDatabase.QueryData(mToken, lQuery);
        }

        #endregion

        #region Feeds

        public bool DeleteFeedRationSettings(FEED_RATION_SETTINGS pFeedRationSettings)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedRationSettings);
            String[] DeleteParams = new String[]
             {
                  "AnimalKind_ID",
                  "UBNid",
                  "FR_GroupID",
                  "FR_PhaseNr"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedRationSettings, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedRationSettings, mDatabase.CreateDeleteCommandText(pFeedRationSettings, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteFeedcurvedays(FEEDCURVE_DAYS pFeedcurvedays)
        {


            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedcurvedays);
            String[] DeleteParams = new String[]
             {
                  "Fd_ID",
                  "UBNid"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedcurvedays, DeleteParams);

            try
            {
                int lFd_ID = pFeedcurvedays.Fd_ID;
                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                if (mDatabase.ModifyObject(mToken, pFeedcurvedays, mDatabase.CreateDeleteCommandText(pFeedcurvedays, DeleteParams)) == 1)
                {
                    if (lFd_ID > 0)
                    {
                        String qry = String.Format(" DELETE FROM FEEDCURVE_DAYS_DETAIL " +
                                    "  WHERE Fd_ID={0} ",
                                    lFd_ID);
                        //cmd = mDatabase.CreateCommand(mToken);
                        //cmd.CommandType = System.Data.CommandType.Text;
                        //cmd.CommandText = qry;

                        //if (mDatabase.ExecuteNonQueryCommand(cmd) > 0)
                        //{

                        //}
                        mDatabase.ExecuteNonQuery(mToken, qry);
                    }
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteFeedcurvedaysDetails(FEEDCURVE_DAYS_DETAIL pFeedcurvedaysDetails)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedcurvedaysDetails);
            String[] DeleteParams = new String[]
             {
                  "Fd_ID",
                  "Fdd_Day",
                  "Fdd_AB_FeedNr"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedcurvedaysDetails, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pFeedcurvedaysDetails, mDatabase.CreateDeleteCommandText(pFeedcurvedaysDetails, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteFeedCurveMilk(FEEDCURVE_MILK pFeedcurvemilk)
        {


            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedcurvemilk);
            String[] DeleteParams = new String[]
             {
                  "Fm_ID",
                  "UBNid"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedcurvemilk, DeleteParams);

            try
            {
                int lFm_ID = pFeedcurvemilk.Fm_ID;


                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                if (mDatabase.ModifyObject(mToken, pFeedcurvemilk, mDatabase.CreateDeleteCommandText(pFeedcurvemilk, DeleteParams)) == 1)
                {
                    if (lFm_ID > 0)
                    {

                        StringBuilder lQuery = new StringBuilder();
                        lQuery.Append(" SELECT DISTINCT(fmm.fmm_ID) FROM FEEDCURVE_MILK_MILKINFO fmm ");
                        lQuery.AppendFormat(" WHERE fmm.Fm_ID= {0}  ", lFm_ID);
                        DataTable tbl = mDatabase.QueryData(mToken, lQuery, MissingSchemaAction.Add);
                        List<int> fmmids = new List<int>();
                        foreach (DataRow dr in tbl.Rows)
                        {
                            int lR = 0;
                            try
                            {
                                int.TryParse(dr[0].ToString(), out lR);
                                fmmids.Add(lR);
                            }
                            catch { }
                        }

                        if (fmmids.Count() > 0)
                        {
                            String qry = " DELETE FROM FEEDCURVE_MILK_MILKINFO " +
                                        "  WHERE Fmm_ID IN (" + intListToString(fmmids) + ") ";
                            //cmd = mDatabase.CreateCommand(mToken);
                            //cmd.CommandType = System.Data.CommandType.Text;
                            //cmd.CommandText = qry;
                            //mDatabase.ExecuteNonQueryCommand(cmd);
                            mDatabase.ExecuteNonQuery(mToken, qry);

                            String qry2 = " DELETE FROM FEEDCURVE_MILK_MILKINFO_DETAIL " +
                                       "  WHERE Fmm_ID IN (" + intListToString(fmmids) + ") ";
                            //cmd = mDatabase.CreateCommand(mToken);
                            //cmd.CommandType = System.Data.CommandType.Text;
                            //cmd.CommandText = qry2;

                            //mDatabase.ExecuteNonQueryCommand(cmd);
                            mDatabase.ExecuteNonQuery(mToken, qry2);
                        }
                    }
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteFeedCurveMilkDetailAndInfo(FEEDCURVE_MILK_MILKINFO pFeedcurvemilkinfo)
        {
            int lFm_ID = pFeedcurvemilkinfo.Fm_ID;
            int lFmm_ID = pFeedcurvemilkinfo.Fmm_ID;
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedcurvemilkinfo);
            String[] DeleteParams = new String[]
             {
                  "Fm_ID",
                  "Fmm_ID"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedcurvemilkinfo, DeleteParams);

            try
            {



                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                if (mDatabase.ModifyObject(mToken, pFeedcurvemilkinfo, mDatabase.CreateDeleteCommandText(pFeedcurvemilkinfo, DeleteParams)) == 1)
                {
                    if (lFmm_ID > 0)
                    {



                        String qry2 = " DELETE FROM FEEDCURVE_MILK_MILKINFO_DETAIL " +
                                   "  WHERE Fmm_ID IN (" + lFmm_ID.ToString() + ") ";
                        //cmd = mDatabase.CreateCommand(mToken);
                        //cmd.CommandType = System.Data.CommandType.Text;
                        //cmd.CommandText = qry2;

                        //mDatabase.ExecuteNonQueryCommand(cmd);
                        mDatabase.ExecuteNonQuery(mToken, qry2);
                    }
                    return false;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteFeedCurveUpDown(FEEDCURVE_UPDOWN pFeedcurveUpDown)
        {


            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedcurveUpDown);
            String[] DeleteParams = new String[]
             {
                  "Fud_ID",
                  "UBNid"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedcurveUpDown, DeleteParams);

            try
            {
                int lFud_ID = pFeedcurveUpDown.Fud_ID;
                //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                if (mDatabase.ModifyObject(mToken, pFeedcurveUpDown, mDatabase.CreateDeleteCommandText(pFeedcurveUpDown, DeleteParams)) == 1)
                {
                    if (lFud_ID > 0)
                    {
                        String qry = String.Format(" DELETE FROM FEEDCURVE_UPDOWN_DETAIL " +
                                    "  WHERE Fud_ID={0} ",
                                    lFud_ID);
                        //cmd = mDatabase.CreateCommand(mToken);
                        //cmd.CommandType = System.Data.CommandType.Text;
                        //cmd.CommandText = qry;
                        mDatabase.ExecuteNonQuery(mToken, qry);
                        //if (mDatabase.ExecuteNonQueryCommand(cmd) > 0)
                        //{

                        //}
                    }
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool DeleteFeedcurveUpDownDetails(FEEDCURVE_UPDOWN_DETAIL pFeedcurveUpDownDetails)
        {

            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedcurveUpDownDetails);
            String[] DeleteParams = new String[]
             {
                  "Fud_ID",
                  "Fudd_AB_FeedNr",
                  "Fudd_Day"

             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedcurveUpDownDetails, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken, pFeedcurveUpDownDetails, mDatabase.CreateDeleteCommandText(pFeedcurveUpDownDetails, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool saveFeedInComp(FEED_IN_FEEDCOMPUTER pFeedInComp)
        {
            try
            {
                if (WriteActions.SaveObject(pFeedInComp) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.ToString(), ex);
                return false;
            }
        }

        public bool saveFeedstep(FEED_STEP pFeedStep)
        {
            try
            {
                if (WriteActions.SaveObject(pFeedStep) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.ToString(), ex);
                return false;
            }
        }

        public bool saveFeedAdviceRovecom(FEED_ADVICE_ROVECOM pFeedAdviceRovecom)
        {
            try
            {
                if (WriteActions.SaveObject(pFeedAdviceRovecom) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.ToString(), ex);
                return false;
            }
        }

        public bool DeleteFeedAdviceRovecom(FEED_ADVICE_ROVECOM pFeedAdviceRovecom)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken.getLastChildConnection(), pFeedAdviceRovecom);
            String[] DeleteParams = new String[]
             {
                  "UbnID",
                  "AniID",
                  "FAR_Rovecom_Feednr"
             };
            //cmd.CommandText = mDatabase.CreateSetNegativeCommandText(pFeedAdviceRovecom, DeleteParams);

            try
            {
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedAdviceRovecom, mDatabase.CreateSetNegativeCommandText(pFeedAdviceRovecom, DeleteParams)) == 1;
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        public bool saveFeedRovecom(FEED_ROVECOM pFeedRovecom)
        {
            try
            {
                if (WriteActions.SaveObject(pFeedRovecom) < 0) return false;
                return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.ToString(), ex);
                return false;
            }
        }

        public bool DeleteFeedRovecom(FEED_ROVECOM pFeedRovecom)
        {
            //DbCommand cmd = mDatabase.CreateParameters(mToken, pFeedRovecom);
            String[] DeleteParams = new String[]
             {
                  "UbnID",
                  "AnimalKind_ID",
                  "FR_AB_FeedNr"
             };
            //cmd.CommandText = mDatabase.CreateDeleteCommandText(pFeedRovecom, DeleteParams);

            try
            {
                //return mDatabase.ExecuteNonQueryCommand(cmd) == 1;
                return mDatabase.ModifyObject(mToken.getLastChildConnection(), pFeedRovecom, mDatabase.CreateDeleteCommandText(pFeedRovecom, DeleteParams)) == 1;
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return false;
            }
        }

        #endregion

        public List<FTPUSER> getFtpUsersMultipleDatabases(List<string> dataBases, int FtpNumber)
        {
            StringBuilder qry = new StringBuilder();

            foreach (string dbName in dataBases)
            {
                qry.Append(String.Format("SELECT * FROM {0}.FTPUSER WHERE FtpNumber = {1} ", dbName, FtpNumber));
                if (dbName != dataBases.Last())
                    qry.Append("UNION ");
            }

            DataTable tbl = mDatabase.QueryData(mToken, qry);
            return getList<FTPUSER>(tbl);
        }

        public string getThirdProperty(int thrId, string tpKey)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(String.Format("SELECT * "
                    + "FROM agrofactuur.THIRD_PROPERTY "
                    + "WHERE ThrId = {0} "
                    + "AND TP_Key = '{1}' ", thrId, tpKey));

            THIRD_PROPERTY tp = getSingleItem<THIRD_PROPERTY>(mToken, sql);

            if (tp == null)
                return "";

            return tp.TP_Value;
        }

        public List<THIRD_PROPERTY> getThirdPropertys(string tpKey)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append($@"SELECT *  
                     FROM agrofactuur.THIRD_PROPERTY 
                     WHERE TP_Key = '{tpKey}'  " );

            DataTable tbl = mDatabase.QueryData(mToken, sql);
            return getList<THIRD_PROPERTY>(tbl);
        }

        public bool setThirdProperty(int thrId, string tpKey, string tpValue)
        {
            try
            {
                if (thrId > 0)
                {
                    String sql = String.Format("REPLACE INTO agrofactuur.THIRD_PROPERTY (ThrId, TP_Key, TP_Value) VALUES ({0}, '{1}', '{2}') ", thrId, tpKey, tpValue);

                    if (mDatabase.ExecuteNonQuery(mToken, sql) == 1)
                        return true;
                    //DbCommand cmd = mDatabase.CreateCommand(mToken);
                    //cmd.CommandType = System.Data.CommandType.Text;
                    //cmd.CommandText = sql;

                    //if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                    //    return true;
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError("Exception setThirdProperty ex: " + ex.ToString());
            }

            return false;
        }


        public string getUbnProperty(int ubnId, string upKey)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(String.Format("SELECT * "
                    + "FROM agrofactuur.UBN_PROPERTY "
                    + "WHERE UbnId = {0} "
                    + "AND UP_Key = '{1}' ", ubnId, upKey));

            UBN_PROPERTY up = getSingleItem<UBN_PROPERTY>(mToken, sql);

            if (up == null)
                return "";

            return up.UP_Value;
        }

        public bool setUbnProperty(int ubnId, string upKey, string upValue)
        {
            try
            {
                String sql = String.Format("REPLACE INTO agrofactuur.UBN_PROPERTY (UbnId, UP_Key, UP_Value) VALUES ({0}, '{1}', '{2}') ", ubnId, upKey, upValue);

                //DbCommand cmd = mDatabase.CreateCommand(mToken);
                //cmd.CommandType = System.Data.CommandType.Text;
                //cmd.CommandText = sql;

                if (mDatabase.ExecuteNonQuery(mToken, sql) == 1)
                    return true;
            }
            catch (Exception ex)
            {
                unLogger.WriteError("Exception setUbnProperty ex: " + ex.ToString());
            }

            return false;
        }

        public List<UBN_PROPERTY> getUbnProperties(string upKey)
        {
            StringBuilder qry = new StringBuilder();
            qry.Append(String.Format("SELECT * FROM agrofactuur.UBN_PROPERTY WHERE UP_KEY = '{0}' ", upKey));

            DataTable tbl = mDatabase.QueryData(mToken, qry);
            return getList<UBN_PROPERTY>(tbl);
        }

        public List<UBN_PROPERTY> getUbnPropertiesLike(string upKey)
        {
            StringBuilder qry = new StringBuilder();
            qry.Append(String.Format("SELECT * FROM agrofactuur.UBN_PROPERTY WHERE UP_KEY LIKE '%{0}%' ORDER BY UP_KEY ", upKey));

            DataTable tbl = mDatabase.QueryData(mToken, qry);
            return getList<UBN_PROPERTY>(tbl);
        }

        public List<MOVEMENT> GetMovementsByAniIdMovkind(int aniId, int movKind)
        {
            StringBuilder qry = new StringBuilder();
            qry.Append(String.Format("SELECT * FROM MOVEMENT WHERE AniId = {0} AND MovKind = {1} AND MOVEMENT.MovId>0 ", aniId, movKind));

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), qry);
            return getList<MOVEMENT>(tbl);
        }

        public int getAantalUniekeWorpen(int aniId)
        {
            var lWorpen = getUniekeWorpen(aniId);

            if (lWorpen.Count == 0)
                return 0;

            return lWorpen.Max(m => m.Key);
        }

        //Alle worpen van een dier, binnen 7 dagen is het een worp
        public List<KeyValuePair<int, DateTime>> getUniekeWorpen(int aniId)
        {
            /*
            SET @ani = 0, @num := 0, @lastDate := FROM_UNIXTIME(0);

            SELECT AniId, Max(birNr)
            FROM
            (
	            SELECT e.AniId, e.EveDate,

	            @lastDate := if (e.AniId = @ani, @lastDate, FROM_UNIXTIME(0)) as dummy0,
   
	            @num := 	
		            if (e.AniId = @ani,
			            if(e.EveDate > DATE_ADD(@lastDate, INTERVAL 7 DAY), @num + 1, @num),
			            1
		        ) as birNr,

	        @ani := e.AniId as dummy1,
            @lastDate := e.EveDate as dummy2

            FROM EVENT e
	        WHERE e.AniId IN 
	        (
		        SELECT AniId 
		        FROM ANIMALCATEGORY 
		        WHERE FarmId = 26894 
		        AND AniCategory <= 3
	        ) 
            AND e.EveKind = 5
            ORDER BY e.AniId, e.EveDate ASC
            ) as dt GROUP BY AniId
            */

            const int MAX_DAYS_DIFF = 7;

            var ret = new List<KeyValuePair<int, DateTime>>();

            if (aniId < 0)
                return ret;

            List<EVENT> worpen = getEventsByAniIdKind(aniId, (int)LABELSConst.EventKind.AFKALVEN)
                .OrderBy(e => e.EveDate)
                .ThenBy(e => e.EventId)
                .ToList();

            int nrWorpen = 0;
            foreach (EVENT e in worpen)
            {
                if (ret.Where(r => Math.Abs((r.Value - e.EveDate).TotalDays) <= MAX_DAYS_DIFF).Count() == 0)
                {
                    nrWorpen++;
                    ret.Add(new KeyValuePair<int, DateTime>(nrWorpen, e.EveDate));
                }
            }

            return ret;
        }

        public DateTime? StringToNDT(string dt)
        {
            DateTime ret; ;

            if (DateTime.TryParse(dt, out ret))
                return ret;

            return null;
        }

        private int saveDataItemAnimalDb(DataObject dataItem, String primaryKeyFieldName)
        {
            try
            {
                return WriteActions.SaveObject(dataItem);

            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public bool treatmentExists(int AniId, DateTime date, LABELSConst.TreKindDefault TreKind)
        {
            StringBuilder qry = new StringBuilder(String.Format(
                                  "SELECT e.* FROM EVENT e "
                                + "JOIN TREATMEN t ON e.EventId = t.EventId "
                                + "WHERE e.AniId = {0} "
                                + "AND e.EveKind = {1} "
                                + "AND e.EventId > 0 "
                                + "AND Date(e.EveDate) = Date ({2}) "
                                + "AND t.TreKind = {3} ", AniId, (int)LABELSConst.EventKind.BEHANDELING, MySQL_Datum(date, 1), (int)TreKind
                                ));

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), qry);
            return getList<EVENT>(tbl).Count > 0;
        }

        public bool gestationExists(int AniId, DateTime date, VSM.RUMA.CORE.DB.LABELSConst.gesStatus gesStatus)
        {
            StringBuilder qry = new StringBuilder(String.Format(
                                  "SELECT e.* FROM EVENT e "
                                + "JOIN GESTATIO g ON e.EventId = g.EventId "
                                + "WHERE e.AniId = {0} "
                                + "AND e.EveKind = {1} "
                                + "AND e.EventId > 0 "
                                + "AND Date(e.EveDate) = Date ({2}) "
                                + "AND g.GesStatus = {3} ", AniId, (int)LABELSConst.EventKind.DRACHTIGHEID, MySQL_Datum(date, 1), (int)gesStatus
                                ));

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), qry);
            return getList<EVENT>(tbl).Count > 0;
        }

        [Obsolete("verplaatst")]
        public bool inheatExists(int AniId, DateTime date, VSM.RUMA.CORE.DB.LABELSConst.HeatCertainty heatCertainty)
        {
            return Event.inheatExists(AniId, date, heatCertainty);
        }

        public bool diseaseExistsOnDate(int AniId, DateTime date, Disease dis)
        {
            return diseaseExistsOnDate(AniId, date, new List<Disease>() { dis });
        }

        public bool diseaseExistsOnDate(int AniId, DateTime date, List<Disease> Diseases)
        {
            if (Diseases.Count == 0)
                return false;

            StringBuilder qry = new StringBuilder(String.Format(
                      "SELECT e.* FROM EVENT e "
                    + "JOIN DISEASE d ON e.EventId = d.EventId "
                    + "WHERE e.AniId = {0} "
                    + "AND e.EveKind = {1} "
                    + "AND e.EventId > 0 "
                    + "AND Date(e.EveDate) = Date ({2}) "
                    + "AND (", AniId, (int)LABELSConst.EventKind.ZIEKTE, MySQL_Datum(date, 1)));

            bool first = true;
            foreach (Disease d in Diseases)
            {
                if (!first)
                    qry.Append(" OR ");
                else
                    first = false;

                qry.AppendFormat("(disMainCode = {0} AND disSubCode = {1})", d.MainCode, d.SubCode);
            }
            qry.Append(")");

            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), qry);
            return getList<EVENT>(tbl).Count > 0;
        }

        public int saveWerklijstHetDeensSysteem(WERKLIJST_HET_DEENS_SYSTEEM werklijst)
        {
            return saveDataItemAnimalDb(werklijst, "Whds_Id");
        }

        public bool werklijstExists(WERKLIJST_HET_DEENS_SYSTEEM whds)
        {
            String qry =
             "SELECT * FROM WERKLIJST_HET_DEENS_SYSTEEM "
           + "WHERE AniId = ?AniId "
           + "AND Date(Whds_Datum) = Date(?Whds_Datum) "
           + "AND UbnId = ?UbnId ";

            using (var cmd = mDatabase.CreateCommand(mToken.getLastChildConnection()))
            {

                if (whds.Whds_Baarmoeder.HasValue)
                {
                    qry += "AND Whds_Baarmoeder = ?Whds_Baarmoeder ";
                    mDatabase.AddParameter(cmd, "Whds_Baarmoeder", whds.Whds_Baarmoeder);
                }
                else
                {
                    qry += "AND Whds_Baarmoeder is null ";
                }

                if (whds.Whds_BCS.HasValue)
                {
                    qry += "AND Whds_BCS = ?Whds_BCS ";
                    mDatabase.AddParameter(cmd, "Whds_BCS", Math.Round(whds.Whds_BCS.Value, 2));
                }
                else
                {
                    qry += "AND Whds_BCS is null ";
                }

                if (whds.Whds_Behandeling.HasValue)
                {
                    qry += "AND Whds_Behandeling = ?Whds_Behandeling ";
                    mDatabase.AddParameter(cmd, "Whds_Behandeling", whds.Whds_Behandeling);
                }
                else
                {
                    qry += "AND Whds_Behandeling is null ";
                }

                if (whds.Whds_Borst.HasValue)
                {
                    qry += "AND Whds_Borst = ?Whds_Borst ";
                    mDatabase.AddParameter(cmd, "Whds_Borst", whds.Whds_Borst);
                }
                else
                {
                    qry += "AND Whds_Borst is null ";
                }

                if (whds.Whds_CMT.HasValue)
                {
                    qry += "AND Whds_CMT = ?Whds_CMT ";
                    mDatabase.AddParameter(cmd, "Whds_CMT", whds.Whds_CMT);
                }
                else
                {
                    qry += "AND Whds_CMT is null ";
                }

                if (whds.Whds_Controle.HasValue)
                {
                    qry += "AND Whds_Controle = ?Whds_Controle ";
                    mDatabase.AddParameter(cmd, "Whds_Controle", whds.Whds_Controle);
                }
                else
                {
                    qry += "AND Whds_Controle is null ";
                }

                if (whds.Whds_Diagnose.HasValue)
                {
                    qry += "AND Whds_Diagnose = ?Whds_Diagnose ";
                    mDatabase.AddParameter(cmd, "Whds_Diagnose", whds.Whds_Diagnose);
                }
                else
                {
                    qry += "AND Whds_Diagnose is null ";
                }

                qry += "AND Whds_Dierenarts = ?Whds_Dierenarts ";
                mDatabase.AddParameter(cmd, "Whds_Dierenarts", whds.Whds_Dierenarts);

                if (whds.Whds_Hak.HasValue)
                {
                    qry += "AND Whds_Hak = ?Whds_Hak ";
                    mDatabase.AddParameter(cmd, "Whds_Hak", whds.Whds_Hak);
                }
                else
                {
                    qry += "AND Whds_Hak is null ";
                }

                if (whds.Whds_Heup.HasValue)
                {
                    qry += "AND Whds_Heup = ?Whds_Heup ";
                    mDatabase.AddParameter(cmd, "Whds_Heup", whds.Whds_Heup);
                }
                else
                {
                    qry += "AND Whds_Heup is null ";
                }

                if (whds.Whds_Keto.HasValue)
                {
                    qry += "AND Whds_Keto = ?Whds_Keto ";
                    mDatabase.AddParameter(cmd, "Whds_Keto", whds.Whds_Keto);
                }
                else
                {
                    qry += "AND Whds_Keto is null ";
                }

                if (whds.Whds_KetoMelk.HasValue)
                {
                    qry += "AND Whds_KetoMelk = ?Whds_KetoMelk ";
                    mDatabase.AddParameter(cmd, "Whds_KetoMelk", whds.Whds_KetoMelk);
                }
                else
                {
                    qry += "AND Whds_KetoMelk is null ";
                }

                if (whds.Whds_KetoUrine.HasValue)
                {
                    qry += "AND Whds_KetoUrine = ?Whds_KetoUrine ";
                    mDatabase.AddParameter(cmd, "Whds_KetoUrine", whds.Whds_KetoUrine);
                }
                else
                {
                    qry += "AND Whds_KetoUrine is null ";
                }

                if (whds.Whds_Kruis.HasValue)
                {
                    qry += "AND Whds_Kruis = ?Whds_Kruis ";
                    mDatabase.AddParameter(cmd, "Whds_Kruis", whds.Whds_Kruis);
                }
                else
                {
                    qry += "AND Whds_Kruis is null ";
                }

                if (whds.Whds_Mest.HasValue)
                {
                    qry += "AND Whds_Mest = ?Whds_Mest ";
                    mDatabase.AddParameter(cmd, "Whds_Mest", whds.Whds_Mest);
                }
                else
                {
                    qry += "AND Whds_Mest is null ";
                }

                qry += "AND Whds_Opmerking = ?Whds_Opmerking ";
                mDatabase.AddParameter(cmd, "Whds_Opmerking", whds.Whds_Opmerking);

                if (whds.Whds_Ovarium.HasValue)
                {
                    qry += "AND Whds_Ovarium = ?Whds_Ovarium ";
                    mDatabase.AddParameter(cmd, "Whds_Ovarium", whds.Whds_Ovarium);
                }
                else
                {
                    qry += "AND Whds_Ovarium is null ";
                }

                if (whds.Whds_Ph.HasValue)
                {
                    qry += "AND Whds_Ph = ?Whds_Ph ";
                    mDatabase.AddParameter(cmd, "Whds_Ph", Math.Round(whds.Whds_Ph.Value, 2));
                }
                else
                {
                    qry += "AND Whds_Ph is null ";
                }

                if (whds.Whds_Poten.HasValue)
                {
                    qry += "AND Whds_Poten = ?Whds_Poten ";
                    mDatabase.AddParameter(cmd, "Whds_Poten", whds.Whds_Poten);
                }
                else
                {
                    qry += "AND Whds_Poten is null ";
                }

                if (whds.Whds_Schede.HasValue)
                {
                    qry += "AND Whds_Schede = ?Whds_Schede ";
                    mDatabase.AddParameter(cmd, "Whds_Schede", whds.Whds_Schede);
                }
                else
                {
                    qry += "AND Whds_Schede is null ";
                }

                if (whds.Whds_Uier.HasValue)
                {
                    qry += "AND Whds_Uier = ?Whds_Uier ";
                    mDatabase.AddParameter(cmd, "Whds_Uier", whds.Whds_Uier);
                }
                else
                {
                    qry += "AND Whds_Uier is null ";
                }


                qry += " LIMIT 1";

                cmd.CommandText = qry;
                mDatabase.AddParameter(cmd, "AniId", whds.AniId);
                mDatabase.AddParameter(cmd, "Whds_Datum", whds.Whds_Datum);
                mDatabase.AddParameter(cmd, "UbnId", whds.UbnID);
                WERKLIJST_HET_DEENS_SYSTEEM d = getSingleItem<WERKLIJST_HET_DEENS_SYSTEEM>(cmd);

                cmd.Connection.Dispose(); //ML: oke????/????????
                return (d != null);

            }

        }

        public DateTime GetLastMPRDate(int ubnId)
        {
            String sql = String.Format(
                          @"SELECT max(AnaMilkDate) as LastMPR
                            FROM ANALYSE
                            WHERE UbnId = {0}
                            AND AnaTypeOfControl = 0
                            AND AnaKgMilk is not null
                            AND AnaKgMilk > 0
                            AND AniId > 0 ", ubnId);

            DataTable dtResults = mDatabase.QueryData(mToken.getLastChildConnection(), new StringBuilder(sql));

            if (dtResults.Rows.Count == 1)
            {
                DateTime dt;
                DateTime.TryParse(dtResults.Rows[0]["LastMPR"].ToString(), out dt);
                return dt;
            }
            else
            {
                return DateTime.MinValue;
            }
        }





        public List<BIRTH> CheckBirthsByCalfId(int pCalfId)
        {
            List<BIRTH> lResultValue = new List<BIRTH>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.AppendFormat(" SELECT b.* FROM BIRTH b WHERE b.CalfId={0} AND b.EventId>0 ", pCalfId);


            DataTable tbl = mDatabase.QueryData(mToken.getLastChildConnection(), lQuery);
            List<BIRTH> lResultList = new List<BIRTH>();
            foreach (DataRow dr in tbl.Rows)
            {
                BIRTH b = new BIRTH();
                if (mDatabase.FillObject(b, dr))
                {
                    lResultList.Add(b);
                }
            }
            return lResultList;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // AGROLINK ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public Int64 GetBinairFromInt(int pInt)
        {
            if (pInt == 1) return 1;

            Int64 i = 2;
            for (int xx = 2; xx < pInt; xx++)
            {
                i *= 2;
            }
            return i;
        }
        public Int64 GetBinairFromInts(List<int> pListInt)
        {
            Int64 result = 0;
            foreach (int x in pListInt)
            {
                result += GetBinairFromInt(x);
            }
            return result;
        }
        public List<int> GetIntsFromBinair(Int64 pInt64)
        {
            List<int> intList = new List<int>();
            string bin = Convert.ToString(pInt64, 2);
            string binRecht = new string(bin.ToCharArray().Reverse().ToArray());
            for (int x = 0; x < binRecht.Length; x++)
            {
                if (binRecht.Substring(x, 1) == "1")
                {
                    intList.Add(x + 1);
                }
            }
            return intList;
        }
        public int SaveObject(DataObject pDataObject, DBConnectionToken pToken)
        {

            return WriteActions.SaveObject(pDataObject);

            //using (DbCommand cmd = mDatabase.CreateParameters(pToken, pDataObject))
            //{
            //    cmd.CommandText = mDatabase.CreateReplaceCommandText(pDataObject);
            //    mDatabase.ExecuteNonQueryCommand(cmd);
            //    return GetLastRowId(cmd.Connection);
            //}
        }

        public void ExecuteQuery(StringBuilder pQuery, DBConnectionToken pToken)
        {
            mDatabase.ExecuteNonQuery(pToken, pQuery.ToString());
        }

        public List<int> GetAgrolinkRechten(int pThrId1, int pThrId2, int pKind, string pMachtigingId)
        {
            StringBuilder query = new StringBuilder();
            query.AppendFormat("SELECT * FROM agrolink.GEMACHTIGD G WHERE G.ThrId1={0} AND G.ThrId2={1} AND G.GemKind={2} AND G.MachtigingId='{3}'", pThrId1, pThrId2, pKind, pMachtigingId);
            DataTable dt = mDatabase.QueryData(mToken.getLastChildConnection(), query, MissingSchemaAction.Add);
            if (dt.Rows.Count == 0) return new List<int>();
            return GetIntsFromBinair(Convert.ToInt64(dt.Rows[0]["RechtRechten"]));
        }
        public List<GEMACHTIGD> GetGemachtigd(int pThrId1, int pThrid2)
        {
            StringBuilder query = new StringBuilder();
            query.Append(String.Format("SELECT * FROM agrolink.GEMACHTIGD WHERE ThrId1={0} AND ThrId2={1} ", pThrId1, pThrid2));
            DataTable dt = mDatabase.QueryData(mToken, query);
            return getList<GEMACHTIGD>(dt);
        }

        public List<THIRD> GetAgrolinkRelations(string soort, int agrolink_progid)
        {
            List<THIRD> lResultValue = new List<THIRD>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append($@"SELECT * 
                            FROM agrolink.PROGRAM_MEMBER pm 
                                JOIN agrolink.PROGRAM_GROUP pg ON pg.ProgId = pm.ProgId 
                                JOIN agrolink.PROGRAM_MEMBER_GROUP pmg ON pmg.PgId = pg.PgId AND pmg.PmId = pm.Pm_Id 
                                JOIN agrofactuur.THIRD t ON t.ThrID = pm.ThrId 
                                LEFT JOIN agrofactuur.UBN u ON u.ThrId= t.ThrId 
                            WHERE pm.ProgId = ?ProgId AND pg.PgPrefix = ?PgPrefix
                         ");

            using (MySqlCommand cmd = new MySqlCommand())
            {
                cmd.CommandText = lQuery.ToString();

                cmd.Parameters.Add(new MySqlParameter("ProgId", agrolink_progid));
                cmd.Parameters.Add(new MySqlParameter("PgPrefix", soort));

                var mysql = new MySql.Data.MySqlClient.MySqlConnection(mToken.SlaveConnectionString);
                cmd.Connection = mysql;
                try
                {
                    mysql.Open();
                    MySqlDataAdapter adapter = new MySqlDataAdapter(cmd);
                    DataSet stats = new DataSet();
                    adapter.Fill(stats, "agrolink");
                    foreach (DataRow drwLabels in stats.Tables[0].Rows)
                    {
                        THIRD lmb = new THIRD();
                        if (mDatabase.FillObject(lmb, drwLabels))
                        {
                            lResultValue.Add(lmb);
                        }
                    }
                }
                catch (Exception exc)
                {
                    unLogger.WriteError(exc.ToString());
                }
                finally
                {
                    if (mysql.State == ConnectionState.Open)
                    {
                        mysql.Close();
                    }
                }

            }
            return lResultValue;
        }

        public DataTable getK01DyrLaktaCalves(int UbnId, int MaxAniCategory)
        {
            return Deenssysteem.getK01DyrLaktaCalves(UbnId, MaxAniCategory);
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #region Sopraco File imports

        public int saveFile_Import(FILE_IMPORT pFile_Import)
        {
            try
            {
                //return WriteActions.SaveObject(pFile_Import);
                string[] keyfields = { "FILE_IMPORT_ID" };
                if (pFile_Import.FILE_IMPORT_ID > 0)
                {
                    DBConnectionToken conn = mToken.getLastChildConnection();


                    string query = $@"
                            UPDATE agrodata.FILE_IMPORT SET FI_State={pFile_Import.FI_State} WHERE FILE_IMPORT_ID={pFile_Import.FILE_IMPORT_ID};
                         ";
                    return mDatabase.ExecuteNonQuery(conn, query);

                }
                else
                {
                    return mDatabase.InsertObject(mToken, pFile_Import, "agrodata", keyfields);//, mDatabase.CreateInsertCommandText(pFile_Import));
                }
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public int saveFile_Import_Type(FILE_IMPORT_TYPE pFile_Import_Type)
        {
            try
            {
                //return WriteActions.SaveObject(pFile_Import_Type);
                string[] keyfields = { "File_Import_Type_ID" };
                return mDatabase.InsertObject(mToken, pFile_Import_Type, "agrodata", keyfields);//, mDatabase.CreateInsertCommandText(pFile_Import_Type));
            }
            catch (Exception ex)
            {
                unLogger.WriteError(ex.Message, ex);
                return -1;
            }
        }

        public List<FILE_IMPORT> getFile_ImportsByUbnID_Destination(int pUbnID_Destination, VSM.RUMA.CORE.DB.LABELSConst.FILE_IMPORT_Status pStatus)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT agrodata.FILE_IMPORT.* FROM agrodata.FILE_IMPORT");

            lQuery.AppendFormat(" WHERE agrodata.FILE_IMPORT.UbnID_Destination = '{0}' AND agrodata.FILE_IMPORT.FI_State = {1} AND agrodata.FILE_IMPORT.FILE_IMPORT_ID>0  ", pUbnID_Destination, (int)pStatus);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            List<FILE_IMPORT> lResultValue = new List<FILE_IMPORT>();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                FILE_IMPORT lmb = new FILE_IMPORT();
                if (mDatabase.FillObject(lmb, drwLabels))
                {
                    lResultValue.Add(lmb);
                }
            }
            return lResultValue;
        }

        public FILE_IMPORT_TYPE getFile_Import_TypesByID(int pFile_Import_Type_ID)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT agrodata.FILE_IMPORT_TYPE.* FROM agrodata.FILE_IMPORT_TYPE ");

            lQuery.AppendFormat(" WHERE agrodata.FILE_IMPORT_TYPE.File_Import_Type_ID = '{0}'  ", pFile_Import_Type_ID);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            FILE_IMPORT_TYPE lResultValue = new FILE_IMPORT_TYPE();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                mDatabase.FillObject(lResultValue, drwLabels);
                break;
            }
            return lResultValue;
        }

        public FILE_IMPORT getFile_ImportByData(string FI_Data_Row)
        {
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append(" SELECT agrodata.FILE_IMPORT.* FROM agrodata.FILE_IMPORT ");

            lQuery.AppendFormat(" WHERE agrodata.FILE_IMPORT.FI_Data_Row = '{0}' AND agrodata.FILE_IMPORT.FILE_IMPORT_ID > 0 ", FI_Data_Row);

            System.Data.DataTable dtLabels = mDatabase.QueryData(mToken, lQuery);
            FILE_IMPORT lResultValue = new FILE_IMPORT();
            foreach (DataRow drwLabels in dtLabels.Rows)
            {
                mDatabase.FillObject(lResultValue, drwLabels);
                break;
            }
            return lResultValue;
        }

        public List<FILE_IMPORT> GetFile_ImportsByData(int UbnID_Destination, string filename, string line, int File_Import_Type_ID)
        {
            List<FILE_IMPORT> lResultValue = new List<FILE_IMPORT>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append($@"SELECT * 
                            FROM agrodata.FILE_IMPORT
                            WHERE FI_Data_Row = ?FI_Data_Row
                            AND  UbnID_Destination =?UbnIDDestination
                            AND  File_Import_Type_ID =?Fileimporttype
                            AND TS > DATE_SUB(NOW(), INTERVAL 1 YEAR)
                            AND FILE_IMPORT_ID > 0
                         ");

            using (MySqlCommand cmd = new MySqlCommand())
            {
                cmd.CommandText = lQuery.ToString();

                cmd.Parameters.Add(new MySqlParameter("FI_Data_Row", line));
                cmd.Parameters.Add(new MySqlParameter("UbnIDDestination", UbnID_Destination));
                cmd.Parameters.Add(new MySqlParameter("Fileimporttype", File_Import_Type_ID));

                if (!string.IsNullOrEmpty(filename))
                {
                    cmd.CommandText += " AND FI_Filename=?Filename ";
                    cmd.Parameters.Add(new MySqlParameter("Filename", filename));
                }
                var mysql = new MySql.Data.MySqlClient.MySqlConnection(mToken.SlaveConnectionString);
                cmd.Connection = mysql;
                try
                {
                    mysql.Open();
                    MySqlDataAdapter adapter = new MySqlDataAdapter(cmd);
                    DataSet stats = new DataSet();
                    adapter.Fill(stats, "Stats");
                    foreach (DataRow drwLabels in stats.Tables[0].Rows)
                    {
                        FILE_IMPORT lmb = new FILE_IMPORT();
                        if (mDatabase.FillObject(lmb, drwLabels))
                        {
                            lResultValue.Add(lmb);
                        }
                    }
                }
                catch (Exception exc)
                {
                    unLogger.WriteError(exc.ToString());
                }
                finally
                {
                    if (mysql.State == ConnectionState.Open)
                    {
                        mysql.Close();
                    }
                }

            }
            return lResultValue;
        }

        public List<FILE_IMPORT> GetFile_ImportsByName(string filename, int fileimporttypeid)
        {
            List<FILE_IMPORT> lResultValue = new List<FILE_IMPORT>();
            StringBuilder lQuery = new StringBuilder();
            lQuery.Append($@"SELECT * FROM agrodata.FILE_IMPORT 
                             WHERE FI_Filename like ?Filename  AND File_Import_Type_ID = ?File_Import_Type_ID AND  FILE_IMPORT_ID > 0  ");

            using (MySqlCommand cmd = new MySqlCommand())
            {
                cmd.CommandText = lQuery.ToString();

                cmd.Parameters.AddWithValue("Filename", filename);
                cmd.Parameters.AddWithValue("File_Import_Type_ID", fileimporttypeid);

                var mysql = new MySql.Data.MySqlClient.MySqlConnection(mToken.SlaveConnectionString);
                cmd.Connection = mysql;
                try
                {
                    mysql.Open();
                    MySqlDataAdapter adapter = new MySqlDataAdapter(cmd);
                    DataSet stats = new DataSet();
                    adapter.Fill(stats, "Stats");
                    foreach (DataRow drwLabels in stats.Tables[0].Rows)
                    {
                        FILE_IMPORT lmb = new FILE_IMPORT();
                        if (mDatabase.FillObject(lmb, drwLabels))
                        {
                            lResultValue.Add(lmb);
                        }
                    }
                }
                catch (Exception exc)
                {
                    unLogger.WriteError(exc.ToString());
                }
                finally
                {
                    if (mysql.State == ConnectionState.Open)
                    {
                        mysql.Close();
                    }
                }

            }



            return lResultValue;

        }
        #endregion

        [Obsolete("Gebruik SOAPLOG.", true)]
        public void WriteError(String ErrorMessage)
        {
            RUMALOG dblog = new RUMALOG();
            dblog.LogDate = DateTime.Now;
            dblog.LogText = ErrorMessage;
            dblog.LogTime = DateTime.Now;
            WriteError(dblog);
        }
        [Obsolete("Gebruik SOAPLOG.", true)]
        public void WriteError(String ErrorMessage, int UbnId, int LogKind)
        {
            RUMALOG dblog = new RUMALOG();
            dblog.LogDate = DateTime.Now;
            dblog.LogText = ErrorMessage;
            dblog.UbnId = Convert.ToString(UbnId);
            dblog.LogKind = LogKind;
            dblog.LogTime = DateTime.Now;
            WriteError(dblog);
        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="hostname"></param>
        /// <param name="processName"></param>
        /// <param name="processVersion"></param>
        /// <param name="processStart"></param>
        /// <param name="progId"></param>
        /// <param name="soaplogKind"></param>
        /// <param name="ok"></param>
        /// <param name="warning"></param>
        /// <param name="nodata"></param>
        /// <param name="error"></param>
        /// <param name="message"></param>
        /// <param name="logPath"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        public int SaveNewTaskLog(string hostname, string processName, string processVersion, DateTime processStart,
            int progId, int soaplogKind, int ok, int warning, int nodata, int error, string message, string logPath, int state)
        {
            string qry = @"INSERT INTO agrodata.TASK_LOG 
                            (
                                `TL_Hostname`, `TL_Process_Name`, `TL_Process_Version`, `TL_DateTime_Begin`, 
                                `ProgID`, `Kind_Soaplog`, `TL_OK`, `TL_Warning`, `TL_NoData`, `TL_Error`, `TL_Message`, `TL_Log_Path`, `TL_State`  
                            )
                            VALUES 
                            (
                                ?hostname, ?processName, ?processVersion, ?processStart, ?progId, ?soaplogKind, ?ok, ?warning, ?nodata, ?error, ?message, ?logPath, ?state
                            )";

            try
            {

                using (DbCommand cmd = mDatabase.CreateCommand(mToken))
                {
                    cmd.CommandText = qry;

                    mDatabase.AddParameter(cmd, "hostname", hostname);
                    mDatabase.AddParameter(cmd, "processName", processName);
                    mDatabase.AddParameter(cmd, "processVersion", processVersion);
                    mDatabase.AddParameter(cmd, "processStart", processStart.ToString("yyyy-MM-dd HH:mm:ss"));
                    mDatabase.AddParameter(cmd, "progId", progId);
                    mDatabase.AddParameter(cmd, "soaplogKind", soaplogKind);
                    mDatabase.AddParameter(cmd, "ok", ok);
                    mDatabase.AddParameter(cmd, "warning", warning);
                    mDatabase.AddParameter(cmd, "nodata", nodata);
                    mDatabase.AddParameter(cmd, "error", error);
                    mDatabase.AddParameter(cmd, "message", message);
                    mDatabase.AddParameter(cmd, "logPath", logPath);
                    mDatabase.AddParameter(cmd, "state", state);

                    if (mDatabase.ExecuteNonQueryCommand(cmd) == 1)
                    {
                        using (System.Data.Common.DbDataReader reader = MySql.Data.MySqlClient.MySqlHelper.ExecuteReader((MySql.Data.MySqlClient.MySqlConnection)cmd.Connection,
                            "SELECT LAST_INSERT_ID();"))
                        {
                            reader.Read();
                            return Convert.ToInt32(reader.GetValue(0));
                        }
                    }
                    else
                    {
                        unLogger.WriteError("DBMasterQueries.SaveNewTaskLog: ExecuteNonQueryCommand != 1");
                        return -1;
                    }
                }

            }
            catch (Exception ex)
            {
                unLogger.WriteError("DBMasterQueries.SaveNewTaskLog: ex: " + ex);
                return -1;
            }

        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="hostname"></param>
        /// <param name="processName"></param>
        /// <param name="processVersion"></param>
        /// <param name="processStart"></param>
        /// <param name="progId"></param>
        /// <param name="soaplogKind"></param>
        /// <param name="message"></param>
        /// <param name="logPath"></param>
        /// <returns></returns>
        public int SaveNewTaskLog(string hostname, string processName, string processVersion, DateTime processStart, int progId, int soaplogKind, string message, string logPath)
        {
            return SaveNewTaskLog(hostname, processName, processVersion, processStart, progId, soaplogKind, 0, 0, 0, 0, message, logPath, (int)LABELSConst.TL_State.BEGIN);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="tasklogId"></param>
        /// <param name="processEnd"></param>
        /// <param name="ok"></param>
        /// <param name="warning"></param>
        /// <param name="nodata"></param>
        /// <param name="error"></param>
        /// <param name="message"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        public bool UpdateTaskLog(int tasklogId, DateTime? processEnd, int ok, int warning, int nodata, int error, string message, int state)
        {
            unLogger.WriteTrace($"{nameof(DBMasterQueries)}.{nameof(UpdateTaskLog)} - tasklogId: {tasklogId} processEnd: {processEnd} ok: {ok} warning: {warning} nodata: {nodata} error: {error} message: {message} state: {state}");

            if (tasklogId <= 0)
            {
                unLogger.WriteWarn("DBMasterQueries.UpdateTaskLog: tasklogId <= 0");
                return false;
            }

            string qry = @"UPDATE agrodata.TASK_LOG SET ";
            if (processEnd.HasValue)
                qry += " TL_DateTime_End = ?processEnd, ";

            qry += @"TL_OK = ?ok,
                     TL_Warning = ?warning,
                     TL_Error = ?error,
                     TL_NoData = ?nodata,
                     TL_Message = ?message,
                     TL_State = ?state
                     WHERE TASK_LOG_ID = ?tasklogId";

            try
            {

                using (DbCommand cmd = mDatabase.CreateCommand(mToken))
                {
                    cmd.CommandText = qry;

                    mDatabase.AddParameter(cmd, "tasklogId", tasklogId);

                    if (processEnd.HasValue)
                        mDatabase.AddParameter(cmd, "processEnd", processEnd.Value.ToString("yyyy-MM-dd HH:mm:ss"));

                    mDatabase.AddParameter(cmd, "ok", ok);
                    mDatabase.AddParameter(cmd, "warning", warning);
                    mDatabase.AddParameter(cmd, "nodata", nodata);
                    mDatabase.AddParameter(cmd, "error", error);
                    mDatabase.AddParameter(cmd, "message", message);
                    mDatabase.AddParameter(cmd, "state", state);

                    int ret = mDatabase.ExecuteNonQueryCommand(cmd);
                    if (ret <= 0)
                    {
                        unLogger.WriteError("DBMasterQueries.UpdateTaskLog: ret <= 0 (" + ret + ")");
                        return false;
                    }
                    return true;
                }

            }
            catch (Exception ex)
            {
                unLogger.WriteError("DBMasterQueries.UpdateTaskLog: ex: " + ex);
                return false;
            }
        }



        #region VERIFIED

        public VERIFIED_ANIMAL GetVerifiedAnimal(string lifeNumber)
        {
            return Verified.GetVerifiedAnimal(lifeNumber);
        }

        public IEnumerable<VERIFIED_MOVEMENT> GetVerifiedMovements(string lifeNumber)
        {
            return Verified.GetVerifiedMovements(lifeNumber);
        }

        public bool UpdateVerifiedMovementsTimestamp(string lifeNumber, int changed_By, int sourceId)
        {
            return Verified.UpdateVerifiedMovementsTimestamp(lifeNumber, changed_By, sourceId);
        }

        public bool SetVerifiedAnimalAndMovements(string lifeNumber, string werknummer, DateTime geboortedat, DateTime importdat, string landCodeHerkomst, string landCodeOorsprong, int aniSex, string haarkleur, DateTime einddatum, string redenEinde, string levensnrMoeder, string vervangenLevensnr, IEnumerable<VERIFIED_MOVEMENT> verblijfplaatsen, int animalSpecies, int changed_By, int sourceId)
        {
            return Verified.SetVerifiedAnimalAndMovements(lifeNumber, werknummer, geboortedat, importdat, landCodeHerkomst, landCodeOorsprong, aniSex, haarkleur, einddatum, redenEinde, levensnrMoeder, vervangenLevensnr, verblijfplaatsen, animalSpecies, changed_By, sourceId);
            return Verified.SetVerifiedAnimalAndMovements(lifeNumber, werknummer, geboortedat, importdat, landCodeHerkomst, landCodeOorsprong, aniSex, haarkleur, einddatum, redenEinde, levensnrMoeder, vervangenLevensnr, verblijfplaatsen, animalSpecies, changed_By, sourceId);
        }

        public void VerifiedCallError(LABELSConst.VerifiedDataSource dataSource, string lifenr)
        {
            Verified.SetCall(dataSource, lifenr, true);
        }

        public void VerifiedCallOk(LABELSConst.VerifiedDataSource dataSource, string lifenr)
        {
            Verified.SetCall(dataSource, lifenr, false);
        }

        public AnimalCallInfo GetCallInfo(LABELSConst.VerifiedDataSource dataSource, string lifenr)
        {
            return Verified.GetCall(dataSource, lifenr);
        }

        public IEnumerable<VERIFIED_ANIMAL_SANITEL> GetVerifiedAnimalsSanitel(IEnumerable<string> lifeNumbers)
        {
            return Verified.GetVerifiedAnimalsSanitel(lifeNumbers);
        }

        public IEnumerable<VERIFIED_MOVEMENT_SANITEL> GetVerifiedMovementsSanitel(IEnumerable<string> lifeNumbers)
        {
            return Verified.GetVerifiedMovementsSanitel(lifeNumbers);
        }

        public IEnumerable<AnimalCallInfo> GetVerifiedCalls(LABELSConst.VerifiedDataSource dataSource, IEnumerable<string> lifeNrs)
        {
            return Verified.GetVerifiedCalls(dataSource, lifeNrs);
        }

        public bool SetVerifiedCalls(LABELSConst.VerifiedDataSource dataSource, IEnumerable<Tuple<string, bool>> callLogs)
        {
            return Verified.SetVerifiedCalls(dataSource, callLogs);
        }

        public bool UpdateVerifiedDataSanitel(IEnumerable<VERIFIED_ANIMAL_SANITEL> animals, IEnumerable<VERIFIED_MOVEMENT_SANITEL> movements, LABELSConst.ChangedBy changedBy, int SourceId)
        {
            return Verified.UpdateVerifiedDataSanitel(animals, movements, changedBy, SourceId);
        }

        public IEnumerable<SanitelBedrijfInfo> GetSanitelBedrijfInfo(IEnumerable<string> productionUnits, IEnumerable<string> facilities)
        {
            productionUnits = productionUnits.Where(p => !string.IsNullOrWhiteSpace(p));
            facilities = facilities.Where(f => !string.IsNullOrWhiteSpace(f));

            var ret = new List<SanitelBedrijfInfo>();

            string prefix = $"{nameof(DBMasterQueries)}.{nameof(GetSanitelBedrijfInfo)} -";

            string sql = $@"SELECT u.UbnId, u.Bedrijfsnummer, up.UP_Value AS Facility
                            FROM agrofactuur.UBN u
                            LEFT JOIN agrofactuur.UBN_PROPERTY up ON up.UbnId = u.UbnId AND up.UP_Key =  '{LABELSConst.UbnPropertyKey.SanitelFacility.ToString()}' 
                            ";
         
            string qryFilter = "WHERE";
        
            if (productionUnits.Any())
            {
                sql += $"{qryFilter} u.Bedrijfsnummer IN ({"'" + string.Join("','", productionUnits) + "'"}) ";
                qryFilter = Environment.NewLine + "OR";
            }
     
            if (facilities.Any())
            {
                sql += $"{qryFilter} UP_Value IN ({"'" + string.Join("','", facilities) + "'"}) ";
            }

            var dt = QueryData(sql);

            if (dt.Rows.Count == 0)
            {
                return new List<SanitelBedrijfInfo>(); ;
            }
            else
            {
                ret = new List<SanitelBedrijfInfo>(dt.Rows.Count);
                foreach (DataRow rw in dt.Rows)
                {
                    int ubnId = rw.Field<int>("UbnId");
                    string bedrijfsnummer = rw.Field<string>("Bedrijfsnummer");
                    string facility = rw.Field<string>("Facility");
                    ret.Add(new SanitelBedrijfInfo(ubnId, bedrijfsnummer, facility));
                }
            }

            return ret;
        }

        public bool SetSanitelFacility(int ubnId, string facility)
        {
            return setUbnProperty(ubnId, LABELSConst.UbnPropertyKey.SanitelFacility.ToString(), facility);
        }

        public bool SaveVerifiedAnimalCall(VERIFIED_ANIMAL_CALL vac)
        {
            try
            {
                return WriteActions.SaveObject(vac) >= 0;
            }
            catch (Exception ex)
            {
                unLogger.WriteError($"{nameof(DBMasterQueries)}.{nameof(SaveVerifiedAnimalCall)} Ex: {ex.Message}", ex);
                return false;
            }
        }

        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="configKey"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public IEnumerable<UBN_PROPERTY> GetUbnPropertiesForKeyValue(string configKey, string value)
        {
            string sql = $@"SELECT up.*
                            FROM agrofactuur.UBN_PROPERTY up
                            WHERE up.UP_Key = '{configKey}'
                            AND up.UP_Value = '{value}'
                            AND up.UbnId > 0";
            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<UBN_PROPERTY>(tbl);
        }

        
        public IEnumerable<MprDate> GetOrignalMPRDatesByUbnId(int ubnId)
        {       
            string sql = $@"SELECT 
	                            Date(ana.AnaMilkDate) as Date, 
	                            Count(*) as NumberOfRecords 

                            FROM ANALYSE ana 

                            WHERE ana.AnaKgMilk > 0 
                            AND ana.AnaTypeOfControl IN (0, 6) 
                            AND ana.UbnId = {ubnId}

                            GROUP BY Date(ana.AnaMilkDate)

                            HAVING NumberOfRecords > 5";

            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<MprDate>(tbl);

        }

        public IEnumerable<MprDate> GetAgrobaseOrignalMPRDatesByUbnId(int ubnId)
        {
            string sql = $@"SELECT 
	                            Date(ana.AnaMilkDate) as Date, 
	                            Count(*) as NumberOfRecords 

                            FROM agrobase.ANALYSE ana 

                            WHERE ana.AnaKgMilk > 0 
                            AND ana.AnaTypeOfControl IN (0, 6) 
                            AND ana.UbnId = {ubnId}

                            GROUP BY Date(ana.AnaMilkDate)

                            HAVING NumberOfRecords > 5";

            DataTable tbl = mDatabase.QueryData(mToken, new StringBuilder(sql));
            return getList<MprDate>(tbl);

        }

        /// <summary>
        /// Returns a Basic new empty SOAPLOG object with Only Farmnumber and Date/Time set.
        /// </summary>
        /// <param name="bedrijfsnummer"></param>
        /// <param name="changedBy"></param>
        /// <param name="sourceId"></param>
        /// <returns></returns>
        public SOAPLOG CreateSOAPLOG(string bedrijfsnummer, LABELSConst.ChangedBy changedBy, int sourceId)
        {
            return new SOAPLOG()
            {
                FarmNumber = bedrijfsnummer,
                Date = DateTime.Today,
                Time = DateTime.Now,
                Changed_By = (int)changedBy,
                SourceID = sourceId
            };
        }

        /// <summary>
        /// Returns a new SOAPLOG object
        /// </summary>
        /// <param name="bedrijfsnummer"></param>
        /// <param name="soapKind"></param>
        /// <param name="soapStatus"></param>
        /// <param name="soapCode"></param>
        /// <param name="lifenumber"></param>
        /// <param name="soapOmschrijving"></param>
        /// <param name="changedBy"></param>
        /// <param name="sourceId"></param>
        /// <returns></returns>
        public SOAPLOG CreateSOAPLOG(string bedrijfsnummer, LABELSConst.SOAPLOGKind soapKind, string soapStatus, string soapCode, string lifenumber, string soapOmschrijving, LABELSConst.ChangedBy changedBy, int sourceId, int tasklogId)
        {
            return new SOAPLOG()
            {
                FarmNumber = bedrijfsnummer,
                Date = DateTime.Today,
                Time = DateTime.Now,
                Lifenumber = lifenumber,
                Kind = (int)soapKind,
                Status = soapStatus,
                Code = soapCode,
                Omschrijving = soapOmschrijving,
                Changed_By = (int)changedBy,
                SourceID = sourceId,
                TaskLogID = tasklogId
            };
        }

        /// <summary>
        /// voor VBK alleen
        /// </summary>
        /// <param name="thrid"></param>
        /// <returns></returns>
        public List<string> getUBNnummersByThirdID(int thrid)
        {
            List<string> lng = new List<string>();
            if (thrid > 0)
            {
                string qry = getSelection_Query("GetUbnnummerHondVBK");
//                string qry = $@"select u.Bedrijfsnummer from agrofactuur.ADMINISTRATIE ad
//JOIN agrofactuur.UBN u ON ad.ThrId = u.ThrID
//JOIN agrofactuur.THIRD t ON t.ThrId = u.ThrID
//WHERE ad.progid = 25
//AND ad.ProgramID IN(2500,2599, 2550,2551,2570)
//AND u.UbnID > 0
//AND u.Bedrijfsnummer REGEXP '^[0-9]+$'
//AND NOT u.Bedrijfsnummer like '999%'
//AND t.thrid = { thrid}
//                UNION
//                SELECT  u.Bedrijfsnummer FROM agrofactuur.THIRD t
//JOIN agrofactuur.UBN u ON u.ThrId = t.ThrID
//JOIN agrofactuur.BEDRIJF b ON b.UbnID = u.UbnID
//WHERE b.progid = 25
//AND b.ProgramID IN(2500,2599, 2550,2551,2570)
//AND u.UbnID > 0
//AND u.Bedrijfsnummer REGEXP '^[0-9]+$'
//AND NOT u.Bedrijfsnummer like '999%'
//AND t.thrid = { thrid}
//                ";
                StringBuilder QRY_Ubnnummer = new StringBuilder();
                QRY_Ubnnummer.Append($@"SET @ThrId:={thrid};");
                QRY_Ubnnummer.Append(qry);
                System.Data.DataTable dtResult = mDatabase.QueryData(mToken, QRY_Ubnnummer);
             
                foreach (DataRow rw in dtResult.Rows)
                {
                    lng.Add( rw["Bedrijfsnummer"].ToString());
                }
            }
            return lng;
        }

        public ANIMAL getbirthanimal(int eventId)
        {
            ANIMAL a = new ANIMAL();
            if (eventId > 0)
            {
                    
                StringBuilder QRY_birthanimal = new StringBuilder();
                QRY_birthanimal.Append($@"
                    SELECT a.* FROM  ANIMAL a
                    JOIN BIRTH br ON br.CalfID=a.AniId
                    WHERE br.EventId={eventId}
                    ");
                System.Data.DataTable dtResult = mDatabase.QueryData(mToken.getLastChildConnection(), QRY_birthanimal);

                foreach (DataRow rw in dtResult.Rows)
                {
                    FillObject(a, rw); 
                }
            }
            return a;
        }
 
    }


}